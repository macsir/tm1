<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Applix.TM1.API</name>
    </assembly>
    <members>
        <member name="T:Applix.TM1.API.TM1Object">
            <summary> Represents the base class for core TM1 objects.
            </summary>
            <remarks> Each <b>TM1Obect</b> is assigned a unique GUID when it is created, which
            may be used for identifying and tracking the object.
            See <see cref="P:Applix.TM1.API.TM1Object.GUID"/>.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1Object.ToString">
            <overloads> Returns a string containing the object's name prepended to the base object's <b>ToString</b> method.
            </overloads>
        </member>
        <member name="M:Applix.TM1.API.TM1Object.ToString(System.String,System.IFormatProvider)">
            <summary> Converts process parameter to a string based on user specified format.
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Object.Dispose">
            <summary> Causes the current object to <b>Dispose</b> all of its resources. After
            calling this method, the object is no longer usable. See the Remarks section for
            the <see cref="M:Applix.TM1.API.TM1Object.Dispose"/> method.
            </summary>
            <remarks> It is acceptable to call the <b>Dispose</b> method on an object more than one
            time. After the object is <b>Disposed</b>, it is acceptable to access the
            <see cref="P:Applix.TM1.API.TM1Object.Disposed"/> property. Most other operations will result in a
            <see cref="T:Applix.TM1.API.TM1DisposedObjectException"/>.<p/>
            <p/>
            Following good programming practice, objects should be <b>Disposed</b>
            after you finish with them. Note however that most objects are managed
            by the objects or collections that own them and therefore must not be
            <b>Disposed</b> by user code.<p/>
            <p/>
            <p>For example, in the following code:
            <code>
            	TM1CubeCollection cubes = server.Cubes;
            	TM1Cube cube = cubes["mycube"];
            </code>
            neither the <c>cubes</c> nor <c>cube</c> object should be <b>Disposed</b> by
            user code; <c>cubes</c> is owned by the TM1Server and <c>cube</c> is
            owned by the TM1CubesCollection and they will be Disposed by their
            owners.</p>
            <p/>
            By contrast, some objects are the responsibility of the API programmer
            to Dispose. The <see cref="T:Applix.TM1.API.TM1AdminServer"/> is created by the program
            and should be Disposed by the program. Another example is a
            <see cref="T:Applix.TM1.API.TM1Subset"/> that has been obtained via
            TM1Subset.<see cref="M:Applix.TM1.API.TM1Subset.Duplicate"/>.
            This object is not a member of a collection, is owned by the code that
            called Duplicate, and should be Disposed by that code. See
            <see cref="M:Applix.TM1.API.TM1Subset.Duplicate"/> for what happens to ownership after
            <see cref="M:Applix.TM1.API.TM1Subset.SaveAs(System.String,System.Boolean,System.Boolean)"/> is called).<p/>
            <p/>
            When in doubt, don't Dispose. In most cases, the API will take care of
            the object. Those instances where an object should be Disposed by user
            code are clearly documented
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1Object.Name">
            <summary> Gets or sets this object's name.
            </summary>
            <remarks> Many derived classes override this method to return the name
            of the TM1 object that was returned from the server, and to disallow
            setting the name.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1Object.IsSystemObject">
            <summary> Returns <b>true</b> if this object has a name that indicates it is a
            system object (i.e., begins with '}').
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Object.Disposed">
            <summary> Returns <b>true</b> if this object has been Disposed. This property
            may be accessed on a Disposed object.
            </summary>
            <remarks> If an object has been Disposed then most properties and
            methods on the object are non-functional and result in a
            <see cref="T:Applix.TM1.API.TM1DisposedObjectException"/>. Those properties and methods
            that may be accessed on a Disposed object are clearly marked.
            See TM1Object.<see cref="M:Applix.TM1.API.TM1Object.Dispose"/>.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1Object.GUID">
            <summary> Gets the Guid associated with the object. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="T:Applix.TM1.API.TM1HeaderCell">
            <summary> Represents a cell in a column or row header.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1HeaderCell.ToString">
            <summary> Returns the value of this cell as a string.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCell.View">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1View"/> that owns this cell.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCell.RowIndex">
            <summary> Gets the row index for this cell.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCell.ColumnIndex">
            <summary> Gets the column index for this cell.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCell.Row">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1HeaderRow"/> object that owns this cell.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCell.HeaderTable">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1HeaderTable"/> object that owns this cell.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCell.Value">
            <summary> Gets the value of this cell.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCell.Subset">
            <summary> Gets the Row or Column subset with which this header cell is
            associated.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCell.Element">
            <summary> Gets the subset element to which this view header cell is mapped.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1DimensionElementPartialCollection">
            <summary> Represents a collection of Root, Child and Parent
            <see cref="T:Applix.TM1.API.TM1DimensionElement"/> objects.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1DimensionElementCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1DimensionElement"/> objects.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ObjectCollection">
            <summary> Represents a collection of objects that, typically, are retrieved from the TM1
            server. This class is sub-classed by API code to create such collections as
            <see cref="T:Applix.TM1.API.TM1CubeCollection"/> and <see cref="T:Applix.TM1.API.TM1DimensionCollection"/>.
            <b>User code cannot sub-class TM1ObjectCollection.</b>
            </summary>
            <remarks> This class is public because much of its functionality must be
            exposed to the user. And much of the class's functionality is protected,
            such as the constructors, the <see cref="M:Applix.TM1.API.TM1ObjectCollection.setCore(Applix.TM1.API.TM1ObjectCollection.CollectionCore)"/>
            method, etc., thereby also being available to user code that might derive a
            sub-class from this class. However, this class is not intended to be
            sub-classed by user code.<p/>
            <p/>
            {climbs up on his soap-box} If the <b>internal protected</b> access modifier
            worked as it should, i.e., limiting access to a class that is BOTH within
            the same assembly AND a derived class, then the constructors would be marked
            as such and it would be clear that user code cannot create sub-classes.
            However, <b>internal protected</b> means that a class that is EITHER within
            the same assembly OR a derived class has access, which actually broadens
            rather than limits access and is therefore less useful. {climbs down off his
            soap-box}.<p/>
            <p/>
            So the most restrictive access possible is <b>protected</b>, which
            unfortunately does not by itself prevent sub-classing outside the assembly.
            There are other aspects of the implementation that do make it impossible to
            create a working sub-class outside the assembly (e.g., many <b>internal</b>
            methods).
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.#ctor">
            <overloads> Create a <see cref="T:Applix.TM1.API.TM1ObjectCollection.CollectionCore"/>.
            </overloads>
            <summary> Create without a <see cref="T:Applix.TM1.API.TM1ObjectCollection.CollectionCore"/>.
            </summary>
            <remarks> The sub-class must call <see cref="M:Applix.TM1.API.TM1ObjectCollection.setCore(Applix.TM1.API.TM1ObjectCollection.CollectionCore)"/> in its
            constructor or early initialization logic.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.#ctor(Applix.TM1.API.TM1ObjectCollection.CollectionCore)">
            <summary> Create with a <see cref="T:Applix.TM1.API.TM1ObjectCollection.CollectionCore"/>.
            </summary>
            <remarks> This constructor may be used by sub-classes that are not
            themselves the <see cref="T:Applix.TM1.API.ICollectionClient"/> interface provider.
            I.e., if there is an extant object that provides the ICollectionClient
            interface at construction time, then that object may be supplied as a
            parameter to this constructor. <see cref="M:Applix.TM1.API.TM1ObjectCollection.setCore(Applix.TM1.API.TM1ObjectCollection.CollectionCore)"/> must not be called
            by the sub-class.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.setCore(Applix.TM1.API.TM1ObjectCollection.CollectionCore)">
             <summary> Provide a TM1ObjectCollection.<see cref="T:Applix.TM1.API.TM1ObjectCollection.CollectionCore"/>
             object to be utilized by an instance of TM1ObjectCollection.
             </summary>
             <remarks> If a sub-class does not utilize the TM1ObjectCollection
             constructor that sets the CollectionCore, then it must call this method
             in its constructor or in early initialization logic and must supply a
             valid CollectionCore instance.
             It is essential to set the CollectionCore, either in the constructor or
             via setCore() in order to make this an operational instance of
             TM1ObjectCollection. This method may be called only one time.
             </remarks>
             <example> Create a sub-class of TM1ObjectCollection as in one of the
             first 2 examples. The third pattern cannot be used because it is not
             possible to create an instance of CollectionCore with <b>this</b> as a
             parameter in a call to the <b>base</b> constructor.
             <code lang="c#">
             // This is the typical pattern whereby the ICollectionClient interface to
             // the CollectionCore is the collection sub-class itself. For this
             // pattern you need to call setCore().
             public class TM1WidgetCollection : TM1ObjectCollection , ICollectionClient
             {
             	internal TM1WidgetCollection()
             	{
             		setCore(new FilteredCollectionCore(this));
             	}
             }
            
             // This code can call the base class constructor with a CollectionCore
             // because the ICollectionClient implementation is not "this".
             public class TM1WidgetCollection : TM1ObjectCollection
             {
             	internal TM1WidgetCollection()
             		: base(new FilteredCollectionCore(new ICollectionClientImpl()))
             	{
             	}
             }
            
             // NON-WORKING CODE
             // This code will not compile because "this" is not available in the
             // base constructor call.
             public class TM1WidgetCollection : TM1ObjectCollection , ICollectionClient
             {
             	internal TM1WidgetCollection()
             		: base(new FilteredCollectionCore(this))	// DOESN'T WORK
             	{
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.Contains(System.Object)">
            <summary> Determines whether the <b>object</b> with the specified
            <i>value</i> is in the collection.
            </summary>
            <returns> <b>true</b> if <i>value</i> is found in the collection;
            otherwise, <b>false</b>. If <i>value</i> is null then <b>false</b> is
            returned.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.ContainsName(System.String)">
            <summary> Determines whether an <b>object</b> with the specified <i>name</i>
            is in the collection.
            </summary>
            <returns> <b>true</b> if an <b>object</b> with the specified <i>name</i> is
            found in the collection; otherwise, <b>false</b>. If <i>name</i> is null
            or empty then <b>false</b> is returned.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.IndexOf(System.Object)">
            <summary> Searches for the <b>object</b> with the specified <i>value</i>
            and returns the zero-based index of the first occurrence within the
            collection.
            </summary>
            <returns> The zero-based index of the first occurrence of <i>value</i>
            within the collection, if found; otherwise, -1. If <i>value</i> is null
            then -1 is returned.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.IndexOfName(System.String)">
            <summary> Searches for the specified <i>name</i> and returns the
            zero-based index of the <b>object</b> within the collection.
            </summary>
            <returns> The zero-based index of the <b>object</b> with the specified
            <i>name</i> within the collection, if found; otherwise, -1.
            If <i>name</i> is null or empty then -1 is returned.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.Refresh">
            <summary> Obtains the most recent objects from the server for purposes of
            populating this collection.
            </summary>
            <remarks> For most collections, Refresh causes the
            <see cref="M:Applix.TM1.API.TM1Object.Dispose"/> method to be called on all objects
            currently held in the collection. Any objects then obtained from the
            collection are newly retrieved from the TM1 server.<p/>
            <p/>
            Note: long-term possibility for enhancement is refreshing collections in-place.
            I.e., any objects that are held in the collection will not be Disposed
            but, instead, will be refreshed to have the most recent data, as if they
            had just been retrieved from the server. Then any extant objects that
            are previously held by client code will remain viable.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.IsValidIndex(System.Int32)">
            <summary> Returns <b>true</b> if <i>nIndex</i> is within the range of
            valid indexes for this collection, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.Clear">
            <summary> Removes all items from the collection.
            </summary>
            <remarks> All objects previously held in the collection are Disposed
            (see <see cref="M:Applix.TM1.API.TM1Object.Dispose"/>). After calling this method, any
            objects retrieved from the collection will be newly retrieved from the
            TM1 server.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.Dispose">
            <summary> Causes this collection to Dispose all of its resources and all
            its member objects. After calling this method, the collection and all
            member objects are no longer usable. For more details, see 
            <see cref="M:Applix.TM1.API.TM1ObjectCollection.Dispose"/>.
            </summary>
            <remarks> Following good programming practice, objects should be Disposed
            after you finish with them. However, virtually all collections in this
            API are owned and managed by other API objects and therefore must not be
            Disposed by user code.
            See more info at TM1Object.<see cref="M:Applix.TM1.API.TM1Object.Dispose"/>.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.GetEnumerator">
            <summary> Gets an enumerator over objects held in this collection.
            </summary>
            <remarks> The type of the enumerated objects is typically homogeneous
            and is determined by the derived class. E.g., a
            <see cref="T:Applix.TM1.API.TM1CubeCollection"/> enumerator enumerates over
            <see cref="T:Applix.TM1.API.TM1Cube"/> objects.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1ObjectCollection.GetEnumerator"/>
        </member>
        <member name="P:Applix.TM1.API.TM1ObjectCollection.Count">
            <summary> Gets the number of objects held in the collection.
            </summary>
            <remarks> For TM1 object collections, the returned count is the number
            in the server's collection, i.e., the number that are accessible via
            this collection object.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1ObjectCollection.Populated">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1ObjectCollection.PopulatedCollection"/> object
            that provides access to cached objects without retrieving more objects
            from the TM1 server.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ObjectCollection.Disposed">
            <commentsfrom cref="P:Applix.TM1.API.TM1Object.Disposed"/>
        </member>
        <member name="P:Applix.TM1.API.TM1ObjectCollection.GUID">
            <summary> Gets the Guid associated with this object. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1ObjectCollection.CollectionCore.Disposed">
            <commentsfrom cref="P:Applix.TM1.API.TM1Object.Disposed"/>
        </member>
        <member name="P:Applix.TM1.API.TM1ObjectCollection.CollectionCore.GUID">
            <summary> Obtain this object's Guid. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1ObjectCollection.CollectionCore.Item(System.Int32)">
            <summary> Retrieve object from collection by index <i>nIndex</i>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ObjectCollection.CollectionCore.Item(System.String)">
            <summary> Retrieve object from collection by name <i>strName</i>.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ObjectCollection.PopulatedCollection">
            <summary> Provides access to the objects that have been created and populated into
            this <see cref="T:Applix.TM1.API.TM1ObjectCollection"/>, i.e., those objects that are
            currently cached.
            </summary>
            <remarks> There may be objects that exist on the TM1 server and that are
            accessible via the main <see cref="T:Applix.TM1.API.TM1ObjectCollection"/> but have not
            yet been retrieved and therefore are not represented yet by objects in the
            populated collection. If an object is not yet cached, accessing it via
            TM1ObjectCollection will cause it to be retrieved, whereas accessing it
            via PopulatedCollection will not.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.PopulatedCollection.nextIndex(System.Int32)">
            <summary> Gets the next index in the collection.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.PopulatedCollection.next(System.Int32@)">
            <summary> Gets the object contained at the next index.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.PopulatedCollection.GetEnumerator">
            <summary> Gets an enumerator over objects that have been populated
            into this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1ObjectCollection.PopulatedCollection.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1ObjectCollection.PopulatedCollection.GetEnumerator"/>
        </member>
        <member name="P:Applix.TM1.API.TM1ObjectCollection.PopulatedCollection.Item(System.Int32)">
            <summary> Gets the object from the collection at the specified index.
            </summary>
            <param name="nIndex">Index location of the object.</param>
            <returns></returns>
        </member>
        <member name="T:Applix.TM1.API.ICollectionClient">
            <summary>
            Interface to be exposed by TM1ObjectCollection sub-classes in order to
            specialize the fetching of objects.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionElementCollection.Contains(System.Object)">
            <summary> Determines if the specified element is contained in this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionElementCollection.ContainsName(System.String)">
            <summary> Determines if the element, specified by name, is contained in this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionElementCollection.IndexOf(System.Object)">
            <summary> Returns the index of the specified element.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionElementCollection.IndexOfName(System.String)">
            <summary> Returns the index of the element, specified by name.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionElementCollection.GetElement(System.String[],System.Int32)">
            <summary> Retrieves element by drilling down through descendant
            collections via the <i>path</i> array of names. Start from the name at
            <i>nStart</i>.
            </summary>
            <remarks> This method is used for negotiating the hierarchy of
            elements. A single <i>path</i> vector is passed into the first
            collection then <i>nStart</i> is incremented as the <i>path</i> is
            passed to successive levels of the hierarchy until the last named
            element in the vector is retrieved.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionElementCollection.GetElement(System.Int32[],System.Int32)">
            <summary> Retrieves element by drilling down through descendant
            collections via the <i>path</i> array of inexes. Start from the index at
            <i>nStart</i>.
            </summary>
            <remarks> This method is used for negotiating the hierarchy of
            elements. A single <i>path</i> vector is passed into the first
            collection then <i>nStart</i> is incremented as the <i>path</i> is
            passed to successive levels of the hierarchy until the last indexed
            element in the vector is retrieved.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElementCollection.Dimension">
            <summary> summary description
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElementCollection.Parent">
            <summary> summary description
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElementCollection.Child">
            <summary> summary description
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElementCollection.AttributeDefinitions">
            <summary> summary description
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElementCollection.Item(System.Int32)">
            <summary> Gets an element from the collection based on the specified index.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElementCollection.Item(System.String)">
            <summary> Gets an element from the collection based on the specified element name.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElementCollection.Item(System.String[])">
            <summary> Gets an element from the collection based on a specified string path.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElementCollection.Item(System.Int32[])">
            <summary> Gets an element from the collection based on a specified index path.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElementCollection.Count">
            <summary> Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1DimensionElementRootCollection">
            <summary> Represents a collection of Root <see cref="T:Applix.TM1.API.TM1DimensionElement"/> objects.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1DimensionElementChildCollection">
            <summary> Represents a collection of Child <see cref="T:Applix.TM1.API.TM1DimensionElement"/> objects.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1DimensionElementParentCollection">
            <summary> Represents a collection of Parent <see cref="T:Applix.TM1.API.TM1DimensionElement"/> objects.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1Dimension">
            <summary> Represents a dimension object in a <b>TM1Server</b>.
            </summary>
            <remarks>
            Obtain a <b>TM1Dimension</b> object from either
            <see cref="P:Applix.TM1.API.TM1Server.Dimensions"/> or
            <see cref="P:Applix.TM1.API.TM1Cube.Dimensions"/>.
            </remarks>
            <example>
            <summary>
            The following code example shows ...<p/>
            <p/>
            <b>NOTE:</b> For a complete example of logging into a <b>TM1Server</b>,
            see <see cref="T:Applix.TM1.API.TM1AdminServer"/>.<p/>
            </summary>
            <code lang="c#">
            // insert code sample here
            </code>
            </example>
        </member>
        <member name="M:Applix.TM1.API.TM1Dimension.#ctor(Applix.TM1.API.Internal._TM1Dimension,Applix.TM1.API.TM1Server)">
            <summary> Constructs a <b>TM1Dimension</b> object from an internal dimension
            object.
            </summary>
            <param name="intDimension">Internal Dimension object</param>
            <param name="server">TM1 Server Object</param>
        </member>
        <member name="P:Applix.TM1.API.TM1Dimension.Name">
            <summary> Gets the name of this <b>TM1Dimension</b> object. This property is not settable.
            </summary>
            <exception cref="T:System.NotSupportedException"> If an attempt is made to set
            the name.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1Dimension.Server">
            <commentsfrom cref="P:Applix.TM1.API.TM1Cube.Server"/>
        </member>
        <member name="P:Applix.TM1.API.TM1Dimension.PublicSubsets">
            <summary> Gets the collection of public <see cref="T:Applix.TM1.API.TM1Subset"/> objects that are
            based upon this dimension.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Dimension.PrivateSubsets">
            <summary> Gets the collection of private <see cref="T:Applix.TM1.API.TM1Subset"/> objects that are
            based upon this dimension.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Dimension.AllElements">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1DimensionElementCollection"/> ...
            
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Dimension.RootElements">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1DimensionElementCollection"/> ...
            
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Dimension.Elements">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1DimensionElementCollection"/> ...
            
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Dimension.Attributes">
            <summary> Gets the collection of <see cref="T:Applix.TM1.API.TM1AttributeValue"/> objects in
            this dimension.
            </summary>
            <remarks> The returned <b>TM1AttributeValue</b> objects are values for the
            <see cref="P:Applix.TM1.API.TM1DimensionCollection.AttributeDefinitions"/>
            collection of attribute definitions.
            </remarks>
        </member>
        <member name="T:Applix.TM1.API.TM1HeaderRowCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1HeaderRow"/> objects.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderRowCollection.View">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1View"/> that owns this <b>TM1HeaderRowCollection</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderRowCollection.HeaderTable">
            <summary> Gets the parent <see cref="T:Applix.TM1.API.TM1HeaderTable"/> for this <b>TM1HeaderRowCollection</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderRowCollection.Item(System.Int32)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1HeaderRow"/> object from this collection by index.
            </summary>
            <param name="index">Index of the <b>TM1HeaderRow</b>.</param>
            <returns></returns>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ProgressCallback">
            <summary>a public interface _TM1ProgressCallback with the call
            void TM1ProgressEvent (_TM1Val message, _TM1Val action, _TM1Val param, String name)
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ObjectType">
            <summary>Defines the Object Type </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1MdxAxis">
            <summary> Represents an MDX Axis.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1MdxAxis.GetDimensionName(System.Int32)">
            <summary>
            Returns the name of the axis dimension at the specified 0-based index.
            The axis dimensions are indexed starting with the outermost dimension.
            </summary>
            <param name="dimensionIndex">The index of the dimension</param>
            <returns>The name of the dimension</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxAxis.GetPropertyCount(System.Int32)">
            <summary>
            Returns the number of member properties at the specified 0-based dimension index
            </summary>
            <param name="dimensionIndex">The index of the dimension</param>
            <returns>The number of member properties for this dimension</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxAxis.GetPropertyNames(System.Int32)">
            <summary>
            Returns the names of the member properties at the specified 0-based dimension index.
            The names are returned as an array of strings.
            </summary>
            <param name="dimensionIndex">The index of the dimension</param>
            <returns>The member properties for this dimension</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxAxis.GetAxisValue(System.Int32,System.Int32,System.String)">
            <summary>
            Returns an axis cell value at the specified axis coordinate.
            </summary>
            <param name="tupleIndex">The 0-based tuple index</param>
            <param name="dimensionIndex">The 0-based dimension index</param>
            <param name="propertyName">The name of the member property</param>
            <returns>The axis cell value</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxAxis.GetAxisValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns an axis cell value at the passed axis coordinate.
            </summary>
            <param name="tupleIndex">The 0-based tuple index</param>
            <param name="dimensionIndex">The 0-based dimension index</param>
            <param name="propertyIndex">The 0-based index of the member property</param>
            <returns>The axis cell value</returns>
            
        </member>
        <member name="P:Applix.TM1.API.TM1MdxAxis.MdxView">
            <summary> Gets an <see cref="T:Applix.TM1.API.TM1MdxView"/> object.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1MdxAxis.TupleCount">
            <summary>
            Gets the number of tuples on this axis.
            For a rows axis, this gives the number of rows in the view.
            For a columns axis, this gives the number of columns in the view.
            </summary>
            
        </member>
        <member name="P:Applix.TM1.API.TM1MdxAxis.DimensionCount">
            <summary>
            Gets the number of dimensions stacked on this axis.
            </summary>
            
        </member>
        <member name="T:Applix.TM1.API.TM1CubeCollection">
             <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1Cube"/> objects in the <b>TM1Server</b>.
             </summary>
             <remarks> The exact contents of the returned collection depends on the
             security privleges of the current user for this <b>TM1Server</b>.
             </remarks>
             <example>
             <summary>
             After logging into a <b>TM1Server</b>, use the <see cref="P:Applix.TM1.API.TM1Server.Cubes"/>
             property to retrieve a <b>TM1CubeCollection</b>, as shown in the following code example.<p/>
             <p/>
             <b>NOTE:</b> For a complete example of logging into a <b>TM1Server</b>,
             see <see cref="T:Applix.TM1.API.TM1AdminServer"/>.<p/>
             </summary>
             <code lang="c#">
             // Retrieve a cube collection
             TM1CubeCollection myCubes = aServer.Cubes;
             
             // Print total number of cubes in collection
             Console.WriteLine("Number of cubes = " + myCubes.Count);
            
             // Print list of cube names
             foreach (TM1Cube aCube in myCubes)
             {
                 Console.WriteLine(aCube.Name);
             }
             </code>
             </example>
        </member>
        <member name="P:Applix.TM1.API.TM1CubeCollection.Server">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Server"/> that owns this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CubeCollection.Item(System.Int32)">
            <overloads> Obtains a <see cref="T:Applix.TM1.API.TM1Cube"/> object. </overloads>
            <summary> Obtains a <see cref="T:Applix.TM1.API.TM1Cube"/> object by <i>index</i>.
            </summary>
            <remarks> If the object has previously been retrieved from the TM1
            server then the cached copy is returned.
            If the object has not yet been retrieved from the TM1 server then it is
            automatically retrieved, populated it into the collection, then returned
            to the caller.
            </remarks>
            <example>
            <code lang="c#">
            	// Obtain a cube by index
            	TM1Cube cube = server.Cubes[42];
            </code>
            </example>
        </member>
        <member name="P:Applix.TM1.API.TM1CubeCollection.Item(System.String)">
            <summary> Obtains a <see cref="T:Applix.TM1.API.TM1Cube"/> object by <i>name</i>.
            </summary>
            <remarks> If the object has previously been retrieved from the TM1
            server then the cached copy is returned.
            If the object has not yet been retrieved from the TM1 server then it is
            automatically retrieved then returned to the caller.<p/>
            <p/>
            Note that, in some cases, an object retrieved from TM1 by name is
            populated into the collection and in other situations it is not.
            The practical affect for user code is that sometimes the same
            client-side object is returned and sometimes different client-side
            objects are returned, each of which represents the same server-side
            object.
            </remarks>
            <example>
            <code lang="c#">
            	// Obtain a cube by name
            	TM1Cube cube = server.Cubes["SalesCube"];
            </code>
            </example>
        </member>
        <member name="T:Applix.TM1.API.TM1Chore">
            <summary> Represents a chore object in a <b>TM1Server</b>.
            </summary>
            <remarks>Obtain a <b>TM1Chore</b> object from <see cref="P:Applix.TM1.API.TM1Server.Chores"/>.
            </remarks>
            <example>
            <summary>
            The following code example shows ...<p/>
            <p/>
            <b>NOTE:</b> For a complete example of logging into a <b>TM1Server</b>,
            see <see cref="T:Applix.TM1.API.TM1AdminServer"/>.<p/>
            </summary>
            <code lang="c#">
            // insert code sample here
            </code>
            </example>
        </member>
        <member name="M:Applix.TM1.API.TM1Chore.#ctor(Applix.TM1.API.Internal._TM1Chore,Applix.TM1.API.TM1Server)">
            <summary> Constructs a TM1Chore object from an internal chore object.
            </summary>
            <param name="chore">Internal Chore object</param>
            <param name="server">TM1 Server Object</param>
        </member>
        <member name="M:Applix.TM1.API.TM1Chore.Duplicate">
            <summary> Makes a duplicate copy of the current object.
            </summary>
            <remarks> The duplicate object has no name. Client application code must
            <see cref="M:Applix.TM1.API.TM1Object.Dispose"/> this object when finished.
            Note that there is not yet a way to save a duplicated object.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1Chore.Execute">
            <summary> Executes this chore.
            </summary>
            <remarks> Only chores that are (1) registered with the server, and
            (2) have not been modified may be executed. If you make changes to a
            chore object then <see cref="M:Applix.TM1.API.TM1Chore.Save"/> it before calling this method.
            Note that there is not yet a way to save a duplicate chore object.
            </remarks>
            <exception cref="T:System.InvalidOperationException"> If an attempt is made to
            execute a chore object that has been modified and not saved.
            </exception>
        </member>
        <member name="M:Applix.TM1.API.TM1Chore.Save">
            <summary> Saves this chore object on the TM1 server.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Chore.Name">
            <summary> Gets the name of the Chore object. This property is not settable.
            </summary>
            <exception cref="T:System.NotSupportedException"> If an attempt is made to set
            the name.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1Chore.Server">
            <commentsfrom cref="P:Applix.TM1.API.TM1Cube.Server"/>
        </member>
        <member name="P:Applix.TM1.API.TM1Chore.StartTime">
            <summary> Gets or sets the start time for this chore.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Chore.Frequency">
            <summary> Gets or sets the frequency for this chore.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Chore.Active">
            <summary> Gets or sets the active state of this chore.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Chore.Steps">
            <summary> Gets or sets the list of steps for this chore.
            </summary>
            <remarks> 
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1Chore.InternalChore">
            <summary> Always access internal chore through this property to avoid
            duplicating chores when adding to the chore collection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1AdminServer">
             <summary> Represents a TM1 Admin Server from which TM1 database servers are
             obtained.<p/>
             <b>This is the primary object with which to start a TM1 application.</b>
             </summary>
             <remarks> Start your custom TM1 application by instantiating a <b>TM1AdminServer</b> and then
             logging into a TM1 database server via:<p/>
             <p/>
             <b>TM1AdminServer</b>.<see cref="P:Applix.TM1.API.TM1AdminServer.Servers"/>[].<see cref="M:Applix.TM1.API.TM1ServerInfo.Login(System.String,System.String)"/>.<p/>
             <p/>
             This yields a <see cref="T:Applix.TM1.API.TM1Server"/> object that allows you access to all the
             resources of that TM1 database.<p/>
             <p/>
             <b>Obtaining TM1ServerInfoCollection and TM1ServerInfo Objects</b><br/>
             The TM1AdminServer.<see cref="P:Applix.TM1.API.TM1AdminServer.Servers"/> property yields a
             <see cref="T:Applix.TM1.API.TM1ServerInfoCollection"/>
             that holds <see cref="T:Applix.TM1.API.TM1ServerInfo"/> objects. Think of these <b>TM1ServerInfo</b> objects
             as templates that describe TM1 database servers from which actual database
             servers may be instantiated.<p/>
             <p/>
             Obtain a <b>TM1ServerInfo</b> object in one of the following ways:
             <list>
             <item>
             by index via <b>TM1ServerInfoCollection</b>.<see cref="P:Applix.TM1.API.TM1ServerInfoCollection.Item(System.Int32)"/>,
             </item>
             <item>
             by database name via <see cref="P:Applix.TM1.API.TM1ServerInfoCollection.Item(System.String)"/>,
             </item>
             <item>
             or, by host machine name and database name via
             <see cref="P:Applix.TM1.API.TM1ServerInfoCollection.Item(System.String[])"/> or
             <see cref="M:Applix.TM1.API.TM1ServerInfoCollection.GetServerInfo(System.String,System.String)"/>(string,string).
             </item>
             </list><p/>
             <p/>
             <b>Obtaining a TM1Server Object</b><br/>
             Once you have a <b>TM1ServerInfo</b> object, you can obtain a
             <see cref="T:Applix.TM1.API.TM1Server"/> database server via the
             <see cref="M:Applix.TM1.API.TM1ServerInfo.Login(System.String,System.String)"/>(string,string)
             method.<p/>
             <p/>
             <b>NOTE:</b> It is possible, if allowed by the database server, to
             login multiple times with the same or different user ID's and obtain
             multiple different <see cref="T:Applix.TM1.API.TM1Server"/> objects.<p/>
             <p/>
             <b>Cleaning Up Code</b><br/>
             Following good programming practice, <see cref="M:Applix.TM1.API.TM1Object.Dispose"/>
             should be called on this object when finished. Before calling Dispose, be
             sure to call <see cref="M:Applix.TM1.API.TM1AdminServer.LogoutAll"/> in order to logout from and Dispose
             all servers.
             </remarks>
             <example>
             <summary> The following code example creates an instance of a <b>TM1AdminServer</b>, logs into
             a <see cref="T:Applix.TM1.API.TM1Server"/> object and then accesses the <see cref="T:Applix.TM1.API.TM1CubeCollection"/> object for that server.
             </summary>
             <code lang="c#">
             class ExampleApp
             {
             	static int Main(string[] args)
             	{
             		int nRtn = 0;
            
             		// Start by creating an Admin Server object
             		TM1AdminServer admin = new TM1AdminServer("tm1host", "tm1adminserver");
            
             		try
             		{
             			// Obtain "sdata" server info object and then login
             			TM1Server server = admin.Servers["sdata"].Login("admin","apple");
             			if (server != null)
             			{
             				// Start using database server
             				TM1CubeCollection cubes = server.Cubes;
             			}
             			else
             			{
             				// Handle failure to login
             				nRtn = -1;
             			}
             		}
             		catch (Exception exc)
             		{
             			// Handle exception
             			nRtn = -2;
             		}
            
             		// We're done with all database servers and the Admin Server object
             		admin.LogoutAll();
             		admin.Dispose();
            
             		return nRtn;
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:Applix.TM1.API.TM1AdminServer.#ctor(System.String)">
            <overloads> Constructs a TM1AdminServer object. </overloads>
            <summary> Constructs a TM1AdminServer object without an admin host name
            list, thereby including only the local host as an admin host.
            </summary>
            <param name="strSSLCertID">SSL Certificate ID</param>
            <remarks> Note that the resultant object has a <b>null</b> Name property.
            If you wish to assign a name to the object then set the Name property
            after you've created the object. The name that you provide has no effect
            other than naming your local object.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1AdminServer.#ctor(System.String,System.String)">
            <summary> Constructs a TM1AdminServer object with a list of admin hosts.
            This is alternate constructor syntax to
            TM1AdminServer.<see cref="M:Applix.TM1.API.TM1AdminServer.#ctor(System.String[],System.String)"/>(string[],string).
            Also see remarks for
            TM1AdminServer.<see cref="M:Applix.TM1.API.TM1AdminServer.#ctor(System.String)"/>(string).
            </summary>
            <param name="strAdminHostNames">Admin Host name list. Format is
            "name[;name[;name[...]]]".
            Whatever list you provide, including if it's a null or blank list,
            your local host is automatically included.
            </param>
            <param name="strSSLCertID">The SSL Certificate ID.</param>
        </member>
        <member name="M:Applix.TM1.API.TM1AdminServer.#ctor(System.String[],System.String)">
            <summary> Constructs a TM1AdminServer object with a list of admin hosts.
            This is alternate constructor syntax to
            TM1AdminServer.<see cref="M:Applix.TM1.API.TM1AdminServer.#ctor(System.String,System.String)"/>(string,string).
            Also see remarks for
            TM1AdminServer.<see cref="M:Applix.TM1.API.TM1AdminServer.#ctor(System.String)"/>(string).
            </summary>
            <param name="AdminHostNames">Admin Host name list.
            Whatever list you provide, including if it's a null or blank list,
            your local host is automatically included.
            </param>
            <param name="strSSLCertID">SSL Certificate ID</param>
        </member>
        <member name="M:Applix.TM1.API.TM1AdminServer.LogoutAll">
            <summary> Performs a logout for all of the existing <see cref="T:Applix.TM1.API.TM1Server"/> objects
            that belong to all <see cref="T:Applix.TM1.API.TM1ServerInfo"/> objects in the current
            <see cref="P:Applix.TM1.API.TM1AdminServer.Servers"/> collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AdminServer.IsSystemObject">
            <summary> A TM1AdminServer is always a client-side object so this
            property is always <b>false</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AdminServer.AdminHosts">
            <summary> Gets a single string containing all admin host names separated by the ; character.
            This is the list of names with which this TM1AdminHost object was created.
            </summary>
            <remarks> The names list has format "name;name;name" where each admin
            host name is delimited from the others with the ';' character.<p/>
            <p/>
            Note that the local host is added to the list if it was not included in
            the original list of host names.<p/>
            <p/>
            See the example at <see cref="P:Applix.TM1.API.TM1AdminServer.AdminHostNames"/> for retrieving a string
            array, which has the same list of names as is retrieved by this method.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1AdminServer.AdminHostNames">
             <summary> Gets an array of strings containing admin host names. This is the list of
             names with which this TM1AdminHost object was created.
             </summary>
             <remarks> Note that the local host is added to the list if it is not
             already included in the list of host names.
             </remarks>
             <example>
             <summary> The following code example retrieves the AdminHostNames from a TM1AdminServer,
             iterates the resulting list and then writes the names out to the console.
             </summary> 
             <code lang="c#">
            	string[] startHosts = new string[]{"tm1host1","tm1host2"};
             TM1AdminServer admin = new TM1AdminServer(startHosts, "tm1adminserver");
             string[] hosts = admin.AdminHostNames;
            	for (int nCntr = 0 ; (nCntr &lt; hosts.Length) ; ++nCntr)
            	{
            		Console.WriteLine("Host = \"{0}\"", hosts[nCntr]);
            	}
            
             In this example, the local host (named "mymachine") is not included in
             the list so it has been automatically added. Running this code yields:
            		Host = "tm1host1"
            		Host = "tm1host2"
            		Host = "mymachine"
             </code>
             </example>
        </member>
        <member name="P:Applix.TM1.API.TM1AdminServer.HostInfoList">
             <summary> Gets an array of <see cref="T:Applix.TM1.API.TM1HostInfo"/> objects containing information about each TM1 admin host
             and its connection status. A TM1 admin host is the computer on which a TM1 admin server is running.
             </summary>
             <example>
             <summary> The following code example uses the <b>HostInfoList</b> property to retrieve an array of <see cref="T:Applix.TM1.API.TM1HostInfo"/> objects
             and then print the name and connection status of each host to the console.
             </summary>
             <code lang="c#">
             TM1HostInfo[] infoList = admin.HostInfoList;
            	for (int nCntr = 0 ; (nCntr &lt; infoList.Length) ; ++nCntr)
            	{
            		TM1HostInfo info = infoList[nCntr];
             	Console.Write("Name = \"{0}\"", info.Name);
             	if (info.ConnectStatus == TM1HostInfo.HostConnectStatus.Connected)
             	{	Console.WriteLine(" - Connected"); }
             	else
             	{
            			Console.WriteLine(" - Not Connected");
            			Console.WriteLine
            				(	"    Status = {0}, Message = \"{1}\""
             			,	info.ConnectStatus.ToString()
             			,	info.InfoString
             			);
             	}
            	}
            
             Yields:
             	Name = "tm1host" - Connected
             	Name = "george" - Not Connected
             	    Status = ConnectFailure, Message = "Failed attempt to connect to host [george] on port [5498] with SSLCertID [tm1adminserver]"
             	Name = "goodserver" - Connected
             	Name = "charlie" - Not Connected
             	    Status = RepeatAddress, Message = "Same IP address as host [tm1host], address [10.110.256.256]"
             </code>
             </example>
        </member>
        <member name="P:Applix.TM1.API.TM1AdminServer.SSLCertID">
            <summary> Gets the name of the SSL certificate for this TM1 Admin Server.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AdminServer.Servers">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1ServerInfoCollection"/> containing information about all the TM1 database servers registered
            with this Admin Server.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1SubsetElement">
            <summary>
            Summary description for _TM1SubsetElement.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1SubsetElement.#ctor(Applix.TM1.API.Internal._TM1Subset,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary>
            Construct element object using _TM1Val index to avoid resolving api calls.
            </summary>
            <param name="parent"></param>
            <param name="vo_elemIdxInSubset">index wrapped in _TM1Val</param>
            new _TM1SubsetElement(m_parent, elemHandle, elemIndex, elemLevel, elemType, elemDisplayInfo, elemAliasName);
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1SubsetElement.#ctor(Applix.TM1.API.Internal._TM1Subset,Applix.TM1.API.Internal._TM1Val)">
            <summary>
            Construct element object by passing values without api calls.
            </summary>
            <param name="parent"></param>
            <param name="vo_elemIdxInSubset">index wrapped in _TM1Val</param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1SubsetElement.Init">
            <summary>
            pre-fetching extra info about the element, but not resolve them!
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1SubsetElement.ApplyAlias">
            <summary>
            applies the current alias of the parent's subset object to the element
            
            use this call on only one element and then cache the attribute it returns
            and use it directly for subsequent elements.
            using this call for all elements could result in excess traffic to tm1 server
            </summary>
            <returns>the attribute used to apply the alias</returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1SubsetElement.ApplyAlias(Applix.TM1.API.Internal._TM1Attribute)">
            <summary>
            applies a given alias attribute to the element
            </summary>
            <param name="attribute">if null will use the parent's subset current alias</param>
            <returns>the attribute used to apply the alias</returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1SubsetElement.IndexInSubset">
            <summary>
            Returns the Index of this element in the subset.
            This could resolve API calls if the element is retrived by name.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Process">
            <summary> This class contains methods that execute TM1 TurboIntegrator processes. Use this class to 
            execute an existing TurboIntegrator process. This class does not support building an entire 
            TurboIntegrator process from scratch. Support for building process objects through the TM1 Java API
            may be added in a future release of TM1.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Val">
            <summary>This class contains the methods for manipulating the value capsules </summary>
        </member>
        <member name="F:Applix.TM1.API.Internal._TM1Val.m_rm">
            <summary>returns the real value contained in the value capsule</summary>
            <returns> double String value 
            </returns>
            <summary>Value overrides - does not cause a call to the server </summary>
            <summary>sets the value of the capsule</summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.#ctor">
            <summary>Constructors </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.#ctor(System.Int32)">
            <summary>Creates a Integer value capsule object </summary>
            <param name="val">number to be used for creating the value
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.#ctor(System.Boolean)">
            <summary>Creates a boolean value capsule object </summary>
            <param name="val">boolean to be used for creating the value
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.#ctor(System.Double)">
            <summary>Creates a real value capsule object </summary>
            <param name="val">real to be used for creating the value
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.#ctor(System.Single)">
            <summary>Creates a real value capsule object </summary>
            <param name="val">real to be used for creating the value
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.#ctor(System.String)">
            <summary>Creates a String value capsule object </summary>
            <param name="s">String to be used for creating the value
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.#ctor(Applix.TM1.API.Internal._TM1Object)">
            <summary>Creates a object value capsule object </summary>
            <param name="o">object to be used for creating the value
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.makeArrayVal(System.Int32)">
            <summary>creates value capsule containing a TM1Array </summary>
            <param name="size">The size of the array to be created
            </param>
            <returns> _TM1Val value capsule that contains an array 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.MakeArrayVal(System.Int32)">
            <summary>creates value capsule containing a TM1Array </summary>
            <deprecated> Use makeArrayVal(int) 
            </deprecated>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Error Constructors </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary>Pending Val Constructor </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.addToArray(System.Int32,Applix.TM1.API.Internal._TM1Val)">
            <summary>Adds an value to the array capsule at a given index </summary>
            <param name="ix">Index into the array
            </param>
            <param name="elm">new value to be inserted into the array
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.addToArray(Applix.TM1.API.Internal._TM1Val)">
            <summary>Adds an value to the array capsule at the next available Index</summary>
            <param name="elm">new value to be inserted into the array after the last element
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.getArraySize">
            <summary>returns the size of the array value capsule</summary>
            <returns> int size of the value capsule array 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.getArrayVal(System.Int32)">
            <summary>returns the contents of the array capsule at a given index</summary>
            <param name="ix">Index into the array capsule
            </param>
            <returns> _TM1Val, Individual value from the array 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.setArrayVal(System.Int32,Applix.TM1.API.Internal._TM1Val)">
            <summary>change an value to the array capsule at the specified Index</summary>
            <param name="ix">location index in the array to change
            </param>
            <param name="elm">new value to be inserted into the array at the specified index
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.Encryption(System.Boolean)">
            <summary>encrypt the value capsule (only for Type STRING temporarily) </summary>
            <param name="encode">true for encrypt, false for decrypt 
            </param>
            <remarks> The encryption mechanism should match TM1ValStringEncrypt in tm1_r7s/APC_UI.C
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Val.ToString">
            <summary>
            Return a visible representation of this.
            NOTE: this is intended for debugging --
            use the String property for type conversion
            of leaf-level _TM1Val to string.
            </summary>
            <returns>A visual summary of this' contents</returns>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.Int">
            <summary>returns the integer value contained in the value capsule</summary>
            <returns> int Integer value 
            </returns>
            <summary>sets the value of the capsule</summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.Bool">
            <summary>sets the value of the capsule</summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.String">
            <summary>returns the String value contained in the value capsule</summary>
            <returns> String String value 
            </returns>
            <summary>sets the value of the capsule</summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.Bytes">
            <summary>
            returns the byte value contained in the value capsule
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.Object">
            <summary>returns a object from a value capsule</summary>
            <returns> _TM1Object the object stored in the value capsule 
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Object">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.Boolean">
            <summary>returns the boolean value contained in the value capsule</summary>
            <returns> boolean boolean value 
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.ErrorMessage">
            <summary>returns the error message associated with the value capsule</summary>
            <returns> String the error message 
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.ErrorCode">
            <summary>returns the error code associated with the value capsule</summary>
            <returns> int the error code 
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.Type">
            <summary>returns the capsule type</summary>
            <returns> int The value type
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1ValType">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.Updatable">
            <summary>determines if the value capsule is updatable </summary>
            <returns> boolean indicating if the value capsule is updateable
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.Undefined">
            <summary>determines if the value capsule is undefined </summary>
            <returns> boolean indicating if the value capsule is undefined
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.Error">
            <summary>determines if the value capsule is Error </summary>
            <returns> boolean indicating if there is an error
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Val.Encrypted">
            <summary>determines if the value capsule is encrypted </summary>
            <returns> boolean indicating if the value capsule is encrypted
            </returns>
        </member>
        <member name="F:Applix.TM1.API.Internal._TM1Object.OBJTYPE_WRITE_MASK">
            <summary>The following masks are used with the ObjectType property.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.Internal._TM1Object.REG_MASK">
            <summary> The following masks are used with the MajorIndex property.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.ResetObjectProperties">
            <summary>
            This resets the cache so that newer requests for any object properties will be obtained from
            the server.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.getObjectListCount(System.Int32)">
            <summary> Returns count of objects in a collection, each object has its own method
            to get the collection count and you should use those methods instead of this.
            </summary>
            <param name="listPropIndex">Property index which is explained in _TM1Properties object
            </param>
            <returns> _TM1Val count of objects in the list
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.getListObject(System.Int32,System.Int32)">
            <summary> Returns an object from a list collection of the given property. Every
            major object has a version of getting objects and you should use those instead
            of this method to retrieve objects.
            </summary>
            <param name="propIndex">Index of property explained in the _TM1Properties object
            </param>
            <param name="objIndex">Index of object in the collection
            </param>
            <returns> _TM1Val object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.getListObject(System.Int32,System.String)">
            <summary>returns a object from a list collection of the given property. Every
            major object has a version of getting objects and you should use those instead
            of this method to retrieve objects
            </summary>
            <param name="propIndex">Index of property explained in the _TM1Properties object
            </param>
            <param name="name">name of object in the collection
            </param>
            <returns> _TM1Val object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.getProperty(System.Int32)">
            <summary>Returns the value for the property specified in propIndex for this
            object
            </summary>
            <param name="propIndex">Property listing obtained from _TM1Properties object
            </param>
            <returns> _TM1Val value capsule
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Properties">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.getPropertyByName(System.String)">
            <summary>Returns the value for the user-created property(attribute)
            specified in propName for this object.
            </summary>
            <param name="propName">Property name
            </param>
            <returns> _TM1Val value capsule
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.setProperty(System.Int32,Applix.TM1.API.Internal._TM1Val)">
            <summary>Sets the value for the property specified in propIndex for this
            object. The propIndex is obtained from the _TM1Properties object
            </summary>
            <param name="propIndex">the properties index from _TM1Properties object
            </param>
            <param name="propVal">a _TM1Val capsule containing the value
            </param>
            <returns> _TM1Val boolean indication of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Properties">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.setPropertyByName(System.String,Applix.TM1.API.Internal._TM1Val)">
            <summary>Sets the value for the user-created property(attribute) specified by
            propName for this object.
            </summary>
            <param name="propName">the name of the property(Attribute)
            </param>
            <param name="propVal">a _TM1Val capsule containing the value
            </param>
            <returns> _TM1Val boolean indication of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.destroy">
            <summary>destroys an unregistered object on the server and releases its space
            </summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.delete">
            <summary> Destroys an registered major object on the server and releases its space
            To delete an element in a dimension, use _TM1Dimension.deleteElement(_TM1Element)
            </summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.privateDelete">
            <summary> Destroys an registered private object on the server and releases its space.
            </summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.saveFile">
            <summary>saves this object to file on disk</summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.insertAttribute(Applix.TM1.API.Internal._TM1Attribute,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary>inserts a new attribute for this object</summary>
            <param name="attrBefore">Handle to the attribute before the new one(_TM1Attribute)
            </param>
            <param name="attrName">name of the attribute
            </param>
            <param name="attrType">Attribute type as explained in _TM1ObjectType object
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.insertAttribute(Applix.TM1.API.Internal._TM1Attribute,System.String,System.Int32)">
            <summary>inserts a new attribute for this object</summary>
            <param name="attrBefore">Handle to the attribute before the new one(_TM1Attribute)
            </param>
            <param name="attrName">name of the attribute
            </param>
            <param name="attrType">Attribute type as explained in _TM1ObjectType object
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.deleteAttribute(Applix.TM1.API.Internal._TM1Attribute)">
            <summary>deletes an attribute for this server</summary>
            <param name="attr">handle to the attribute to be deleted(_TM1Attribute)
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.getAttributeValue(Applix.TM1.API.Internal._TM1Attribute)">
            <summary>returns the value of an attribute for this object</summary>
            <param name="attr">handle to the attribute whose value is to be retrieved(_TM1Attribute)
            </param>
            <returns> _TM1Val value of the attribute
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.setAttributeValue(Applix.TM1.API.Internal._TM1Attribute,Applix.TM1.API.Internal._TM1Val)">
            <summary> Sets a value for the attribute on this object</summary>
            <param name="attr"> Handle to the attribute(_TM1Attribute)
            </param>
            <param name="value_Renamed">new value for the attribute
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.lock_Renamed">
            <summary> Locks an object preventing access by other clients.
            </summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.release">
            <summary> Releases the reservation on the object</summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.reserve">
            <summary> Reserves the object thereby preventing write access by other clients.
            </summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.unlock">
            <summary> Unlocks the object thereby allowing access to other clients.
            </summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.getSecurityRight(Applix.TM1.API.Internal._TM1Group)">
            <summary> Retrieves the security rights of the object</summary>
            <param name="group">group handle to query for access
            </param>
            <returns> int security rights as detailed in _TM1SecurityType Object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1SecurityType">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.getSecurityRight(Applix.TM1.API.Internal._TM1Client)">
            <summary>retrieves the security rights of the object</summary>
            <param name="client">group handle to query for access
            </param>
            <returns> int security rights as detailed in _TM1SecurityType Object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1SecurityType">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.setSecurityRight(Applix.TM1.API.Internal._TM1Group,Applix.TM1.API.Internal._TM1Val)">
            <summary>sets the security rights of the object</summary>
            <param name="group">group handle to query for access(_TM1Group)
            </param>
            <param name="right">the new security right as detailed in TM1Security class
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1SecurityType">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.setSecurityRight(Applix.TM1.API.Internal._TM1Group,System.Int32)">
            <summary>sets the security rights of the object</summary>
            <param name="group">group handle to query for access(_TM1Group)
            </param>
            <param name="right">the new security right as detailed in TM1Security class
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1SecurityType">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.changedSinceLoaded">
            <summary>returns status of object modification</summary>
            <returns> _TM1Val boolean indicator of object modification
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.getAttribute(System.Int32)">
            <summary>returns a handle to the attribute</summary>
            <param name="index">Index into the object attribute list
            </param>
            <returns> _TM1Attribute handle
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Object">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.getAttribute(System.String)">
            <summary>returns a handle to the attribute</summary>
            <param name="name">name of the attribute in the object attribute list
            </param>
            <returns> _TM1Attribute handle
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Attribute">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Object">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.ClearCollections">
            <summary> Call ClearAll on any TM1ObjectCollections held by this.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.ClearCollection(Applix.TM1.API.Internal._TM1ObjectCollection)">
            <summary> Recursor for implementations of ClearCollections
            </summary>
            <param name="col">A collection to clear</param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.IsObjectChanged">
            <summary>
            Check if the object has been modified on the server since the last time this function is called.
            </summary>
            <returns>Boolean indicator if the object is changed since last check</returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Object.IsObjectValid">
            <summary>
            Check if the object has still valid ( has not been destroed, etc ).
            </summary>
            <returns>Boolean indicator if the object still exists</returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.ObjectType">
            <summary>returns the object Type. The types are listed in _TM1ObjectType Class</summary>
            <returns> int The object Type
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.Readable">
            <summary>Determines if the object has read permission</summary>
            <returns> boolean indication of object read permission
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.Writable">
            <summary>Determines if the object has write permission</summary>
            <returns> boolean indication of object write permission
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.Name_internal">
            <summary>returns the name of the object</summary>
            <returns> _TM1Val name of the object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.ShortName_internal">
            <summary>returns the short name of the object</summary>
            <returns> _TM1Val name of the object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.LastUpdateTime_Internal">
            <summary>returns a datetime string of last object modification</summary>
            <returns> _TM1Val last modified datetime string
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.LastObjectInstanceVersion_Internal">
            <summary>returns a version string of the object instance</summary>
            <returns> _TM1Val object instance version string
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.SecurityStatus">
            <summary>Returns the security status of the object</summary>
            <returns> _TM1Val A Status string which can be one of "AVAILABLE", "LOCKED", "RESERVED"
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.SecurityOwner">
            <summary>returns the owner of reservation or lock on the object</summary>
            <returns> _TM1Val name of the owner who has the object locked or reserved
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.Replication">
            <summary>returns the replication object handle if this object is replicated</summary>
            <returns> _TM1Connection object handle
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Connection">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.ReplicationSourceName">
            <summary>returns the name of the source in the star server for this object</summary>
            <returns> _TM1Val name of source in star server for this object
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.RegistrationState">
            <summary>returns the object registration status</summary>
            <returns> _TM1Val registration status as detailed in _TM1ObjectRegistration object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1ObjectRegistration">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Object.AttributeCount">
            <summary>returns a count of attributes that are defined for this object</summary>
            <returns> _TM1Val number of attributes
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Process.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary> Creates a process object and returns a handle to the empty process. This is a dummy method - the 
            TM1 Java API does not currently support building a complete TurboIntegrator process object
            from scratch.  
            </summary>
            <param name="s">A _TM1Server object that has a valid session with the TM1
            server.
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Process.execute(Applix.TM1.API.Internal._TM1Val)">
            <summary>Executes the current process.
            This function sends the user parameters in the <b>params</b> list to the server 
            without modification. 
            </summary>
            <param name="params_Renamed">_TM1Val array which contains the parameters associated
            with the process. 
            </param>
            <returns> _TM1Val Boolean indicator of success or failure
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <deprecated> Please use executeEx instead.
            </deprecated>
            <seealso cref="M:Applix.TM1.API.Internal._TM1Process.executeEx(Applix.TM1.API.Internal._TM1Val)">
            </seealso>
            <seealso cref="M:Applix.TM1.API.Internal._TM1Process.execute(Applix.TM1.API.Internal._TM1Val,System.Boolean)">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Process.executeEx(Applix.TM1.API.Internal._TM1Val)">
            <summary>Execute current process.
            This method passes the parameter list in the params argument and sends them to the server. 
            This method does not dynamically adjust the parameter list. If you do not know how many parameters a process requires, 
            or you would like the API to fill in the default values for you, call _TM1Process.execute with the optional
            autoFillParams flag.
            </summary>
            <param name="params_Renamed">_TM1Val array which contains the parameters associated
            to the process.
            </param>
            <returns> _TM1Val A _TM1Val which contain error code
            @throws	
            <list type="bullet">
            <item>ProcessAborted</item>
            <item>ProcessCompletedWithMessages</item>
            <item>ProcessQuitCalled</item>
            <item>ProcessFeedersRequired</item>
            <item>ProcessHasMinorErrors</item>
            </list>
            </returns>
            <seealso cref="M:Applix.TM1.API.Internal._TM1Process.execute(Applix.TM1.API.Internal._TM1Val,System.Boolean)">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Process.execute(Applix.TM1.API.Internal._TM1Val,System.Boolean)">
            <summary>Execute current process.
            This method will take the parameters you provide and compare them with the server's
            pre-defined parameter list. If autoFillParams is set
            to TRUE, the parameter list you passed in is synchronized with the  
            server list by following two rules: 
            <list>
            <item>If you supply fewer parameters than the server expects,
            or you don't know how many parameters the process requires, you
            can pass in the parameters as null and the API 
            will try to fill in the missing parameters with default 
            values that are pre-defined in the server.
            </item> 
            <item>If you supply more parameters than the server expects, the API
            will trim off the extra parameters from end. 
            </item>
            </list>
            <p>The autoFillParams flag is for user convenience  
            only. To skip this feature, set autoFillParams to
            FALSE or use the default version without this flag.
            </p>
            </summary>
            <param name="params_Renamed">_TM1Val array which contains the parameters associated
            with the process.
            </param>
            <param name="autoFillParams">Boolean to indicate whether to automatically adjust
            parameters list to match the server list. 
            </param>
            <returns> _TM1Val Boolean Indicates success or failure
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <deprecated> Please use executeEx instead.
            </deprecated>
            <seealso cref="M:Applix.TM1.API.Internal._TM1Process.executeEx(Applix.TM1.API.Internal._TM1Val)">
            </seealso>
            <seealso cref="M:Applix.TM1.API.Internal._TM1Process.executeEx(Applix.TM1.API.Internal._TM1Val,System.Boolean)">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Process.executeEx(Applix.TM1.API.Internal._TM1Val,System.Boolean)">
            <summary> Executes the current process. This method will take the parameters in the
            <b>params </b> argument and compares them with the server's pre-defined
            parameter list. If <b>autoFillParams </b> is set to TRUE, the parameter
            list is adjusted by applying the following rules:
            <list>
            <item>If the number of parameters in the <b>params</b> list is smaller
            than the number of parameters required by the process, the API will try
            to fill in the missing parameters with default values specified in the
            TurboIntegrator process.
            </item>
            <item>If user supplies more parameters than server expects, the API will
            trim off the extra parameters from end.
            </item>
            </list>
            <p> The <b>autofills</b> parameter is for user convinence only. To skip this
            feature, set <b>autoFillParams</b> to FALSE or use default version
            without this flag.
            </p>
            </summary>
            <param name="params_Renamed"> _TM1Val array which contains the
            parameters associated to the process.
            </param>
            <param name="autoFillParams"> Boolean to indicate whether
            automatically adjust parameters list to match server list.
            </param>
            <returns> _TM1Val A _TM1Val which contains one of the following errors:
            <list>
            <item>ProcessAborted</item>
            <item>ProcessCompletedWithMessages</item>
            <item>ProcessQuitCalled</item>
            <item>ProcessFeedersRequired</item>
            <item>ProcessHasMinorErrors</item>
            </list>
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Group.duplicate">
            <summary>returns a duplicate of the group</summary>
            <returns> _TM1Group The handle to the unregistered duplicate group.
            </returns>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EnhApiConst">
            <summary>
            This class contains the constnts used by enhanced API calls
            Defined in EnhApiConst.H
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._MDXView">
            <summary>
            MDXView represents a particular MDX select statement and its
            associated TM1 view.
            </summary>
            
        </member>
        <member name="F:Applix.TM1.API.Internal._MDXView.ColumnsAxisIndex">
            <summary>
            The 0-based index of the view's column axis (always 0)
            </summary>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXView.GetAxis(System.Int32)">
            <summary>
            Return the axis at the passed axis index
            </summary>
            <param name="axisDex">the 0-based index of the axis</param>
            <returns>the axis</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXView.GetTupleCount(System.Int32)">
            <summary>
            Return the number of tuples on the axis.
            For example, for the rows axis, this gives the
            total number of rows of datacells in the view.
            </summary>
            <param name="axisDex">the 0-based index of the axis</param>
            <returns>the number of tuples on the axis</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXView.GetDimensionCount(System.Int32)">
            <summary>
            Return the number of dimensions stacked on the indicated axis
            </summary>
            <param name="axisDex">the 0-based index of the axis</param>
            <returns>the number of dimensions on the axis</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXView.GetPropertyCount(System.Int32,System.Int32)">
            <summary>
            Return the number of member properties included with
            the axis information
            </summary>
            <param name="axisDex">the 0-based index of the axis</param>
            <param name="dimensionDex">the 0-based index of the
            dimension on the axis</param>
            <returns>the number of properties</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXView.GetDimensionName(System.Int32,System.Int32)">
            <summary>
            Return the dimension name at the indicated index on the axis
            </summary>
            <param name="axisDex">the 0-based index of the axis</param>
            <param name="dimensionDex">the 0-based index of the
            dimension on the axis</param>
            <returns>the dimension name</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXView.GetCellValue(System.Int32,System.Int32)">
            <summary>
            Return the data cell value at the indicated row and column.
            If the view has more non-slicer axes than just rows and columns,
            the higher-order axis coordinates will be assumed as 0.
            Note: the coordinates do not include row or column headers.
            </summary>
            <param name="rowCoord">the 0-based row coordinate</param>
            <param name="columnCoord">the 0-based column coordinate</param>
            <returns>the cell value</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXView.GetCellFormattedValue(System.Int32,System.Int32)">
            <summary>
            Return the data cell value at the indicated row and column.
            If the view has more non-slicer axes than just rows and columns,
            the higher-order axis coordinates will be assumed as 0.
            Note: the coordinates do not include row or column headers.
            </summary>
            <param name="rowCoord">the 0-based row coordinate</param>
            <param name="columnCoord">the 0-based column coordinate</param>
            <returns>the cell value</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXView.GetCellValue(System.Int32[],System.String)">
            <summary>
            Return the data cell value at the indicated axis coordinates.
            </summary>
            <param name="axisCoords">an array of 0-based, non-slicer axis
            coordinates, in the axis order: columns, rows, pages, ..</param>
            <param name="cellProperty">the data cell property whose
            value to retrieve, for example, FORMATTED_VALUE</param>
            <returns>the data cell value</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXView.#ctor(Applix.TM1.API.Internal._TM1Server,System.String)">
            <summary>
            Create a new MDXView
            </summary>
            <param name="server">The TM1 Server</param>
            <param name="mdx">The MDX select statement</param>
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXView.Destroy">
            <summary>
            Release TM1 server resources underlying this MDXView 
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._MDXView.SlicerAxisIndex">
            <summary>
            The 0-based index of the view's slicer axis.
            If the view doesn't have a slicer axis, -1 is returned.
            </summary>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._MDXView.RowsAxisIndex">
            <summary>
            The 0-based index of the view's row axis.
            If the view doesn't have a row axis, -1 is returned.
            </summary>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._MDXView.AxisCount">
            <summary>
            The number of axes in the view, including the slicer
            </summary>
            
        </member>
        <member name="T:Applix.TM1.API.TM1SubsetElementCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1SubsetElement"/> objects.
            </summary>
            <remarks> A <b>TM1SubsetElementCollection</b> is a collection of either:<p/>
            <list>
            <item> All elements obtained via
            <b>TM1Subset</b>.<see cref="P:Applix.TM1.API.TM1Subset.AllElements"/>.
            </item>
            <item> Root-level elements obtained via
            <b>TM1Subset</b>.<see cref="P:Applix.TM1.API.TM1Subset.Elements"/> or <b>TM1Subset</b>.<see cref="P:Applix.TM1.API.TM1Subset.RootElements"/>.
            </item>
            <item> Child elements obtained via
            <b>TM1SubsetConsolidatedElement</b>.<see cref="P:Applix.TM1.API.TM1SubsetConsolidatedElement.Children"/>.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.Contains(System.Object)">
            <summary> Returns <b>true</b> if the specified <b>TM1SubsetElement</b> is
            contained in this <b>TM1SubsetElementCollection</b>.
            </summary>
            <param name="value"><b>TM1SubsetElement</b> object.</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.ContainsName(System.String)">
            <summary> Returns <b>true</b> if the specified string value is a valid name for
            an element in this <b>TM1SubsetElementCollection</b>.
            </summary>
            <param name="strName">String value representing the name of an element.
            </param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.IndexOf(System.Object)">
            <summary> Gets the index of a <b>TM1SubsetElement</b> in the collection.
            </summary>
            <param name="value"><b>TM1SubsetElement</b> object.</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.IndexOfName(System.String)">
            <summary> Gets the index for the element that has the specified name in the collection.
            </summary>
            <param name="strName">Element name.</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.GetElement(System.String[],System.Int32)">
            <summary> Retrieves an element by drilling down through child collections
            via the <i>path</i> array of names. Starts from the name at <i>nIndex</i>.
            </summary>
            <remarks> This method is used for recursively negotiating the tree of
            child elements. A single <i>path</i> vector is passed into the first
            collection then <i>nIndex</i> is incremented as the <i>path</i> is
            passed to successively deeper levels of the hierarchy until the last
            named element in the vector is retrieved.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.GetElement(System.Int32[],System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.SelectAll(System.Boolean)">
            <overloads> Selects all elements held in the collection. </overloads>
            <summary> Selects all elements held in the collection, optionally
            selecting all descendants as well.
            </summary>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.SelectAll">
            <summary> Selects all elements held in the collection including all
            descendants.
            </summary>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.DeselectAll(System.Boolean)">
            <overloads> Deselects all elements held in the collection. </overloads>
            <summary> Deselects all elements held in the collection, optionally
            deselecting all descendants as well.
            </summary>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.DeselectAll">
            <summary> Deselects all elements held in the collection including all
            descendants.
            </summary>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.InsertSubset(Applix.TM1.API.TM1Subset,Applix.TM1.API.TM1SubsetElement)">
            <overloads> Inserts a subset into this collection.
            </overloads>
            <summary> Inserts a subset into this collection before a specified
            element.
            </summary>
            <param name="subset"> The <b>TM1Subset</b> to insert into the collection.
            The <i>subset</i> parameter must belong to the same dimension to which
            our owner <see cref="P:Applix.TM1.API.TM1SubsetElementCollection.Subset"/> belongs.
            </param>
            <param name="refElement"> The element before which to insert the subset.
            The <i>refElement</i> element must be a member of this collection.
            </param>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.InsertSubset(Applix.TM1.API.TM1Subset,System.Int32)">
            <summary> Inserts a subset into this collection at a specified index.
            </summary>
            <param name="otherSubset"> The <b>TM1Subset</b> to insert into the collection.
            The <i>otherSubset</i> parameter must belong to the same dimension to which
            our owner <see cref="P:Applix.TM1.API.TM1SubsetElementCollection.Subset"/> belongs.
            </param>
            <param name="nLocation"> The index within the collection at which to
            insert the subset. <i>nLocation</i> must be &lt;= <see cref="P:Applix.TM1.API.TM1SubsetElementCollection.Count"/>. If
            <i>nLocation</i> == Count then the subset is appended to the end of this
            collection.
            </param>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.AppendSubset(Applix.TM1.API.TM1Subset)">
            <summary> Appends a subset to the end of this collection.
            </summary>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.Insert(Applix.TM1.API.TM1DimensionElement,Applix.TM1.API.TM1SubsetElement)">
            <overloads> Inserts a new element. </overloads>
            <summary> Inserts a new element before the specified element.
            </summary>
            <param name="newElement"> The new element to insert. <i>newElement</i>
            must belong to the same <see cref="T:Applix.TM1.API.TM1Dimension"/> as we do.
            </param>
            <param name="refElement"> The element before which to insert the
            <i>newElement</i>. The <i>refElement</i> element must be a member of
            this collection.
            </param>
            <returns> The newly inserted element.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.Insert(Applix.TM1.API.TM1DimensionElement,System.Int32)">
            <summary> Inserts a new element at a specified location.
            </summary>
            <param name="newElement"> The new element to insert. <i>newElement</i>
            must belong to the same <see cref="T:Applix.TM1.API.TM1Dimension"/> as we do.
            </param>
            <param name="nLocation"> The index within the collection at which to
            insert the element. <i>nLocation</i> must be &lt;= <see cref="P:Applix.TM1.API.TM1SubsetElementCollection.Count"/>. If
            <i>nLocation</i> == Count then the element is appended to the end of this
            collection.
            </param>
            <returns> The newly inserted element.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.Append(Applix.TM1.API.TM1DimensionElement)">
            <summary> Appends an element to the end of this collection.
            </summary>
            <param name="newElement"> The new element to append. <i>newElement</i> must
            belong to the same <see cref="T:Applix.TM1.API.TM1Dimension"/> as we do.
            </param>
            <returns> The newly inserted element.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.Remove(Applix.TM1.API.TM1SubsetElement)">
            <overloads> Removes an element from this collection. </overloads>
            <summary> Removes the specified element from this collection.
            </summary>
            <param name="oldChild"> The <b>TM1SubsetElement</b> to remove. The <i>oldChild</i> element must be
            a member of this collection.
            </param>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.Remove(System.Int32)">
            <summary> Removes an indexed element from this collection.
            </summary>
            <param name="nLocation"> The index of the element to remove.
            </param>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.Replace(Applix.TM1.API.TM1DimensionElement,Applix.TM1.API.TM1SubsetElement)">
            <overloads> Removes an element and replaces it with a new element.
            </overloads>
            <summary> Removes a specified element from the collection and replaces it with a new element.
            </summary>
            <param name="newElement"> The new element with which to replace the
            <i>oldElement</i> element. The <i>newElement</i> must belong to the same
            <see cref="T:Applix.TM1.API.TM1Dimension"/> as we do.
            </param>
            <param name="oldElement"> The element to remove and replace with the
            <i>newElement</i> element. <i>oldElement</i> must be a member of this
            collection.
            </param>
            <returns> The newly inserted element.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.Replace(Applix.TM1.API.TM1DimensionElement,System.Int32)">
            <summary> Removes an indexed element from the collection and replaces it with a new element.
            </summary>
            <param name="newElement"> The new element with which to replace the
            element at <i>nLocation</i>. The <i>newElement</i> must belong to the same
            <see cref="T:Applix.TM1.API.TM1Dimension"/> as we do.
            </param>
            <param name="nLocation"> The index of the element to remove and replace
            with the <i>newElement</i> element.
            </param>
            <returns> The newly inserted element.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElementCollection.Refresh">
            <summary> Obtains the most recent objects from the server
            for purposes of populating this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElementCollection.Subset">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Subset"/> that owns this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElementCollection.Parent">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1SubsetConsolidatedElement"/> that
            owns this collection.
            </summary>
            <remarks> If this is a collection of all elements obtained via
            <b>TM1Subset</b>.<see cref="P:Applix.TM1.API.TM1Subset.AllElements"/>
            or a collection of root-level elements that was
            obtained via <b>TM1Subset</b>.<see cref="P:Applix.TM1.API.TM1Subset.RootElements"/>, then this returns
            <b>null</b>. In this case, the <see cref="P:Applix.TM1.API.TM1SubsetElementCollection.Subset"/> is the virtual parent.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElementCollection.Item(System.Int32)">
            <overloads> Gets a <see cref="T:Applix.TM1.API.TM1SubsetElement"/> from the collection. </overloads>
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1SubsetElement"/> by <i>index</i>.
            </summary>
            <example>
            <summary> The following code example obtains a <b>TM1SubsetElement</b> by <i>index</i>.
            from a <b>TM1SubsetElementCollection</b> object.
            </summary>
            <code lang="c#">
            	TM1SubsetElementCollection children = subset.Elements;
            	TM1SubsetElement element = children[42];
            	if (element.IsConsolidated)
            	{
            		TM1SubsetConsolidatedElement parent = element as TM1SubsetConsolidatedElement;
            		children = parent.Children;
            		element = children[0];
            	}
            </code>
            </example>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElementCollection.Item(System.String)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1SubsetElement"/> by <i>name</i>.
            </summary>
            <example>
            <summary> The following code example obtains a <b>TM1SubsetElement</b> by <i>name</i>.
            from a <b>TM1SubsetElementCollection</b> object.
            </summary>
            <code lang="c#">
            	TM1SubsetElementCollection children = subset.Elements;
            	TM1SubsetElement element = children["Deep Thought"];
            	if (element.IsConsolidated)
            	{
            		TM1SubsetConsolidatedElement parent = element as TM1SubsetConsolidatedElement;
            		children = parent.Children;
            		element = children["Ford"];
            	}
            </code>
            </example>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElementCollection.Item(System.String[])">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElementCollection.Item(System.Int32[])">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElementCollection.Count">
            <summary> Gets the number of elements held in the collection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1DataRowCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1DataRow"/> objects
            in a <b>TM1DataTable</b>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DataRowCollection.#ctor(Applix.TM1.API.TM1DataTable)">
            <summary> Creates a <b>TM1DataRowCollection</b> object.
            </summary>
            <param name="dataTable"></param>
        </member>
        <member name="P:Applix.TM1.API.TM1DataRowCollection.DataTable">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1DataTable"/> associated with this <b>TM1DataRowCollection</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataRowCollection.View">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1View"/> associated with this <b>TM1DataRowCollection</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataRowCollection.Item(System.Int32)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1DataRow"/> from the collection by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Applix.TM1.API.TM1DataRow">
            <summary> Represents a row in a <see cref="T:Applix.TM1.API.TM1DataTable"/>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataRow.DataTable">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1DataTable"/> associated with this <b>TM1DataRow</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataRow.View">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1View"/> associated with this <b>TM1DataRow</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataRow.Index">
            <summary> Gets the row index for this <b>TM1DataRow</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataRow.Item(System.Int32)">
            <summary>
            Gets a <b>TM1DataCell</b> at the specified index location.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataRow.Cells">
            <summary>
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1AttributeDefinitionCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1AttributeDefinition"/> objects.
            </summary>
            <remarks> An AttributeDefinitionCollection is owned by an object that also
            owns a collection of other objects, each of which has attribute values.
            Each of the child objects owns an AttributeValueCollection where each of
            the AttributeValue objects refers back to the AttributeDefinition's in this
            collection.<p/>
            <p/>
            Attribute definitons may be obtained by index or by name and may be
            iterated over via IEnumerator.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinitionCollection.#ctor(Applix.TM1.API.Internal._TM1Object)">
            <summary> Create AttributeDefinitionCollection, taking the number of
            attributes and the type and name of each attribute from the collection
            in the <paramref name="obj"/> parameter.
            See <see cref="M:Applix.TM1.API.TM1AttributeDefinitionCollection.initialize(Applix.TM1.API.Internal._TM1Object)"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinitionCollection.Contains(Applix.TM1.API.TM1AttributeDefinition)">
            <summary> Returns <b>true</b> if this collection contains the specified <i>definition</i>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinitionCollection.ContainsName(System.String)">
            <summary> Returns <b>true</b> if this collection contains the specified <i>name</i>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinitionCollection.IndexOf(Applix.TM1.API.TM1AttributeDefinition)">
            <summary> Returns the index of the specified <i>definition</i>.
            If not found, then -1 is returned.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinitionCollection.IndexOfName(System.String)">
            <summary> Returns the index of the <i>named</i> definition. </summary>
            <param name="strName"> Name of attribute for which to obtain index. If
            null or empty then -1 is returned.
            </param>
            <returns> Index of the named attribute. -1 if not found.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinitionCollection.initialize(Applix.TM1.API.Internal._TM1Object)">
            <summary> Extract the attribute types and names from the _TM1Dimension
            or _TM1Element <paramref name="obj"/> parameter and initialize (or
            re-initialize) the definitions in this collection.
            </summary>
            <param name="obj"> Either a _TM1Dimension or _TM1Element object that
            holds attribute definitions (and values, which are ignored) used to
            create this AttributeDefinitionCollection.
            </param>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinitionCollection.verify(Applix.TM1.API.Internal._TM1Object)">
            <summary> Verify that the attributes in this collection have the same
            names and types and are in the same order as those in the <paramref name="obj"/>
            parameter.
            </summary>
            <returns> True if current attributes match those in <paramref name="obj"/>.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinitionCollection.Dispose">
            <summary></summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Object.Dispose" filter="##SUMMARY"/>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinitionCollection.GetEnumerator">
            <summary> Gets an enumerator over <see cref="T:Applix.TM1.API.TM1AttributeDefinition"/>
            objects held in this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinitionCollection.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1AttributeDefinitionCollection.GetEnumerator"/>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeDefinitionCollection.Count">
            <summary> Gets the number of attribute definitions. </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeDefinitionCollection.Disposed">
            <commentsfrom cref="P:Applix.TM1.API.TM1Object.Disposed"/>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeDefinitionCollection.GUID">
            <summary> Gets this object's Guid. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeDefinitionCollection.Item(System.Int32)">
            <summary> Returns the definition at location <i>nIndex</i>. </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeDefinitionCollection.Item(System.String)">
            <summary> Returns the definition with name <i>strName</i>. </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1AttributeValueCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1AttributeValue"/> objects.
            </summary>
            <remarks> An <b>TM1AttributeValueCollection</b> is owned by an object that has
            attributes defined by a separate <b>TM1AttributeDefinitionCollection</b>.  Typically
            the object with attribute values is one of many in a collection where the
            collection owner also owns the <b>TM1AttributeDefinitionCollection</b>.
            <para> Attribute values may be obtained by index or by name and may be
            iterated over via IEnumerator.
            </para>
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValueCollection.#ctor(Applix.TM1.API.TM1AttributeDefinitionCollection)">
            <summary> Creates an empty collection of values that is associated with
            the <paramref name="Defs"/> collection of definitions.
            </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if Defs is null.
            </exception>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValueCollection.#ctor(Applix.TM1.API.TM1AttributeDefinitionCollection,Applix.TM1.API.Internal._TM1Val[])">
            <summary> Create a collection of values that is associated with the
            <paramref name="Defs"/> collection of definitions and contains the
            values in <paramref name="values"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if Defs is null.
            </exception>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValueCollection.Contains(Applix.TM1.API.TM1AttributeValue)">
            <summary> Returns <b>true</b> if our collection contains the value.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValueCollection.IndexOf(Applix.TM1.API.TM1AttributeValue)">
            <summary>Returns the index of the definition.
            If the definition is not found, then -1 is returned.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValueCollection.IndexOfName(System.String)">
            <summary>Returns the index of the named definition.
            If the definition is not found, then -1 is returned.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValueCollection.Dispose">
            <summary></summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Object.Dispose" filter="##SUMMARY"/>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValueCollection.GetEnumerator">
            <summary> Gets an enumerator over <see cref="T:Applix.TM1.API.TM1AttributeValue"/>
            objects held in this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1AttributeValueCollection.GetEnumerator"/>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeValueCollection.Count">
            <summary> Gets the number of values in this collection. This number is the
            same as the number of definitions for the collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeValueCollection.Disposed">
            <commentsfrom cref="P:Applix.TM1.API.TM1Object.Disposed"/>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeValueCollection.GUID">
            <summary> Gets this object's Guid. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeValueCollection.Item(System.Int32)">
            <summary> Returns the value at location nIndex.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeValueCollection.Item(System.String)">
            <summary> Returns the value with name strName.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ViewsCollection">
            <summary>
            Summary description for _TM1ViewsCollection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ObjectCollection">
            <summary>
            Summary description for _TM1ObjectCollection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ObjectRegistration">
            <summary>This class contains the defines for the object registration types
            ObjectPublic
            ObjectPrivate
            ObjectUnregistered
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1GroupsCollection">
            <summary>
            Summary description for _TM1GroupsCollection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ElementsCollection">
            <summary>
            Summary description for _TM1ElementsCollection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1ElementsCollection.Item(System.Int32)">
            <summary>
            Returns an element from the collection at the specified index.
            This index is 0-based.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Attribute.duplicate">
            <summary>returns a duplicate object copy </summary>
            <returns> _TM1Attribute The handle to the duplicate attribute
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Attribute">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Attribute.AttributeType">
            <summary>getAttributeType -> returns the Object's attribute type
            The attribute type values are enumerated in _TM1ObjectType class
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Attribute.AttributeTypeVal">
            <summary>getAttributeType -> returns the Object's attribute type
            The attribute type values are enumerated in _TM1ObjectType class
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1View">
            <summary> Represents a two-dimensional collection of cells within a <see cref="T:Applix.TM1.API.TM1Cube"/>.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.INotify">
             <summary> Notification consumer interface.
             See also <see cref="T:Applix.TM1.API.INotifier"/> and <see cref="T:Applix.TM1.API.TM1Notifier"/>.
             </summary>
             <remarks> An object that wishes to be notified when an event occurs exposes
             this interface and then registers itself with an <see cref="T:Applix.TM1.API.INotifier"/>
             implementation.<p/><p/>
             An <see cref="T:Applix.TM1.API.INotifier"/> implementation sources just a single event type.
             However, an <see cref="T:Applix.TM1.API.INotify"/> implementation might consume multiple event
             types from multiple sources.<p/><p/>
             The <i>nEvent</i> parameter allows the event consumer to discriminate between
             multiple sources with which it may have registered itself. E.g., supply a 0
             parameter to the first supplier and a 1 parameter to the second, then when
             your <see cref="M:Applix.TM1.API.INotify.Notify(System.Int32)"/> entry point is called, the <i>nEvent</i>
             parameter contains either 0 or 1 depending upon which supplier calls you.
             If you're registering with just a single supplier then set <i>nEvent</i> to
             an arbitrary value and just ignore it when called.
             </remarks>
             <example> This example creates a simple event consumer and an event supplier
             that utilizes the <see cref="T:Applix.TM1.API.TM1Notifier"/> helper class. The application code
             shows how 2 events may be routed to 2 objects that wish to be notified.
             <code lang="c#">
             public class EventConsumer : INotify
             {
             	public EventConsumer(string name) { m_name = name; }
             
             	private string m_name;
             
             	public void Notify(int nEvent)
             	{	Console.WriteLine("    {0} notified with event {1}", m_name, nEvent); }
             }
             
             public class EventSupplier : INotifier
             {
             	public EventSupplier() { m_notifier = new TM1Notifier(); }
             
             	private TM1Notifier m_notifier;
             
             	public void Register(INotify notifyee, int nEvent)
             	{	m_notifier.Register(notifyee, nEvent); }
             
             	public void Unregister(INotify notifyee, int nEvent)
             	{	m_notifier.Unregister(notifyee, nEvent); }
             
             	public void Trigger() { m_notifier.Notify(); }
             }
             
             EventConsumer consumer1 = new EventConsumer("Sam");
             EventConsumer consumer2 = new EventConsumer("Joe");
             
             EventSupplier supplier1 = new EventSupplier();
             EventSupplier supplier2 = new EventSupplier();
             
             supplier1.Register(consumer1, 1);
             supplier1.Register(consumer2, 1);
             
             supplier2.Register(consumer2, 2);
             
             Console.WriteLine("Ready to trigger first event:");
             supplier1.Trigger();
             
             Console.WriteLine("Ready to trigger second event:");
             supplier2.Trigger();
             
             // Executing above code yields this output:
            
             Ready to trigger first event:
                 Sam notified with event 1
                 Joe notified with event 1
             Ready to trigger second event:
                 Joe notified with event 2
             </code>
             </example>
        </member>
        <member name="M:Applix.TM1.API.INotify.Notify(System.Int32)">
            <summary> Receive a notification event.
            </summary>
            <param name="nEvent"> The notifyee defined identifier for the event
            type.
            </param>
        </member>
        <member name="M:Applix.TM1.API.TM1View.Create(Applix.TM1.API.TM1Cube)">
            <overloads> Factory functions. </overloads>
            <summary> Factory function.
            <see cref="M:Applix.TM1.API.TM1View.#ctor(Applix.TM1.API.TM1Cube)"/>(TM1Cube).
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.Create(Applix.TM1.API.TM1Server,Applix.TM1.API.TM1Cube)">
            <summary> Factory function. Exists for backwards compatibility only.
            Use <see cref="M:Applix.TM1.API.TM1View.Create(Applix.TM1.API.TM1Cube)"/>(TM1Cube) instead.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.Create(Applix.TM1.API.TM1Cube,System.String,System.Boolean)">
            <summary> Factory function.
            <see cref="M:Applix.TM1.API.TM1View.#ctor(Applix.TM1.API.TM1Cube,System.String,System.Boolean)"/>(TM1Cube,string,bool).
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.#ctor(Applix.TM1.API.TM1Cube)">
            <overloads> Create view object. </overloads>
            <summary> Create a default view for the cube.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.#ctor(Applix.TM1.API.TM1Server,Applix.TM1.API.TM1Cube)">
            <summary> Exists for backwards compatibility only. Use
            <see cref="M:Applix.TM1.API.TM1View.#ctor(Applix.TM1.API.TM1Cube)"/>(TM1Cube) instead.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.#ctor(Applix.TM1.API.TM1Cube,System.String,System.Boolean)">
            <summary> Create object for named view.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.#ctor(Applix.TM1.API.Internal._TM1View,System.String,Applix.TM1.API.TM1Cube,System.Boolean,System.Boolean)">
            <summary> Construct a TM1 View Object based on a internal _TM1View object.
            </summary>
            <param name="view">Internal View object</param>
            <param name="viewName"></param>
            <param name="cube">TM1 Cube Object</param>
            <param name="bPrivate"></param>
            <param name="bCreatedNewView"></param>
        </member>
        <member name="M:Applix.TM1.API.TM1View.Duplicate">
            <summary> Creates a copy of the current <b>TM1View</b> object.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.Save">
            <summary> Saves the current view.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.SaveAs(System.String,System.Boolean)">
            <overloads> Saves the view into a different name or scope. </overloads>
            <summary> Saves the view with given name and scope; do not overwrite.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.SaveAs(System.String,System.Boolean,System.Boolean)">
            <summary> Saves the view with given name, scope and overwrite specification.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.SpreadData(Applix.TM1.API.TM1DataCell,Applix.TM1.API.TM1DataCell,System.String)">
            <summary> Spreads a value between the specified startCell and endCell.
            </summary>
            <param name="startCell">Start of <b>TM1DataCell</b> object</param>
            <param name="endCell">End of <b>TM1DataCell</b> object</param>
            <param name="controlString">Spreading value</param>
        </member>
        <member name="M:Applix.TM1.API.TM1View.MoveSubset(Applix.TM1.API.TM1Subset,Applix.TM1.API.TM1Subset,System.Boolean)">
            <overloads> Moves a subset in the view's title, row or column subsets.
            </overloads>
            <summary> Moves a subset in the view's title, row or column subsets.
            </summary>
            <param name="subsetToMove"> The subset to be moved.
            </param>
            <param name="refSubset">The reference subset in the view's subsets.
            </param>
            <param name="bMoveBefore">Use <b>true</b> to move the subset before the reference
            subset. Use <b>false</b> to move the subset after the reference subset.
            </param>
        </member>
        <member name="M:Applix.TM1.API.TM1View.MoveSubset(Applix.TM1.API.TM1Subset,Applix.TM1.API.TM1Subset)">
            <summary> Moves a subset in the view's title, row or column subsets.
            </summary>
            <param name="subsetToMove"> The subset to be moved.
            </param>
            <param name="refSubset"> The reference subset in the view's subsets before
            which the subset is moved to.
            </param>
        </member>
        <member name="M:Applix.TM1.API.TM1View.MoveSubset(Applix.TM1.API.TM1View.SubsetType,System.Int32,Applix.TM1.API.TM1View.SubsetType,System.Int32)">
            <summary> Moves a subset into a specified location in the view's title,
            row or column subsets.
            </summary>
            <param name="nSourceType"> The source type for the subset. 
            </param>
            <param name="nSourceLocation"> The location in the source.
            Must be &lt; source length.
            </param>
            <param name="nDestinationType"> The destination type for the subset. 
            </param>
            <param name="nDestinationLocation"> The location in the destination.
            Must be &lt;= destination length.
            </param>
        </member>
        <member name="M:Applix.TM1.API.TM1View.Recalc">
            <summary> Forces the view to re-construct the data array.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.Recreate">
            <summary> Restores the view, thereby incorporating any changes in
            subsets.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1View.GetViewHandle(Applix.TM1.API.Internal._TM1Cube,System.String@,System.Boolean@,System.Boolean@)">
            <summary> Gets a handle to the view of viewName
            </summary>
            <param name="cubeHandle"> The cube from which to retrieve/create the view.
            </param>
            <param name="viewName"> Input: gives name of view to find or create.
            If null or empty then new default view is named "" (i.e., empty string).<p/>
            Output: returns name of view.
            </param>
            <param name="bPrivate"> Input: retrieve or create private view.<p/>
            Output: the view is private.
            </param>
            <param name="bCreatedNewView"> Returns <b>true</b> if a new view was
            created.
            </param>
        </member>
        <member name="M:Applix.TM1.API.TM1View.getViewSubsets(Applix.TM1.API.TM1Subset,Applix.TM1.API.TM1View.SubsetType@,System.Int32@)">
            <summary> Finds which of the collections of view subsets (row, column or
            title) that contains the <i>sub</i>, the type of the found collection,
            and the index within in the collection.
            </summary>
            <param name="sub">the subset to find</param>
            <param name="iType">title, row or column</param>
            <param name="nIndex">Index where found</param>
            <returns></returns>
        </member>
        <member name="P:Applix.TM1.API.TM1View.Name">
            <summary> Gets the name of the View object. This property is not settable.
            </summary>
            <exception cref="T:System.NotSupportedException"> If an attempt is made to set
            the name.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1View.Cube">
            <summary> The cube that owns this view.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.AutomaticRecalc">
            <summary> Gets or sets the automatic recalculation mode for the view.
            </summary>
            <remarks> If <b>true</b> then the view is automatically recalculated
            when changes are made.<p/>
            If <b>false</b> then the view does not automatically recalculate
            when changes are made.<p/>
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1View.SuppressZeroes">
            <summary> Gets or sets the value indicating whether the view hides or shows
            all rows and columns that contain only zeros.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.SuppressZeroesOnRows">
            <summary> Gets or sets the value indicating whether the view hides or shows
            rows that contain all zeros.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.SuppressZeroesOnColumns">
            <summary> Gets or sets the value indicating whether the view hides or shows
            columns that containing all zeros.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.NeedsRecalc">
            <summary> Returns <b>true</b> if view needs recalculation due to changes.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.DataTable">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.RowTable">
            <summary> Gets the dimension cells that make up the rows of this view.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.ColumnTable">
            <summary> Gets the dimension cells that make up the columns of this view.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.RowSubsets">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Subset"/> objects that describe the data
            rows.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.ColumnSubsets">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Subset"/> objects that describe the data
            columns.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.TitleSubsets">
            <summary> Gets the dimension subsets that are set to a constant value.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.IsPrivate">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.TitleElements">
            <summary> Gets the element values for the dimension subsets that are
            set to a constant value.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.Filter">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.InternalView">
            <summary> Always try to access the internal duplicated view handle thru
            the InternalView property in order to defer the duplication of views in
            views collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1View.Item(System.Int32)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1DataRow"/> object from this <b>TM1View</b>.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1View.SubsetType">
            <summary> Subsets in views reside in 3 places: the title, rows or columns.
            This enum is used to indicate which type of subset.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1SubsetConsolidatedElement">
            <summary> Represents a <see cref="T:Applix.TM1.API.TM1SubsetElement"/> that has (or can have) child
            elements.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1SubsetElement">
            <summary> Represents an element in a subset of a dimension. See <see cref="T:Applix.TM1.API.TM1Subset"/>
            and <see cref="T:Applix.TM1.API.TM1Dimension"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElement.Select(System.Boolean)">
            <overloads> Selects this element. </overloads>
            <summary> Selects this element and optionally its descendants.
            </summary>
            <param name="bSelectDescendants"> If <b>true</b> then select all of
            this element's descendants in addition to selecting the element itself.
            </param> 
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElement.Select">
            <summary> Selects this element and its descendeants.
            See <see cref="M:Applix.TM1.API.TM1SubsetElement.Select(System.Boolean)"/>(bool).
            </summary>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElement.Deselect(System.Boolean)">
            <overloads> Deselects this element. </overloads>
            <summary> Deselects this element and optionally its descendants.
            </summary>
            <param name="bDeselectDescendants"> If <b>true</b> then deselect all of
            this element's descendants in addition to deselecting the element itself.
            </param> 
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetElement.Deselect">
            <summary> Deselects this element and its descendeants.
            See <see cref="M:Applix.TM1.API.TM1SubsetElement.Deselect(System.Boolean)"/>(bool).
            </summary>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.Name">
            <summary> Gets the name of the <b>TM1SubsetElement</b> object. This property is not settable.
            </summary>
            <exception cref="T:System.NotSupportedException"> If an attempt is made to set
            the name.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.IsConsolidated">
            <summary> Returns <b>true</b> if this element has (or can have) child elements.
            </summary>
            <remarks> This value is always <b>false</b> for a <b>TM1SubsetElement</b> and always
            <b>true</b> for a <b>TM1SubsetConsolidatedElement</b>.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.Children">
            <summary> Gets a collection (potentially empty) of child elements
            if this is a consolidated element, or <b>null</b> if
            this is not a consolidated element.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.Dimension">
            <summary> Gets the <b>TM1Dimension</b> that owns the subset to which this element
            belongs.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.Subset">
            <summary> Gets the <b>TM1Subset</b> to which this element belongs.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.Type">
            <summary> Gets the underlying TM1 type of this element.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.OwnerCollection">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1SubsetElementCollection"/> to which this <b>TM1SubsetElement</b> belongs.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.Selected">
            <summary> Returns <b>true</b> if this element has been selected.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.DisplayLevel">
            <summary> Gets the hierarchical level of this element.
            See <b>TM1Subset</b>.<see cref="M:Applix.TM1.API.TM1Subset.SelectElementsByLevel(System.Int32,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.DisplayWeight">
            <summary> Gets the display weight of this element.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.ParentElement">
            <summary> Gets the element that is a parent to this element, or null
            if this element has no parent.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.DimensionElement">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1DimensionElement"/> upon which this subset element is
            based.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetElement.Weight">
            <summary> Gets the element's weight in relation to its direct parent in
            the subset.
            </summary>
            <returns> The weight of this element in relation to its parent, or
            Double.NaN (Not a Number) if this is a root element, which has no
            parent.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetConsolidatedElement.Select(System.Boolean)">
            <commentsfrom cref="M:Applix.TM1.API.TM1SubsetElement.Select(System.Boolean)"/>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetConsolidatedElement.Deselect(System.Boolean)">
            <commentsfrom cref="M:Applix.TM1.API.TM1SubsetElement.Deselect(System.Boolean)"/>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetConsolidatedElement.ExpandAllChildren">
            <summary> Makes the <see cref="P:Applix.TM1.API.TM1SubsetConsolidatedElement.Children"/> collection include all child
            elements. All descendants of all children are also included.
            </summary>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetConsolidatedElement.ExpandChildren">
            <summary> Makes the <see cref="P:Applix.TM1.API.TM1SubsetConsolidatedElement.Children"/> collection include all child
            elements. No children of any of the child elements are included in
            the collection.
            </summary>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1SubsetConsolidatedElement.CollapseChildren">
            <summary> Removes all child elements from the <see cref="P:Applix.TM1.API.TM1SubsetConsolidatedElement.Children"/>
            collection.
            </summary>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetConsolidatedElement.IsConsolidated">
            <commentsfrom cref="P:Applix.TM1.API.TM1SubsetElement.IsConsolidated"/>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetConsolidatedElement.Children">
            <commentsfrom cref="P:Applix.TM1.API.TM1SubsetElement.Children"/>
        </member>
        <member name="T:Applix.TM1.API.TM1DimensionCollection">
             <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1Dimension"/> objects in the <b>TM1Server</b>.
             </summary>
             <remarks> The exact contents of the returned collection depends on the
             security privleges of the current user for this <b>TM1Server</b>.
             </remarks>
             <example>
             <summary>
             After logging into a <b>TM1Server</b>, use the <see cref="P:Applix.TM1.API.TM1Server.Dimensions"/>
             property to retrieve a <b>TM1DimensionCollection</b>, as shown in the following code example.<p/>
             <p/>
             <b>NOTE:</b> For a complete example of logging into a <b>TM1Server</b>,
             see <see cref="T:Applix.TM1.API.TM1AdminServer"/>.<p/>
             </summary>
             <code lang="c#">
             // Retrieve a dimension collection
             TM1DimensionCollection myDimensions = aServer.Dimensions;
            
             // Print total number of dimensions in collection
             Console.WriteLine("Number of dimensions = " + myDimensions.Count);
            
             // Print list of dimension names
             foreach (TM1Dimension aDimension in myDimensions)
             {
                 Console.WriteLine(aDimension.Name);
             }
             </code>
             </example>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionCollection.Server">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Server"/> that owns this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionCollection.AttributeDefinitions">
            <summary> Gets the collection of definitions for the attribute values that each
            <see cref="T:Applix.TM1.API.TM1Dimension"/> object possesses.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionCollection.Item(System.Int32)">
            <overloads> Gets a <see cref="T:Applix.TM1.API.TM1Dimension"/> object. </overloads>
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1Dimension"/> object by <i>index</i>.
            See remarks for <see cref="P:Applix.TM1.API.TM1CubeCollection.Item(System.Int32)"/>(int).
            </summary>
            <example>
            <code lang="c#">
            	// Obtain a dimension by index
            	TM1Dimension dimension = server.Dimensions[42];
            </code>
            </example>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionCollection.Item(System.String)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1Dimension"/> object by <i>name</i>.
            See remarks for <see cref="P:Applix.TM1.API.TM1CubeCollection.Item(System.String)"/>(string).
            </summary>
            <example>
            <code lang="c#">
            	// Obtain a dimension by name
            	TM1Dimension dimension = server.Dimensions["plan_department"];
            </code>
            </example>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EntryType">
            <summary>
            Summary description for _TM1EntryType.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1CubesCollection">
            <summary>
            Summary description for _TM1CubesCollection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ParameterType">
            <summary> List of values that represent the different types
            of a <b>TM1ProcessParameter</b>.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ProcessParameter">
            <summary> Represents a parameter in a <see cref="T:Applix.TM1.API.TM1Process"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1ProcessParameter.#ctor(System.String,System.String)">
            <summary> Creates a process parameter with a string value.
            </summary>
            <param name="name"></param>
            <param name="sVal"></param>
        </member>
        <member name="M:Applix.TM1.API.TM1ProcessParameter.#ctor(System.String,System.Double)">
            <summary> Creates a process parameter with a double value.
            </summary>
            <param name="name"></param>
            <param name="dVal"></param>
        </member>
        <member name="M:Applix.TM1.API.TM1ProcessParameter.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the process parameter to a string based on a user-specified format.
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="P:Applix.TM1.API.TM1ProcessParameter.Value">
            <summary> Returns a primitive value of the process parameter.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ProcessParameter.Name">
            <summary> Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ProcessParameter.Type">
            <summary>
            Gets the data type of the process parameter as string, double or unknown.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ProcessParameter.GUID">
            <summary> Gets this object's Guid. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Hierarchy">
            <summary>This class contains methods that are related to a dimension hierarchy </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Hierarchy.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary>_TM1Hierarchy -&gt; returns a Hierarchy object</summary>
            <param name="s">a _TM1Server object containing the connection
            </param>
            <returns> _TM1Val a Hierarchy object 
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Server">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Hierarchy.duplicate">
            <summary>returns a duplicate copy of the hierarchy</summary>
            <returns> _TM1Hierarchy The handle to the duplicate hierarchy
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Hierarchy.register(Applix.TM1.API.Internal._TM1Dimension,System.String)">
            <summary>registers the hierarchy with the server making it available to other clients</summary>
            <param name="parent">the parent object of this hierarchy(_TM1Dimension)
            </param>
            <param name="name">The name of this object
            </param>
            <returns> _TM1Hierarchy The handle to the newly registered object
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Hierarchy.getLevel(System.Int32)">
            <summary>returns the level object given its index</summary>
            <param name="index">index, level 
            </param>
            <returns> _TM1HierarchyLevel hierarchy level object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyLevel">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Hierarchy.getLevel(System.String)">
            <summary>returns the level object given its name</summary>
            <param name="name">name of level
            </param>
            <returns> _TM1HierarchyLevel hierarchy level object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyLevel">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Hierarchy.getMember(System.Int32)">
            <summary>returns the hierarchy member object given its index in the hierarchy</summary>
            <param name="index">index, get member at postion index
            </param>
            <returns> _TM1HierarchyMember hierarchy member object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Hierarchy.getMember(System.String)">
            <summary>returns the hierarchy member object given its name</summary>
            <param name="name">name, get member with name
            </param>
            <returns> _TM1HierarchyMember hierarchy member object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Hierarchy.ObjectParent">
            <summary>return the object parent of the hierarchy which is a _TM1Dimension</summary>
            <returns> _TM1Dimension is a _TM1Dimension object
            </returns>
            <deprecated>
            </deprecated>
            <seealso cref="P:Applix.TM1.API.Internal._TM1Hierarchy.Parent">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Hierarchy.Parent">
            <summary>return the dimension containing the hierarchy</summary>
            <returns> _TM1Dimension
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Dimension">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Hierarchy.LevelCount">
            <summary>returns the number of levels in the hierarchy</summary>
            <returns> _TM1Val value
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Hierarchy.DefaultMember">
            <summary>returns the default member in a hierarchy</summary>
            <returns> _TM1HierarchyMember hierarchy member object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Hierarchy.AllMember_Internal">
            <summary>returns the "All" member in a hierarchy</summary>
            <returns> _TM1HierarchyMember hierarchy member object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Hierarchy.AllMember">
            <summary>returns the "All" member in a hierarchy</summary>
            <returns> _TM1HierarchyMember hierarchy member object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Hierarchy.MemberCount">
            <summary>returns the number of members in the hierarchy</summary>
            <returns> _TM1Val value with member count
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EntryFolder">
            <summary>
            Summary description for _TM1EntryFolder.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ApplicationEntry">
            <summary>
            Summary description for TM1Application.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1ApplicationEntry.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary> Creates a application object. </summary>
            <param name="serv">a _TM1Server object that has an established connection
            to a TM1 server.
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1ApplicationEntry.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary> Error handler method. This error is called by the _TM1Server.isError()
            method. Do not call this method directly.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1ApplicationEntry.HasDisplayTitleTag">
            <summary>
            if HasDisplayTitleTag is true, the xml saved in tm1 is old format
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1ApplicationEntry.AccessPermission">
             <summary> Check if the user has access permission. </summary>
            <return> bool: true has access permission , false: no </return>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ClientsCollection">
            <summary>
            Summary description for _TM1ClientsCollection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Client">
            <summary> The TM1 Client class controls user and group security in TM1. For a complete
            description of user and group security, see the <i>TM1 Security Guide </i>.
            <p> The methods in this class can be executed only by a user who is a member of
            the ADMIN group.
            </p>
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Client.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary> Creates a new TM1 Client object. Programmers should not call this
            constructor directly. This constructor is called by the
            _TM1Server.addClient method.
            <p> Before you create a TM1 client, you must create a TM1Bean, then a
            _TM1Server. You must log in to TM1 by calling _TM1Server.openConnection,
            passing the name and password of a TM1 administrator.
            </p>
            </summary>
            <param name="serv"> A _TM1Server object that has been logged in as an
            administrator.
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Client.duplicate">
            <summary> Returns a duplicate of the client object. This method is not implemented
            in the TM1 Server. Do not call this method.
            </summary>
            <returns> _TM1Client The handle to the duplicate client object
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Client.assignToGroup(Applix.TM1.API.Internal._TM1Group)">
            <summary> Assigns this client to the specified group.
            </summary>
            <param name="group"> The group object to which to add this client.
            </param>
            <returns> A _TM1Val containing a Boolean. If the boolean is TRUE, the client
            was successfully assigned to the group.
            @throws ObjectSecurityNoAdminRights
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Client.assignGroup(Applix.TM1.API.Internal._TM1Val)">
            <summary> Assigns this client to the specified group.</summary>
            <param name="group">group
            </param>
            <returns> A _TM1Val containing a Boolean. If the boolean is TRUE, the
            client was successfully assigned to the group.
            @throws ObjectSecurityNoAdminRights
            </returns>
            <deprecated> Please use assignToGroup
            </deprecated>
            <seealso cref="M:Applix.TM1.API.Internal._TM1Client.assignToGroup(Applix.TM1.API.Internal._TM1Group)">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Client.removeFromGroup(Applix.TM1.API.Internal._TM1Group)">
            <summary> Removes this client from the specified group.
            </summary>
            <param name="group">
            A TM1group object from which to remove this client
            </param>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE, the client
            was successfully removed from the group.
            @throws ObjectSecurityNoAdminRights
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Client.removeGroup(Applix.TM1.API.Internal._TM1Val)">
            <summary> Removes this client from the specified group.
            </summary>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE, the client
            was successfully removed from the group.
            @throws ObjectSecurityNoAdminRights
            </returns>
            <deprecated> Please Use removeFromGroup
            </deprecated>
            <seealso cref="M:Applix.TM1.API.Internal._TM1Client.removeFromGroup(Applix.TM1.API.Internal._TM1Group)">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Client.isAssignedToGroup(Applix.TM1.API.Internal._TM1Group)">
            <summary> Returns TRUE if this client is a member of the specified group.
            </summary>
            <param name="group"> A group object. The server will look for the name of the
            client in this group.
            </param>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE, the client
            is a member of the target group.
            @throws ObjectSecurityNoAdminRights
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Client.assignPassword(Applix.TM1.API.Internal._TM1Val)">
            <summary> Establishes a password for this client.
            </summary>
            <param name="password"> The client's new password.
            </param>
            <returns> A _TM1Val containing a string. The string contains the client's
            new password in encrypted form.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Client.assignPassword(System.String)">
            <summary> Establishes a password for this client.
            </summary>
            <param name="password"> The client's new password.
            </param>
            <returns> A _TM1Val containing a string. The string contains the
            client's new password in encrypted form.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Client.GetGroup(System.Int32)">
            <summary>returns the client object </summary>
            <param name="index">Index into the server's client list
            </param>
            <returns> _TM1Client the client object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Client">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Client.GetUserCapability(System.String)">
            <summary>
            Get User Capability
            </summary>
            <returns></returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Client.Password">
            <summary> Retrieves the password for this client. The returned password will be
            encrypted.
            </summary>
            <returns> a _TM1Val object containing the client's encrypted password
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Client.Status">
             <summary> Returns the login status of this client.
            
             </summary>
             <returns> A _TM1Val containing a boolean. If the boolean is TRUE, the client
             is currently logged in.
            
             </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Client.GroupsCount">
            <summary>This property queries the _TM1Server for the total number of groups available </summary>
            <returns> number of groups available
            </returns>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ApplicationEntryDimensionProperties">
            <summary>
            Summary description for TM1ApplicationEntryDimensionProperties.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ViewCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1View"/> objects owned by a
            <see cref="T:Applix.TM1.API.TM1Cube"/>.
            </summary>
            <remarks> Obtain this collection from a <see cref="T:Applix.TM1.API.TM1Cube"/> object.
            The collection typically represents either public or private views.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1ViewCollection.Cube">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Cube"/> that owns this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ViewCollection.IsPublic">
            <summary> Returns <b>true</b> if this is a collection of public subsets,
            <b>false</b> if private.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ViewCollection.Item(System.Int32)">
            <overloads> Gets a <see cref="T:Applix.TM1.API.TM1View"/> object. </overloads>
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1View"/> object by <i>index</i>.
            See remarks for <see cref="P:Applix.TM1.API.TM1CubeCollection.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ViewCollection.Item(System.String)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1View"/> object by <i>name</i>.
            See remarks for <see cref="P:Applix.TM1.API.TM1CubeCollection.Item(System.String)"/>.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1SubsetElementRootCollection">
            <summary> Represents a collection of Root <see cref="T:Applix.TM1.API.TM1SubsetElement"/> objects.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1SubsetElementChildCollection">
            <summary> Represents a collection of Child <see cref="T:Applix.TM1.API.TM1SubsetElement"/> objects.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1CubeDimensionCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1Dimension"/> objects that make up the
            dimensions of a <see cref="T:Applix.TM1.API.TM1Cube"/>.
            </summary>
            <remarks>Obtain a <b>TM1CubeDimensionCollection</b> using <see cref="P:Applix.TM1.API.TM1Cube.Dimensions"/>.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1CubeDimensionCollection.Contains(System.Object)">
            <commentsfrom cref="M:Applix.TM1.API.TM1ObjectCollection.Contains(System.Object)"/>
        </member>
        <member name="M:Applix.TM1.API.TM1CubeDimensionCollection.IndexOf(System.Object)">
            <commentsfrom cref="M:Applix.TM1.API.TM1ObjectCollection.IndexOf(System.Object)"/>
        </member>
        <member name="M:Applix.TM1.API.TM1CubeDimensionCollection.Refresh">
            <commentsfrom cref="M:Applix.TM1.API.TM1ObjectCollection.Refresh" filter="##SUMMARY"/>
            <remarks> Since this TM1CubeDimensionCollection merely refers to the
            objects held in TM1Server.<see cref="P:Applix.TM1.API.TM1Server.Dimensions"/>, calling
            this Refresh method causes an overall Refresh on TM1Server.Dimensions.
            See remarks for TM1ObjectCollection.<see cref="M:Applix.TM1.API.TM1ObjectCollection.Refresh"/>.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1CubeDimensionCollection.GetEnumerator">
            <summary> Gets an enumerator over <see cref="T:Applix.TM1.API.TM1Dimension"/>
            objects held in this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CubeDimensionCollection.Cube">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Cube"/> that owns this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CubeDimensionCollection.Item(System.Int32)">
            <overloads> Gets a <see cref="T:Applix.TM1.API.TM1Dimension"/> object. </overloads>
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1Dimension"/> object by <i>index</i>.
            </summary>
            <remarks> This collection actually references the TM1Dimension objects
            that are held in the overall list of dimensions, i.e., those held in the
            TM1Server.<see cref="P:Applix.TM1.API.TM1Server.Dimensions"/> collection. The particular
            sub-collection of those dimensions that apply to a <see cref="T:Applix.TM1.API.TM1Cube"/>
            are held in this collection.
            </remarks>
            <example>
            <code lang="c#">
            	TM1Dimension dimension = cube.Dimensions[42];
            </code>
            </example>
        </member>
        <member name="P:Applix.TM1.API.TM1CubeDimensionCollection.Item(System.String)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1Dimension"/> object by <i>name</i>.
            See remarks for <b>this</b>.<see cref="P:Applix.TM1.API.TM1CubeDimensionCollection.Item(System.Int32)"/>(int).
            </summary>
            <example>
            <code lang="c#">
            	TM1Dimension dimension = cube.Dimensions["Deep Thought"];
            </code>
            </example>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EntrySubset">
            <summary>
            Summary description for _TM1EntrySubset.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EntryChore">
            <summary>
            Summary description for _TM1EntryChore.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Cube">
            <summary> This class contains methods that allow you to create,read or modify
            TM1 cubes on a TM1 server. A cube is a child object of a TM1 server.
            To retrieve an existing cube, you create a server object, then call
            _TM1Server.getCube().
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary> Creates a cube object. </summary>
            <param name="serv">a _TM1Server object that has an established connection
            to a TM1 server.
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary> Error handler method. This error is called by the _TM1Server.isError()
            method. Do not call this method directly.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.DimensionIndex(System.String)">
            <summary>
            This method returns the index(position) of the dimension in the cube.
            </summary>
            <param name="name">The name of the dimension</param>
            <returns>If dimension is found in the cube, it returns a 1-based index of the dimension in the cube
            If not found, it returns a 0</returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.loadFile">
            <summary> Reads the file corresponding to this cube. The TM1 server generates
            a .cub file for each cube when you save server data to the hard disk.
            </summary>
            <returns> _TM1Cube The TM1 cube object associated with the file.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.deleteFile">
            <summary> Deletes the file of this cube. Each TM1 cube has a corresponding
            .cub file maintained by the TM1 server. This method deletes that
            file.
            </summary>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE, the
            file was successfully deleted.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.register(Applix.TM1.API.Internal._TM1Server,System.String)">
            <summary> Registers the cube with the server making it available to other
            clients. When you create a cube object, it is unregistered. You must
            register the cube object in order for it to persist past the current
            session. When you register the cube object, the cube is given a name and
            added to the TM1 server's TM1ServerCubes list property.
            </summary>
            <param name="parent">the parent object of this cube. This is always the server
            on which the cube resides.
            </param>
            <param name="name">The name of this cube
            </param>
            <returns> A _TM1Cube object. This is the handle to the newly registered object.
            @throws ObjectIsRegistered
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getCellValue(Applix.TM1.API.Internal._TM1Val)">
            <summary> Returns the value of a cube cell.</summary>
            <param name="elemTitles">A _TM1Val containing an array of element handles. You must
            supply one element from each of the dimensions of the cube in the same
            order as the dimensions exist in the cube.
            </param>
            <returns> _TM1Val cube cell value
            @throws CubeKeyInvalid
            @throws CubeNumberOfKeysInvalid
            @throws ObjectSecurityNoReadRights
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getCellsValue(Applix.TM1.API.Internal._TM1Val)">
            <summary> Returns the values of cube cells.</summary>
            <param name="elemTitles">Array of _TM1Val containing an array of element handles. You must
            supply one element from each of the dimensions of the cube in the same
            order as the dimensions exist in the cube.
            </param>
            <returns> _TM1Val cube cells value
            @throws CubeKeyInvalid
            @throws CubeNumberOfKeysInvalid
            @throws ObjectSecurityNoReadRights
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.setCellValue(Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary> Updates the value of a cell in the cube.</summary>
            <param name="elemTitles">A _TM1Val containing an array of element handles.
            You must supply one element handle from each dimension in
            the cube, in the order in which the cube is defined.
            </param>
            <param name="value_Renamed">the new value to be set
            </param>
            <returns> _TM1Val The new value for the cube cell
            @throws CubeKeyInvalid
            @throws CubeNumberOfKeysInvalid
            @throws ObjectSecurityNoWriteRights
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.createPerspective(Applix.TM1.API.Internal._TM1Val)">
            <summary> Creates a TM1 Cube perspective. A perspective is a sub-cube. It is
            defined by choosing one or more free dimensions, which will be the
            dimensions of the resulting sub-cube. The rest of the dimensions
            are fixed by choosing one element from each.
            </summary>
            <param name="elemTitles">A _TM1Val containing an array of element handles.
            You must supply one element from each dimensions of the cube, in the
            dimension order of the cube. Specify free dimensions by setting the
            corresponding element to zero.
            @throws CubeKeyInvalid
            @throws CubeNumberOfKeysInvalid
            @throws CubePerspectiveAllSimpleElements
            @throws ObjectSecurityNoReadRights
            </param>
            <returns> A handle to the generated perspective
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.destroyPerspective(Applix.TM1.API.Internal._TM1Val)">
            <summary> Destroys a TM1 Cube perspective. A perspective is a sub-cube.
            It is defined by choosing one or more free dimensions, which will
            be the dimensions of the resulting sub-cube. The rest of the
            dimensions are fixed by choosing a specific element from each.
            </summary>
            <param name="elemTitles">A _TM1Val containing an array of element handles,
            one from each of the dimensions of the cube. The elements must be in
            the dimension order of the cube. Specify free dimensions by setting
            the corresponding element to zero.
            @throws CubeKeyInvalid
            @throws CubeNumberOfKeysInvalid
            @throws CubePerspectiveAllSimpleElements
            @throws ObjectSecurityNoReadRights
            </param>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE, the
            perspective was successfully destroyed.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.createView(Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary> Creates a TM1 cube view. A view is a child object of a cube. </summary>
            <param name="titleSubsetArr">A _TM1Val containing an array of title subset handles.
            </param>
            <param name="columnSubsetArr">A _TM1Val containing an array of column subset handles.
            </param>
            <param name="rowSubsetArr">A _TM1Val containing an array of row subset handles.
            If all the elements of the dimension are to be used for the view,
            use the subset's dimension handle instead of the subset handle.
            </param>
            <returns> A _TM1Val containing a _TM1View object handle
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.createEmptyRule(System.Int32)">
            <summary> Creates an empty TM1 cube rule of the specified type.
            Once you create an empty rule, you can insert lines into the
            empty rule by calling _TM1Rule.insertLine. You can compile the rule by
            calling _TM1Rule.check. You can activate the rule calling _TM1Rule.attach.
            </summary>
            <param name="type">Specifies the type of rule to be created. Choose
            _TM1ObjectType.RuleCalculation for a calculation rule. Choose
            _TM1ObjectType.RuleDrill for a drilldown rule.
            </param>
            <returns> A _TM1Val containing a _TM1Rule object.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.createEmptyRule(Applix.TM1.API.Internal._TM1Val)">
            <summary> Creates an empty TM1 cube rule of the specified type.
            Once you create an empty rule, you can insert lines into the
            empty rule by calling _TM1Rule.insertLine. You can compile the rule by
            calling _TM1Rule.check. You can activate the rule calling _TM1Rule.attach.
            </summary>
            <param name="type">A _TM1Val containing an integer. This integer specifies the
            type of rule to be created. Choose _TM1ObjectType.RuleCalculation for
            a calculation rule. Choose _TM1ObjectType.RuleDrill for a drilldown rule.
            </param>
            <returns> A _TM1Val containing a _TM1Rule object.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getCellDrillString(Applix.TM1.API.Internal._TM1Val)">
            <deprecated> This function is obsolete.
            </deprecated>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getLogChanges">
            <summary> Returns the status of logging for this cube on the server.
            To set up logging for this cube, call the method _TM1Server.setLogChanges.
            </summary>
            <returns> A _TM1Val containing a boolean. If this boolean is TRUE, logging
            is currently enabled.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.setLogChanges(Applix.TM1.API.Internal._TM1Val)">
            <summary> Sets the logging status for this cube on the server. </summary>
            <param name="value_Renamed">A _TM1Val containing a boolean.
            If the boolean is TRUE, will be enabled for the server.
            </param>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE,
            the method call was successful.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.setLogChanges(System.Boolean)">
            <summary> Sets the logging status for this cube on the server.</summary>
            <param name="value_Renamed">A boolean. If the boolean is TRUE, loggin is enabled
            for this cube on the server.
            </param>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE,
            the method call was successful.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getMeasuresDimension">
            <summary> Returns the dimension in the cube that is set as the measures dimension</summary>
            <returns> A _TM1Dimension object handle. This is a handle to the
            current measures dimension for this cube.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.setMeasuresDimension(Applix.TM1.API.Internal._TM1Dimension)">
            <summary> Sets a dimension in the cube as the measures dimension.</summary>
            <param name="newMeasDim">The handle to new measures dimension.
            </param>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE, the
            method call was successful.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getTimeDimension">
            <summary> Returns the dimension in the cube that is set as the time dimension</summary>
            <returns> A _TM1Dimension object handle. This is a handle to the
            current time dimension for this cube.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.setTimeDimension(Applix.TM1.API.Internal._TM1Dimension)">
            <summary> Sets a dimension in the cube as the time dimension.</summary>
            <param name="newTimeDim">The handle to new time dimension.
            </param>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE, the
            method call was successful.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.setPerspectiveMaxMemory(Applix.TM1.API.Internal._TM1Val)">
            <summary> Sets the maximum memory allocated for storing perspectives. </summary>
            <param name="value_Renamed">A _TM1Val containing an integer. The integer is the maximum number of bytes to
            allocate for stored perspectives.
            </param>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE,
            the method call was successful.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.setPerspectiveMaxMemory(System.Int32)">
            <summary> Sets the maximum memory allocated for storing perspectives. </summary>
            <param name="value_Renamed">An integer value indicating the maximum memory to allocate
            for stored perspectives. This value is in bytes.
            </param>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE,
            the method call was successful.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getPerspectiveMinTime">
            <summary> Returns the minimum number of seconds required to calculate a perspective.
            below which the perspective will not be stored. The default value is 5.
            </summary>
            <returns> A _TM1Val containing an integer. The integer indicates the number
            of seconds required to calculate the perspective.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.setPerspectiveMinTime(Applix.TM1.API.Internal._TM1Val)">
            <summary> sets the number of seconds required to calculate a perspective.</summary>
            <param name="seconds">A _TM1Val containing an integer. The integer indicates
            the new value.
            </param>
            <returns> _TM1Val Boolean indicator of success or failure
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.setPerspectiveMinTime(System.Int32)">
            <summary> sets the number of seconds required to calculate a perspective.</summary>
            <param name="seconds">An integer indicating the new value.
            </param>
            <returns> _TM1Val containing a boolean. If the boolean is TRUE, the
            new time has been successfully established.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getDimension(System.Int32)">
            <summary> Takes an index into the TM1CubeDimensions list and returns a dimension
            object.
            </summary>
            <param name="index">An integer offset into the dimension list for the cube
            </param>
            <returns> A _TM1Dimension object handle
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getDimension(System.String)">
            <summary> Takes the name of a dimension and returns a dimension object</summary>
            <param name="name">The name of one of the cube's dimensions
            </param>
            <returns> A _TM1Dimension object
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getView(System.Int32)">
            <summary> Takes an index and returns a handle to one of the cube's views</summary>
            <param name="index">An integer offset into the view list for the cube
            </param>
            <returns> A _TM1View object
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getView(System.String)">
            <summary> Takes a view name and returns a handle to the cube view.</summary>
            <param name="name">The name of a view in the cube
            </param>
            <returns> A _TM1View object
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getPrivateView(System.Int32)">
            <summary> Returns a handle to the private view.</summary>
            <param name="index">An integer offset into the private view list for the cube.
            </param>
            <returns> A _TM1View object handle. This is a handle to a private view.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.getPrivateView(System.String)">
            <summary> Returns a handle to a private view.</summary>
            <param name="name">A string containing the name of the private view in the cube.
            </param>
            <returns> A _TM1View object. This is a handle to a private view in the cube.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.ClearCollections">
             <summary>
             Call ClearAll on any TM1ObjectCollections held by this.
             </summary>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.ClearPrivateViewsCollection">
             <summary>
             Clear all private views in current Cube
             </summary>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Cube.ClearPublicViewsCollection">
             <summary>
             Clear all public views in current Cube
             </summary>
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Applix.TM1.API.Internal._TM1Cube.IsCubePickListExists" -->
        <member name="P:Applix.TM1.API.Internal._TM1Cube.Parent">
             <summary> Returns the TM1 server on which this cube resides.</summary>
             <returns> a _TM1Server object
             </returns>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Cube.Rule">
            <summary> Returns the rule object defined for the cube.</summary>
            <returns> A _TM1Rule object
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Cube.DimensionCount">
            <summary> Returns the number of dimensions in the cube.</summary>
            <returns> A _TM1Val containing an integer. The integer is the number of
            dimensions in the cube.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Cube.ViewCount">
            <summary> Returns the number of named public views defined in the cube.</summary>
            <returns> A _TM1Val containing an integer. The integer indicates the number
            of named views maintained by the cube.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Cube.PrivateViewCount">
            <summary> Returns the number of private views defined in the cube.</summary>
            <returns> A _TM1Val containing an integer. The integer is the number
            of private views maintained by the cube.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Cube.AccessPermission">
             <summary> Check if the user has access permission. </summary>
            <return> bool: true has access permission , false: no </return>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Cube.AdminPermission">
             <summary> Check if the user has administrative permission. </summary>
            <return> bool: true has administrative permission , false: no </return>
        </member>
        <member name="T:Applix.TM1.API.TM1Util">
            <summary> summary description
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1Util.Keyize(System.String)">
            <summary> Transform a string into one that can be compared for equality
            as a TM1 object identifier.
            </summary>
            <remarks> TM1 matches object names without regard to the presence or
            absence of space characters (strictly a space, not generic white-space)
            and ignores case by converting to uppercase. There are no other
            transformations made by TM1 for name equality.
            This method creates a string that cna be compared to another Keyize'd
            string to see if they are the same TM1 identifier.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1Util.pragmaSetupFileLogging">
            <summary> pragma function to programatically setup logging to a file
            named "testfile.log" in the application directory. Use when you need
            basic logging without wanting to create a config file or do any other
            setup.
            </summary>
            <remarks> Date-time stamp is UTC. All messages at all levels are logged.
            Logging is appended to the file; a preexisting file is not erased.
            </remarks>
        </member>
        <member name="T:Applix.TM1.API.INotifier">
            <summary> Notification supplier interface.
            See also <see cref="T:Applix.TM1.API.INotify"/> and <see cref="T:Applix.TM1.API.TM1Notifier"/>.
            </summary>
            <remarks> An object that serves as an event generator exposes this interface.
            Event consumer objects (<i>notifyee</i> objects) register themselves with this
            event source and, when an event occurs, all notifyee's are triggered via their
            INotify.<see cref="M:Applix.TM1.API.INotify.Notify(System.Int32)"/> entry points.
            </remarks>
            <example> See example at <see cref="T:Applix.TM1.API.INotify"/>.
            </example>
        </member>
        <member name="M:Applix.TM1.API.INotifier.Register(Applix.TM1.API.INotify,System.Int32)">
            <summary> Tell notifier that you want to be notified.
            </summary>
            <param name="notifyee"> Your INotify interface. </param>
            <param name="nEvent"> Your definition for this event's type.
            See <see cref="T:Applix.TM1.API.INotify"/> for a discussion of <i>nEvent</i>.
            </param>
        </member>
        <member name="M:Applix.TM1.API.INotifier.Unregister(Applix.TM1.API.INotify,System.Int32)">
            <summary> Tell notifier that you don't want to be notified anymore.
            </summary>
            <param name="notifyee"> Your INotify interface. </param>
            <param name="nEvent"> Your definition for this event's type. <i>nEvent</i>
            must match the parameter with which you registered yourself.
            </param>
        </member>
        <member name="T:Applix.TM1.API.TM1Notifier">
            <summary> Represents a Helper class for an event supplier object.
            </summary>
            <remarks> Implements the <see cref="T:Applix.TM1.API.INotifier"/> interface and provides a
            repository for <see cref="T:Applix.TM1.API.INotify"/> objects to register themselves. The
            owner of this object may notify all event consumers by calling the
            TM1Notifier.<see cref="M:Applix.TM1.API.TM1Notifier.Notify"/> method.
            </remarks>
            <example> See example at <see cref="T:Applix.TM1.API.INotify"/>.
            </example>
        </member>
        <member name="M:Applix.TM1.API.TM1Notifier.Register(Applix.TM1.API.INotify,System.Int32)">
            <summary> Implementation of <see cref="M:Applix.TM1.API.INotifier.Register(Applix.TM1.API.INotify,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1Notifier.Unregister(Applix.TM1.API.INotify,System.Int32)">
            <summary> Implementation of <see cref="M:Applix.TM1.API.INotifier.Unregister(Applix.TM1.API.INotify,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1Notifier.Notify">
            <summary> Notifies all event consumers that have registered themselves.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1MdxView">
            <summary> Represents an MDX view.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1MdxView.GetAxis(System.Int32)">
            <summary>
            Returns the <b>TM1MdxAxis</b> at the specified axis index.
            </summary>
            <param name="axisDex">The 0-based index of the axis.</param>
            <returns>The axis as an <b>TM1MdxAxis</b> object.</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxView.GetTupleCount(System.Int32)">
            <summary>
            Returns the number of tuples on the specified axis.
            For example, for the rows axis, this gives the
            total number of rows of datacells in the view.
            </summary>
            <param name="axisDex">The 0-based index of the axis.</param>
            <returns>The number of tuples on the axis.</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxView.GetDimensionCount(System.Int32)">
            <summary>
            Returns the number of dimensions stacked on the specified axis.
            </summary>
            <param name="axisDex">The 0-based index of the axis.</param>
            <returns>The number of dimensions on the axis.</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxView.GetPropertyCount(System.Int32,System.Int32)">
            <summary>
            Returns the number of member properties included with
            the axis information.
            </summary>
            <param name="axisDex">The 0-based index of the axis</param>
            <param name="dimensionDex">The 0-based index of the
            dimension on the axis.</param>
            <returns>The number of properties.</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxView.GetDimensionName(System.Int32,System.Int32)">
            <summary>
            Returns the dimension name at the specified index on the axis.
            </summary>
            <param name="axisDex">The 0-based index of the axis.</param>
            <param name="dimensionDex">The 0-based index of the
            dimension on the axis.</param>
            <returns>The dimension name.</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxView.GetCellValue(System.Int32,System.Int32)">
            <summary>
            Returns the data cell value at the specified row and column.
            If the view has more non-slicer axes than just rows and columns,
            the higher-order axis coordinates will be assumed as 0.
            Note: the coordinates do not include row or column headers.
            </summary>
            <param name="rowCoord">The 0-based row coordinate.</param>
            <param name="columnCoord">The 0-based column coordinate.</param>
            <returns>The cell value.</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxView.GetCellFormattedValue(System.Int32,System.Int32)">
            <summary>
            Returns the data cell value at the specified row and column.
            If the view has more non-slicer axes than just rows and columns,
            the higher-order axis coordinates will be assumed as 0.
            Note: the coordinates do not include row or column headers.
            </summary>
            <param name="rowCoord">The 0-based row coordinate.</param>
            <param name="columnCoord">The 0-based column coordinate.</param>
            <returns>The cell value.</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxView.GetCellValue(System.Int32[],System.String)">
            <summary>
            Returns the data cell value at the specified axis coordinates.
            </summary>
            <param name="axisCoords">An array of 0-based, non-slicer axis
            coordinates, in the axis order: columns, rows, pages, ...</param>
            <param name="cellProperty">The data cell property whose
            value to retrieve, for example, FORMATTED_VALUE.</param>
            <returns>The data cell value.</returns>
            
        </member>
        <member name="M:Applix.TM1.API.TM1MdxView.Dispose(System.Boolean)">
            <summary>
            Release TM1 server resources underlying this MDXView 
            </summary>
            
        </member>
        <member name="P:Applix.TM1.API.TM1MdxView.Server">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Server"/> associated with this <b>TM1MdxView</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1MdxView.SlicerAxisIndex">
            <summary>
            Gets the 0-based index of the view's slicer axis.
            If the view doesn't have a slicer axis, -1 is returned.
            </summary>
            
        </member>
        <member name="P:Applix.TM1.API.TM1MdxView.ColumnsAxisIndex">
            <summary>
            Gets the 0-based index of the view's column axis (always 0).
            </summary>
            
        </member>
        <member name="P:Applix.TM1.API.TM1MdxView.RowsAxisIndex">
            <summary>
            Gets the 0-based index of the view's row axis.
            If the view doesn't have a row axis, -1 is returned.
            </summary>
            
        </member>
        <member name="P:Applix.TM1.API.TM1MdxView.AxisCount">
            <summary>
            Gets the number of axes in the view, including the slicer.
            </summary>
            
        </member>
        <member name="T:Applix.TM1.API.TM1HostInfo">
            <summary> Holds information about TM1 host servers and their connection
            status.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1HostInfo.#ctor(System.String)">
            <overloads> Creates a named HostInfo object. </overloads>
            <summary> Creates a named but otherwise uninitialized info object.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1HostInfo.#ctor(Applix.TM1.API.TM1HostInfo)">
            <summary> Creates a copy of another info object.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1HostInfo.Name">
            <summary> Gets the TM1 host machine name.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1HostInfo.IPAddress">
            <summary> Gets the host's IP address. Returns <b>null</b> if not found.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1HostInfo.ConnectStatus">
            <summary> Gets the status of the connection attempt.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1HostInfo.InfoString">
            <summary> Gets a string that describes the status of this host and its
            connection. This string is never <b>null</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HostInfo.IPAddressString">
            <summary> Gets the host's IP address.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1HostInfo.HostConnectStatus">
            <summary> List of values that represent the status of a connection to a TM1 host.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1HostInfo.HostConnectStatus.Null">
            <summary> Unitialized.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1HostInfo.HostConnectStatus.Connected">
            <summary> Connect attempted and succeeded.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1HostInfo.HostConnectStatus.ConnectFailure">
            <summary> Connect attempted and failed.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1HostInfo.HostConnectStatus.RepeatAddress">
            <summary> No connect attempted, same address as another host.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1HostInfo.HostConnectStatus.NoAddress">
            <summary> No connect attempted, could not retrieve address.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1DimensionElementFullCollection">
            <summary> Represents a full collection of <see cref="T:Applix.TM1.API.TM1DimensionElement"/> objects.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1DataCell">
            <summary>
            Represents a cell inside a <b>TM1View</b>.<see cref="T:Applix.TM1.API.TM1DataTable"/>.
            </summary>
            
        </member>
        <member name="T:Applix.TM1.API.TM1CellBase">
            <summary> Represents the base class for TM1 cell objects. 
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1CellBase.ToString(System.String,System.IFormatProvider)">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellBase.Value">
            <summary> Gets the raw object value of the cell, which resolves to either a
            string or numeric (i.e., double) value.
            </summary>
            <exception cref="T:Applix.TM1.API.TM1CellValueErrorException"> If there was a previous
            error retrieving the cell value.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1CellBase.StringValue">
            <summary> Null if Numeric. Otherwise a valid string, potentially empty.
            </summary>
            <exception cref="T:Applix.TM1.API.TM1CellValueErrorException"> If there was a previous
            error retrieving the cell value.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1CellBase.NumericValue">
            <summary> Double.NaN if String.
            </summary>
            <exception cref="T:Applix.TM1.API.TM1CellValueErrorException"> If there was a previous
            error retrieving the cell value.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1CellBase.IsError">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellBase.ErrorString">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellBase.Updatable">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellBase.Hold">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellBase.ErrorCode">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellBase.Cube">
            <summary>
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DataCell.SpreadData(System.String)">
            <summary>
            Spreads a value through this cell.
            </summary>
            <param name="controlString">Spreading value</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1DataCell.SpreadData(Applix.TM1.API.TM1Cell,System.String)">
            <summary>
            Spreads a value through this cell.
            </summary>
            <param name="refCell">A reference cell in TM1Cube</param>
            <param name="controlString">Spreading value</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1DataCell.ToString">
            <summary>
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DataCell.SetCellValue(System.Object)">
            <summary>
            Updates the cell identified by iRow and iCol with the new value
            </summary>
            <param name="oVal"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1DataCell.SetCellValue(System.Double)">
            <summary>
            Updates the cell identified by iRow and iCol with the new value
            </summary>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1DataCell.SetCellValue(System.String)">
            <summary>
            Updates the view cell identified by iRow and iCol with the new value
            </summary>
            <param name="sVal"></param>
            <returns></returns>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCell.Cube">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Cube"/> associated with this <b>TM1DataCell</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCell.View">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1View"/> associated with this <b>TM1DataCell</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCell.RowIndex">
            <summary> Gets the row index for this cell.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCell.ColumnIndex">
            <summary> Gets the column index for this cell.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCell.Row">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1DataRow"/> associated with this <b>TM1DataCell</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCell.DataTable">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1DataTable"/> associated with this <b>TM1DataCell</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCell.Value">
            <summary> Gets or sets the cell's value.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCell.NumericValue">
            <summary> Gets or sets the cell's numeric value.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCell.StringValue">
            <summary> Gets or sets the cell's string value.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ChoreStep">
            <summary> Represents the steps for a <see cref="T:Applix.TM1.API.TM1Chore"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1ChoreStep.#ctor(Applix.TM1.API.TM1Chore,Applix.TM1.API.TM1Process)">
            <summary> Creates a new process chore step.
            </summary>
            <param name="chore">TM1Chore the new chore step is to be associated with.</param>
            <param name="process">TM1Process object</param>
        </member>
        <member name="P:Applix.TM1.API.TM1ChoreStep.Chore">
            <summary> Gets the TM1Chore associated with this chore step.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ChoreStep.Process">
            <summary> Gets the TM1Process associated with this chore step.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ValType">
            <summary>This class has the defines for the TM1Value types 
            The _TM1Val.getType method returns one of these values 
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ProcessesCollection">
            <summary>
            Summary description for _TM1ProcessesCollection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EntryBlob">
            <summary>
            Summary description for _TM1EntryBlob.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1DimensionsCollection">
            <summary>
            Summary description for _TM1DimensionsCollection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ChoresCollection">
            <summary>
            Summary description for _TM1ChoresCollection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1SubsetCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1Subset"/> objects owned by a
            <see cref="T:Applix.TM1.API.TM1Dimension"/>.
            </summary>
            <remarks> Obtain this collection from a <see cref="T:Applix.TM1.API.TM1Dimension"/> object.
            The collection typically represents either public or private subsets.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetCollection.Dimension">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Dimension"/> that owns this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetCollection.IsPublic">
            <summary> Returns <b>true</b> if this is a collection of public subsets,
            <b>false</b> if private.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetCollection.Item(System.Int32)">
            <overloads> Gets a <see cref="T:Applix.TM1.API.TM1Subset"/> object. </overloads>
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1Subset"/> object by <i>index</i>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1SubsetCollection.Item(System.String)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1Subset"/> object by <i>name</i>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1MultiDimensionSpec.GetEnumerator">
            <summary> Get an enumerator over <see cref="T:Applix.TM1.API.TM1DimensionSpec"/>
            objects held in this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1MultiDimensionSpec.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1MultiDimensionSpec.GetEnumerator"/>
        </member>
        <member name="P:Applix.TM1.API.TM1MultiDimensionSpec.GUID">
            <summary> Obtain this object's Guid. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1MultiDimensionSpec.PointsImpl.GetEnumerator">
            <summary> Get an enumerator over <see cref="T:Applix.TM1.API.TM1ConstMultiDimensionSpec"/>
            objects held in this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1MultiDimensionSpec.PointsImpl.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1MultiDimensionSpec.PointsImpl.GetEnumerator"/>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.Disconnect">
            <summary> Disconnects the client from the server. This should be the last method
            you call before you end the TM1API program.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.VerifyPassword(System.String)">
            <summary> Verifies the password for the currently connected client.</summary>
            <param name="sPassword">A current password for the client.
            </param>
            <returns> boolean. If the boolean is TRUE, the
            password is correct.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.ChangePassword(System.String)">
            <summary> Changes the password for the currently connected client.</summary>
            <param name="newPassword">A new password for the client.
            </param>
            <returns> boolean. If the boolean is TRUE, the
            password was successfully changed.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.OpenTransactionLog(Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary> Allows you to access the TM1 Server's log information. When you want to
            access log information, you call _TM1Server.openLog to initialize filtering
            for the log information. Then, you call _TM1Server.nextLog to retrieve
            log information. When you have completed examining the TM1 Server's log, you
            call _TM1Server.closeLog.
            </summary>
            <param name="startTime">A string. The string is a
            time stamp in the format YYYYMMDDhhmmss. This time stamp establishes the
            starting time for your retrieved log entries. Entries written to the server
            log before this time are ignored.
            </param>
            <param name="cubeFilter">A string. The string is a
            pattern match for the cube name. For example, '*Sales*' would match any
            log entries generated by transactions against the cubes 'Sales,' 'Sales03'
            and '02SalesQ1.' The string '*' indicates you want to retrieve all transactions
            against all cubes that occur after the start time.
            </param>
            <param name="userFilter">A string. This string is a pattern match
            against the user name in the log entry. For example, 'Bob*' allows transactions
            by users 'Bob,' 'BobSmith,' and 'BobbyJones' to be recorded.
            </param>
            <param name="flagFilter">A string. This filter has not been
            implemented.
            </param>
            <returns> A boolean. If the boolean is TRUE, the logging
            for the TM1 server has been successfully initialized.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.OpenTransactionLog(System.String,System.String,System.String,System.String)">
            <summary> Allows you to access the TM1 Server's log information. When you want to
            access log information, you call _TM1Server.openLog to initialize filtering
            for the log information. Then, you call _TM1Server.nextLog to retrieve
            log information. When you have completed examining the TM1 Server's log, you
            call _TM1Server.closeLog.
            </summary>
            <param name="startTime">This string is a time stanp in the format YYYYMMDDhhmmss.
            This time stamp establishes the starting time for your retrieved log
            entries. Entries written to the server log before this time are ignored.
            </param>
            <param name="cubeFilter">This string is a pattern match for the cube name.
            For example, '*Sales*' would match any log entries generated by
            transactions against the cubes 'Sales,' 'Sales03'
            and '02SalesQ1.' The string '*' indicates you want to retrieve all transactions
            against all cubes that occur after the start time.
            </param>
            <param name="userFilter">This string is a pattern match
            against the user name in the log entry. For example, 'Bob*' allows transactions
            by users 'Bob,' 'BobSmith,' and 'BobbyJones' to be recorded.
            </param>
            <param name="flagFilter">This filter has not been implemented. Set this value to '*'.
            </param>
            <returns> A boolean. If the boolean is TRUE, the logging
            for the TM1 server has been successfully initialized.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.NextLog">
            <summary> Retrieves information from the TM1 server log file. The filtering
            established through the method _TM1Server.openLog is applied. This
            call returns all of the log file information
            </summary>
            <returns> A boolean indicating success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.CloseLog">
            <summary> Terminates this client's access to TM1 Server log information.</summary>
            <returns> A boolean. If the boolean is TRUE, the
            method completed successfully.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.AddClient(System.String)">
            <summary> Adds a new client to the server.</summary>
            <param name="clientName">A string containing the new client name.
            </param>
            <returns> A boolean. If the boolean is TRUE, the
            method completed successfully.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.AddGroup(System.String)">
            <summary> Adds a new group to the server. Groups are used for controlling
            what TM1 objects their members can access.
            </summary>
            <param name="groupName">A string containing the new group name.
            </param>
            <returns> A boolean. If the boolean is TRUE, the
            method completed successfully.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.CreateSubsetByExpression(System.String)">
            <summary>creates a subset object using the tensor expression </summary>
            <param name="expression">expression expression string that creates the subset
            </param>
            <returns> _TM1Subset subset object
            </returns>
            <seealso cref="T:System.String">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Subset">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.CreateViewByExpression(System.String)">
            <summary>creates a view using the MDX expression</summary>
            <param name="expression">An expression that creates the view
            </param>
            <returns> _TM1View the view object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1View">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.createEmptyView">
            <summary> Creates an empty view to be used with MDX expressions</summary>
            <returns> _TM1View the newly created empty view
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1View">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.CreateDimension">
            <summary>creates an empty dimension on the server</summary>
            <returns> _TM1Dimension The dimension object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Dimension">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.CreateCube(Applix.TM1.API.Internal._TM1Val)">
            <summary>creates a cube on the server using the dimensions given</summary>
            <param name="dimArr">Array containing the dimensions
            </param>
            <returns> _TM1Cube the newly created cube object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Cube">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.createBlob(Applix.TM1.API.Internal._TM1Val)">
            <summary>creates a blob on the server w/ the given name</summary>
            <param name="name">name of the blob
            </param>
            <returns> _TM1Blob the newly created blob
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Blob">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.openErrorLog(Applix.TM1.API.Internal._TM1Val)">
            <summary>ServerMessageLogOpen</summary>
            <param name="startTime">startTime
            </param>
            <returns> _TM1Val boolean indicating success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.openErrorLog(System.String)">
            <summary>ServerMessageLogOpen</summary>
            <param name="startTime">startTime
            </param>
            <returns> _TM1Val boolean indicating success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.nextErrorLog">
            <summary>ServerMessageLogNext</summary>
            <returns> _TM1Val boolean indicating success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.closeErrorLog">
            <summary>ServerMessageLogClose</summary>
            <returns> _TM1Val boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.setLogFlagString(Applix.TM1.API.Internal._TM1Val)">
            <summary>ServerLogSetFlagString</summary>
            <param name="flagString">flagString
            </param>
            <returns> _TM1Val boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.setLogFlagString(System.String)">
            <summary>ServerLogSetFlagString</summary>
            <param name="flagString">flagString
            </param>
            <returns> _TM1Val boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.writeLock">
            <summary> WriteLock prevents all other users from accessing the TM1 server.
            This method allows your application to read and write TM1 data exclusively. All other user requests
            are queued until the write lock is released through the method _TM1Server.writeRelease.
            </summary>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE, the server is lock for your exclusive use.
            </returns>
            <seealso cref="M:Applix.TM1.API.Internal._TM1Server.writeRelease">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.writeRelease">
            <summary> WriteRelease releases the lock placed on the TM1 Server by the method _TM1Server.writeLock. All
            user requests that were queued while the server was locked are serviced in the order that they
            arrived.
            </summary>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE, the server is lock for your exclusive use.
            </returns>
            <seealso cref="M:Applix.TM1.API.Internal._TM1Server.writeLock">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getClient(System.Int32)">
            <summary>returns the client object </summary>
            <param name="index">Index into the server's client list
            </param>
            <returns> _TM1Client the client object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Client">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getClient(System.String)">
            <summary>returns the client object </summary>
            <param name="name">name of the  client in the server's client list
            </param>
            <returns> _TM1Client the client object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Client">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getCurrentClient">
            <summary>returns the current client object </summary>
            <returns> _TM1Client the current client object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Client">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getGroup(System.Int32)">
            <summary>returns the group object </summary>
            <param name="index">Index into the server's group list
            </param>
            <returns> _TM1Group the group object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Group">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getGroup(System.String)">
            <summary>returns the group object </summary>
            <param name="name">name of the  group in the server's group list
            </param>
            <returns> _TM1Group the group object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Group">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getConnection(System.Int32)">
            <summary>returns the Connection object </summary>
            <param name="index">Index into the server's Connection list
            </param>
            <returns> _TM1Connection the Connection object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Connection">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getConnection(System.String)">
            <summary>returns the Connection object </summary>
            <param name="name">name of the  Connection in the server's Connection list
            </param>
            <returns> _TM1Connection the Connection object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Connection">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getCube(System.Int32)">
            <summary>returns the Cube object </summary>
            <param name="index">Index into the server's Cube list
            </param>
            <returns> _TM1Cube the Cube object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Cube">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getCube(System.String)">
            <summary>returns the Cube object </summary>
            <param name="name">name of the  Cube in the server's Cube list
            </param>
            <returns> _TM1Cube the Cube object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Cube">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getDimension(System.Int32)">
            <summary>returns the Dimension object </summary>
            <param name="index">Index into the server's Dimension list
            </param>
            <returns> _TM1Dimension the Dimension object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Dimension">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getDimension(System.String)">
            <summary>returns the Dimension object </summary>
            <param name="name">name of the  Dimension in the server's Cube list
            </param>
            <returns> _TM1Dimension the Dimension object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Dimension">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getBlob(System.Int32)">
            <summary>returns the Blob object </summary>
            <param name="index">Index into the server's Blob list
            </param>
            <returns> _TM1Blob the Blob object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Blob">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getBlob(System.String)">
            <summary>returns the Blob object </summary>
            <param name="name">name of the  Blob in the server's Blob list
            </param>
            <returns> _TM1Blob the Blob object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Blob">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.clientIsInAdminGroup">
            <summary>Determine if the client is part of the ADMIN group. If TRUE then
            the client has all the privileges of the ADMIN user.
            </summary>
            <returns> boolean TRUE if client is part of ADMIN group
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getProcess(System.Int32)">
            <summary>returns the Process object </summary>
            <param name="index">Index into the server's Process list
            </param>
            <returns> _TM1Process the Process object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Process">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getProcess(System.String)">
            <summary>returns the Process object </summary>
            <param name="name">name of the Process in the server's Process list
            </param>
            <returns> _TM1Process the Process object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Process">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getChore(System.String)">
            <summary>returns the Chore object </summary>
            <param name="name">name of the Chore in the server's Chore list
            </param>
            <returns> _TM1Chore the Chore object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Chore">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getChore(System.Int32)">
            <summary>returns the Chore object </summary>
            <param name="index">Index into the server's Process list
            </param>
            <returns> _TM1Chore the Chore object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Chore">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.getApplication">
            <summary>returns the EntryFolder object </summary>
            <returns> _TM1EntryFolder the EntryFolder object
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.DataSpread(Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary> Spreads value to a cell based on a reference cell if present.</summary>
            <param name="hArrayOfCells">A _TM1Val containing an array of cells coordinates in a cube.
            [[cubehandle1,elemhandle11,elemhandle12,...],[cubehandle2,elemhandle21,...]]
            </param>
            <param name="hRefCell">A _TM1Val containing reference cell for relative spreading
            </param>
            <param name="ControlString">the value used for spreading, the direction codes in the control string
            is ignored.  It's up to the client to catch the right range of cells and build the hArrayOfCells.
            </param>
            <returns> _TM1Val The new value for the cube cell
            @throws SpreadConsolidationHoldFailed
            @throws SpreadConsolidationRuleFailed
            @throws SpreadFailed_NoUpdatableCell
            @throws SpreadTotalZero
            @throws SpreadBatchUpdateMode
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.CubeCellSpreadStatusGet(Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary> Retrieves spread status for cube cells.</summary>
            <param name="hCells">A _TM1Val array of cube cells i.e.
            [[cubehandle1,elemhandle11,elemhandle12,...],[cubehandle2,elemhandle21,...]]
            or a view handle for cube view.
            </param>
            <param name="hCellRange">a _TM1Val array containing beginning and ending indices of
            a range of cells for cube view, or TM1ValArray null when array of cells is used.
            </param>
            <returns> _TM1Val array containing all spread status of cells.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.IsConnected">
             <summary>
             Return whether there is a connection to the TM1 server.
             </summary>
             <returns></returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.ClearCollections">
             <summary>
             Call ClearAll on any TM1ObjectCollections held by this.
             </summary>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.VersionIsLess(System.String)">
             <summary>
             Return whether the TM1 server's version number is
             less than the passed version string.
             </summary>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.CancelTransaction">
            <summary> Cancels the currently executing transaction. </summary>
            <returns> <b>true</b> on success, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.UserKill">
            <summary> Immediately disconnects this user from the server. </summary>
            <returns> <b>true</b> on success, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.ClientMessage(System.Int32)">
            <returns> <b>true</b> on success, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.CloseSockets">
            <summary> Performs net disconnect. This method is called automatically when you call
            _TM1Server.disconnect.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.deferredRequest(Applix.TM1.API.Internal._TM1Val)">
             <summary>Put this request in the reqList.
             Put the last element, which is the return value element
             into the pendingList, make it a pending type and return
             the index to this message.
            
             </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.packRequestIntoBuffer(Applix.TM1.API.Internal._TM1Val)">
             <summary>args = all the information associated with a request
             args[0] = fn_code
             args[1] = 1st parameter
             ......
             args[n] = nth parameter
            
            
             Format of a request ->
             [0..1]  = fn_code (f.code)
             [2..x] 	= _TM1Val's
            
             The last arr element is the reference to the return value
             and the first array element is the function code
             </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.packValIntoBuffer(Applix.TM1.API.Internal._TM1Val)">
             <summary>Format of a Val on the wire ->
             [0]    = type
             [1..x] = raw value
            
             </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.flushDeferredRequests">
             <summary>Format of a message sent to the _TM1Server
             [0..1] = size of the buffer to follow i.e, 6..x
             [2..5] = checksum
             [6..x] = Requests.
             [x..x+1] = EOR
            
             </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.TM1SystemURLHandleGet(System.String)">
            <summary>returns a object handle from URL definition</summary>
            <param name="URLString">name of the URL string
            </param>
            <returns> object handle
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.ChangeSetEnd">
            <summary>
            TM1ChangeSetEnd returns number of changed cells in server for a given ChangeSetID
            returned by ChangeSetBegin. It will return error only when ChagneSetBegin is not called first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.IsDefaultSandboxEnabled">
            <summary>
            Get default sandbox capability setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.IsAdhocSandboxEnabled">
            <summary>
            Get adhoc sandbox capability setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.GeUserCapabilityFeatures">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.GetSandboxQueueMetrics">
            <summary>
            Get sandbox queuing metrics
            </summary>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.CancelSandboxSubmissionById(System.Int32[])">
            <summary>
            Cancel sandbox submission
            </summary>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.GetSandboxQueueResults">
            <summary>
            returns the last ten queue results for the current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.CancelSandboxSubmissionByNames(System.String,System.String[])">
            <summary>
            Cancel sandbox submission
            </summary>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Server.setClientMessageInfo">
            <summary>
            Sets the client message port number, user secret key, and the user's thread
            ID within the server. This information is necessary to send a client message.
            </summary>
            <returns> <b>true</b> on success, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.SystemProgressHook">
            <summary> Establishes a callback function that sends messages during the execution
            of a long procedure or calculation.
            Value is a _TM1ProgressCallback object.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.GetServerCurrentTime">
            <summary>GetServerCurrentTime</summary>
            <returns> string representing the server's current time
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.clientsCount">
            <summary>This property queries the _TM1Server for the total number of users available </summary>
            <returns> number of users on this server
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.ServerDataDirectory">
            <summary>returns the server's data directory</summary>
            <returns> _TM1Val data directory string
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.GroupsCount">
            <summary>This property queries the _TM1Server for the total number of groups available </summary>
            <returns> number of groups available
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.ReplicationObjectsCount">
            <summary>This property queries _TM1Server for the count of available replication objects. </summary>
            <returns> replication object count
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.CubeCount">
            <summary>This property queries the _TM1Server for a count of available cubes </summary>
            <returns> Number of Cubes available
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.DimensionsCount">
            <summary>This property queries _TM1Server for count of available dimensions </summary>
            <returns> Dimensions count
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.BlobsCount">
            <summary>This property queries _TM1Server for count of available Blob objects </summary>
            <returns> Blobs count
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.ProcessCount">
            <summary>This property queries _TM1Server for a count of available TurboIntegrator Processes </summary>
            <returns> Processes count
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.ChoresCount">
            <summary>This property queries _TM1Server for a count of available Chores Objects. </summary>
            <returns> _TM1Val Chores count
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.Name">
            <summary>
            Returns the name of the server you are connected to.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.ClientName">
            <summary> Returns the name of the client currently connected to the server</summary>
            <returns> A string containing the client name
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.ClientDisplayName">
            <summary> Returns the display name of the client currently connected to the server</summary>
            <returns> A string containing the client display name
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.AllowExcelWebPublish">
             <summary>
             Return whether the TM1 server's allow excel web publish
             or not
             </summary>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.SandboxEnabled">
             <summary>
             Return whether sandbox feature is enabled on server.
             or not
             </summary>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.Password">
            <summary>
            Only stored and used internally.  Never make it public.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.CAMPassport">
            <summary>
            Only stored and used internally.  Never make it public.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Server.CAMNamespace">
            <summary>
            Only stored and used internally.  Never make it public.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            <summary>This class contains methods that are related to a hierarchy members </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1HierarchyMember.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary>_TM1HierarchyMember -&gt; returns a level object</summary>
            <param name="s">a _TM1Server object containing the connection
            </param>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Server">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1HierarchyMember.duplicate">
            <summary>returns a duplicate copy of the hierarchy</summary>
            <returns> _TM1HierarchyMember The handle to the duplicate hierarchy
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1HierarchyMember.register(Applix.TM1.API.Internal._TM1Dimension,System.String)">
            <summary>registers the hierarchy with the server making it available to other clients</summary>
            <param name="parent">the parent object of this hierarchy(_TM1Dimension)
            </param>
            <param name="name">The name of this object
            </param>
            <returns> _TM1HierarchyMember The handle to the newly registered object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1HierarchyMember.getChildMember(System.Int32)">
            <summary>returns the hierarchy member's child object given its index </summary>
            <param name="index">index of the child within the list of children for this member
            </param>
            <returns> _TM1HierarchyMember hierarchy member object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1HierarchyMember.getChildMember(System.String)">
            <summary>returns the hierarchy member's child object given its name</summary>
            <param name="name">name of the child
            </param>
            <returns> _TM1HierarchyMember hierarchy member object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyMember.ObjectParent">
            <summary>return the object parent of the level which is a _TM1Hierarchy</summary>
            <returns> _TM1Hierarchy _TM1Hierarchy object
            </returns>
            <deprecated>
            </deprecated>
            <seealso cref="P:Applix.TM1.API.Internal._TM1HierarchyMember.Parent">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyMember.Parent">
            <summary>return the hierarchy containing the level</summary>
            <returns> _TM1Hierarchy
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Hierarchy">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyMember.Level">
            <summary>return the level this member belongs to</summary>
            <returns> _TM1HierarchyLevel
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyLevel">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyMember.ParentMember_Internal">
            <summary>return the parent member of this member</summary>
            <returns> _TM1HierarchyMember
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyMember.ParentMember">
            <summary>return the parent member of this member</summary>
            <returns> _TM1HierarchyMember
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyMember.UniqueName">
            <summary>return the unique name of this member</summary>
            <returns> _TM1Val
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyMember.Caption">
            <summary>return the caption for the member used for UI</summary>
            <returns> _TM1Val
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyMember.DimensionElement">
            <summary>return the dimension element associated with this hierarchy member</summary>
            <returns> _TM1Element
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Element">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyMember.ChildMemberCount">
            <summary>return the number of child members for this member</summary>
            <returns> _TM1Val
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EntryFolderReference">
            <summary>
            Summary description for _TM1EntryFolderReference.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ServerUserCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1Server"/> objects to which a user has
            logged in.
            </summary>
            <remarks> The collection is an ordered list of <see cref="T:Applix.TM1.API.TM1Server"/>
            objects. New <b>TM1Server</b> objects are added to the end of the collection as
            they are created by <see cref="T:Applix.TM1.API.TM1ServerInfo"/>. Objects may be retrieved
            by index or by name (i.e., user ID).
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerUserCollection.Contains(Applix.TM1.API.TM1Server)">
            <summary> Determines whether the specified <b>TM1Server</b> is in the collection.
            </summary>
            <returns> Returns <b>true</b> if <i>server</i> is found in the collection;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerUserCollection.ContainsName(System.String)">
            <summary> Determines whether a <b>TM1Server</b> with the specified user ID
            is in the collection.
            </summary>
            <param name="strUserID">String value containing the user ID.</param>
            <returns> Returns <b>true</b> if a server with the specified <i>strUserID</i> is
            found in the collection; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerUserCollection.IndexOf(Applix.TM1.API.TM1Server)">
            <summary> Searches for the specified <i>server</i> and returns the
            zero-based index of the first occurrence within the collection.
            </summary>
            <param name="server">A <b>TM1Server</b> object.</param>
            <returns> Returns the zero-based index of the <i>server</i> within the
            collection, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerUserCollection.IndexOfName(System.String)">
            <summary> Searches for a <b>TM1Server</b> with the specified user ID and returns
            the zero-based index of the server within the collection.
            </summary>
            <param name="strUserID">String value containing the user ID.</param>
            <returns> Returns the zero-based index of the first <b>TM1Server</b> with the specified
            <i>strUserID</i> within the collection, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerUserCollection.Remove(Applix.TM1.API.TM1Server)">
            <summary> Remove the specified server, which must be non-null.
            </summary>
            <param name="server"> Non-null server to remove. If server is null or
            is not found in the collection then nothing happens.
            </param>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerUserCollection.Dispose">
            <summary> <b>NOTE:</b> Client code should not call this method.<p/>
            Causes this object to Dispose all of its resources. After calling this
            method, the object is no longer usable. Get more info at
            TM1Object.<see cref="M:Applix.TM1.API.TM1Object.Dispose"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerUserCollection.GetEnumerator">
            <summary> Gets an enumerator over <see cref="T:Applix.TM1.API.TM1Server"/>
            objects held in this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerUserCollection.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1ServerUserCollection.GetEnumerator"/>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerUserCollection.ServerInfo">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1ServerInfo"/> object that owns this
            collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerUserCollection.Count">
            <summary> Gets the number of <b>TM1Server</b> objects held in the collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerUserCollection.Disposed">
            <commentsfrom cref="P:Applix.TM1.API.TM1Object.Disposed"/>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerUserCollection.GUID">
            <summary> Gets this object's Guid. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerUserCollection.Item(System.Int32)">
            <overloads> Gets a <see cref="T:Applix.TM1.API.TM1Server"/> object. </overloads>
            <summary> Gets a <b>TM1Server</b> by <i>index</i>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerUserCollection.Item(System.String)">
            <summary> Gets a <b>TM1Server</b> object by user ID.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1HeaderCellCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1HeaderCell"/> objects.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1HeaderCellCollection.#ctor(Applix.TM1.API.TM1HeaderRow,System.Boolean)">
            <summary> Constructs a <b>TM1HeaderCellCollection</b> object.
            
            </summary>
            <param name="headerRow"> The <b>TM1HeaderRow</b> to which the collection belongs.</param>
            <param name="bRowHeader"> Value indicating whether this is a Row Header.</param>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCellCollection.Item(System.Int32)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1HeaderCell"/> object from the collection by index.
            </summary>
            <param name="index">Index of the <b>TM1HeaderCell</b>.</param>
            <returns></returns>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCellCollection.View">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1View"/> object associated with this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCellCollection.Row">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1HeaderRow"/> object associated with this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderCellCollection.HeaderTable">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1HeaderTable"/> object associated with this collection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1SubsetsCollection">
            <summary>
            Summary description for _TM1SubsetsCollection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Rule">
            <summary>This class contains the methods for manipulating the TM1 Cube rules</summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Rule.duplicate">
            <summary>returns a duplicate copy of the rule</summary>
            <returns> _TM1Rule The handle to the duplicate rule 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Rule.getLine(Applix.TM1.API.Internal._TM1Val)">
            <summary>returns a line from the cube rule</summary>
            <param name="lineNum">Line number in the rule
            </param>
            <returns> _TM1Val rule String 
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Rule.insertLine(Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary>inserts a line into the cube rule</summary>
            <param name="lineNum">Line number to insert at
            </param>
            <param name="lineStr">rule line to insert
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Rule.insertLine(System.Int32,System.String)">
            <summary>inserts a line into the cube rule</summary>
            <param name="lineNum">Line number to insert at
            </param>
            <param name="lineStr">rule line to insert
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Rule.check">
            <summary>checks the rule for consistency</summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Rule.attach">
            <summary>attaches this rule to the parent cube</summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Rule.detach">
            <summary>detaches this rule from the parent cube</summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Rule.Parent">
            <summary>return the object parent of the rule which is a _TM1Cube</summary>
            <returns> _TM1Cube The parent _TM1Cube object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Cube">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Rule.ErrorLine">
            <summary>returns the line number in the cube rule that is in error</summary>
            <returns> _TM1Val line number where error exists
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Rule.ErrorString">
            <summary>returns the error message that explains the error in rule</summary>
            <returns> _TM1Val error message string
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Rule.NumberOfLines">
            <summary>returns the number of lines in the cube rule</summary>
            <returns> _TM1Val number of lines
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EntryDimension">
            <summary>
            Summary description for _TM1EntryDimension.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Dimension">
            <summary> This class contains the methods that create, modify and delete TM1 dimensions.
            In TM1, a dimension is a child of a server object. You can retrieve a dimension
            handle from the _TM1Server by calling the _TM1Server.getDimension method.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary> Creates a dimension object and returns a handle to the empty dimension.</summary>
            <param name="s">A _TM1Server object that has a valid session with the TM1
            server.
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.loadFile">
            <summary> Reads the file corresponding to this dimension. When you save TM1 data
            to the hard disk, dimensions are written to files with a .dim extension.
            This method reads the .dim file from the disk, and returns a handle
            to the dimension.
            </summary>
            <returns> A _TM1Dimension object handle 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.deleteFile">
            <summary> Deletes the file of this dimension from the hard disk. The TM1 server
            writes dimensions to the hard disk. Dimension files have a .dim extension.
            </summary>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE, the file 
            has been successfully deleted. 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.insertElement(Applix.TM1.API.Internal._TM1Element,System.String,System.Int32)">
            <summary> Inserts an element into a dimension. </summary>
            <param name="insertBefore">A handle to the element before which the 
            new element is inserted.
            </param>
            <param name="name">A string containing the name of the new element.
            </param>
            <param name="elemType">A _TM1ObjectType value. This can be one of the following
            _TM1ObjectType class fields: _TM1ObjectType.ElementSimple, 
            _TM1ObjectType.ElementConsolidated, _TM1ObjectType.ElementString.
            </param>
            <returns> A _TM1Element handle. This is the handle to the newly inserted element.
            @throws DimensionElementAlreadyExists
            @throws ObjectIsRegistered
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.insertElement(Applix.TM1.API.Internal._TM1Element,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary> Inserts an element into a dimension. </summary>
            <param name="insertBefore">A handle to the element before which the 
            new element is inserted.
            </param>
            <param name="name">A _TM1Val containing a string. The string is the name of the new element.
            </param>
            <param name="type">A _TM1Val containing a _TM1ObjectType value. This can be one of 
            the following _TM1ObjectType class fields: _TM1ObjectType.ElementSimple, 
            _TM1ObjectType.ElementConsolidated, _TM1ObjectType.ElementString.
            </param>
            <returns> A _TM1Element handle. This is the handle to the newly inserted element.
            @throws DimensionElementAlreadyExists
            @throws ObjectIsRegistered
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.deleteElement(Applix.TM1.API.Internal._TM1Element)">
            <summary> Deletes an element from a dimension.</summary>
            <param name="element">A handle to an element in the dimension
            @throws ObjectIsRegistered
            @throws DimensionElementDoesNotExist
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.check">
            <summary> Checks the dimension for consistency. You should call this method
            whenever you make a structural change to the dimension, and before 
            you call _TM1Dimension.register.
            </summary>
            <returns> A _TM1Val containing a boolean. If the boolean is TRUE, 
            the dimension is consistent. 
            @throws DimensionHasCircularReferences
            @throws DimensionHasNoElements
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.updateDimension(Applix.TM1.API.Internal._TM1Dimension)">
            <summary> Replaces a registered dimension with a new one and updates all associated cubes.</summary>
            <param name="newDimension">A handle to the new dimension that replaces the old one.
            </param>
            <returns> A _TM1Dimension object handle
            @throws ObjectIsUnregistered
            @throws DimensionNotChecked
            @throws ObjectSecurityNoAdminRights
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.register(Applix.TM1.API.Internal._TM1Server,System.String)">
            <summary> Registers the dimension with the server making it available to other clients.</summary>
            <param name="parent">The TM1 server on which this dimension resides.
            </param>
            <param name="name">A string containing the name of this dimension.
            </param>
            <returns> _TM1Dimension The handle to the newly registered dimension.
            @throws ObjectIsRegistered
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.duplicate">
            <summary> Returns a duplicate copy of the dimension. The copy can be used to 
            create a new dimension. For example, if you immediately register the duplicate dimension 
            with a unique name, you will have two dimensions with the same elements. 
            </summary>
            <returns> A _TM1Dimension handle to the duplicate dimension.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.createSubset">
            <summary> Creates an empty subset object. You can add elements to the empty
            subset by calling _TM1Subset.addElement.
            </summary>
            <returns> A _TM1Subset handle. 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.createEmptySubset">
            <summary> Creates an empty subset object. You can add elements to the empty
            subset by calling _TM1Subset.addElement.
            This call does not resolve to tm1 server by checking for error.
            </summary>
            <returns> A _TM1Subset handle. 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.getElement(System.Int32)">
            <summary> Takes an index into the dimension's element list and returns an 
            element handle. 
            </summary>
            <param name="index">is an integer. This integer is an index into the dimension's 
            element list.
            </param>
            <returns> A _TM1Element handle.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.getElement(System.String)">
            <summary> Takes the name of an element in the current dimension and returns a 
            handle to it. 
            </summary>
            <param name="name">A string containing the name of an element in the dimension.
            </param>
            <returns> A _TM1Element handle
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.getSubset(System.Int32)">
            <summary> Takes an index into dimension's subset list, and returns a subset
            handle.
            </summary>
            <param name="index">This integer is an index into the dimension's subset list.
            </param>
            <returns> A _TM1Subset handle
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.getSubset(System.String)">
            <summary> Takes the string name of a subset and returns a subset handle.</summary>
            <param name="name">A string containing the name of the subset
            </param>
            <returns> A _TM1Subset handle
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.getPrivateSubset(System.Int32)">
            <summary> Takes an index into dimension's private subset list. Returns a private 
            subset handle. 
            </summary>
            <param name="index">An integer index into the dimension's private subset list.
            </param>
            <returns> A _TM1Subset handle. 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.getPrivateSubset(System.String)">
            <summary> Takes a name and returns a handle to a private subset. </summary>
            <param name="name">The name of a private subset in the current dimension.
            </param>
            <returns> A _TM1Subset handle. This is the handle to a private subset.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.getDimensionCubesUsing(System.Int32)">
            <summary> Returns a cube handle given its index into dimension's CubesUsing list</summary>
            <param name="index">An integer. This integer is an index into the dimension's CubesUsing list.
            </param>
            <returns> A _TM1Cube handle. 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.getDimensionCubesUsing(System.String)">
            <summary> Returns a cube handle given its name.</summary>
            <param name="name">A string containing the name of a cube. This cube must be
            present in the CubesUsing list for this dimension.
            </param>
            <returns> A _TM1Cube handle
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.RefreshPrivateSubsetList">
            <summary>
            Reset cache state for the private subset list,
            so that next list access will trigger reinitialization.
            This is a specialized function for use when the set of
            private subsets changes.
            </summary>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.RefreshPublicSubsetList">
            <summary>
            Reset cache state for the public subset list,
            so that next list access will trigger reinitialization.
            This is a specialized function for use when the set of
            public subsets changes.
            </summary>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Dimension.ClearCollections">
            <summary>
            Call ClearAll on any TM1ObjectCollections held by this.
            </summary>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Dimension.ObjectParent">
            <summary> Returns the object parent of the dimension. The parent of a dimension
            is always the TM1 server.
            </summary>
            <returns> A _TM1Server object.         
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Dimension.Parent">
            <summary> Returns the object parent of the dimension. The parent of a dimension
            is always the TM1 server.
            </summary>
            <returns> A _TM1Server object.         
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Dimension.Width_old">
            <summary> Returns the width (in characters) of the widest element in the dimension. </summary>
            <returns> _TM1Val character width of widest element.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Dimension.TopElement_old">
            <summary> Returns a handle to the top-level consolidated element in the dimension.</summary>
            <returns> A _TM1Element handle
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Dimension.NumberOfLevels_old">
            <summary> Returns the number of levels in the dimension
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Dimension.ElementCount_internal">
            <summary> Returns the number of elements in the dimension.</summary>
            <returns> A _TM1Val containing an integer. This is the number of elements 
            in the dimension.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Dimension.SubsetCount">
            <summary> Returns the number of public subsets in the dimension.</summary>
            <returns> A _TM1Val containing an integer. The integer is the number of public subsets
            in this dimension.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Dimension.PrivateSubsetCount">
            <summary> Returns the number of private subsets in the dimension.</summary>
            <returns> A _TM1Val containing an integer. The integer indicates the 
            number of private subsets the dimension contains.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Dimension.CubesUsingCount">
            <summary> Returns the number of cubes using this dimension. Dimensions can be used 
            in more than one cube. This method returns the number of cubes on the current server
            that are using this dimension.
            </summary>
            <returns> A _TM1Val containing an integer. This integer is that number of 
            cubes on the current server that are using this dimension.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Dimension.RootElements">
            <summary> Retrieve an array of the <see cref="T:Applix.TM1.API.Internal._TM1Element"/> objects
            that are at the root level of the dimension; i.e., have no parents.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1AttributesCollection">
            <summary>
            Summary description for _TM1AttributesCollection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ApiDotNetException">
            <summary>
            Summary description for _TM1ApiDotNetException.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ServerInfo">
            <summary> Holds information about a TM1 database server. Use this object's
            <see cref="M:Applix.TM1.API.TM1ServerInfo.Login(System.String,System.String)"/> method to obtain a <see cref="T:Applix.TM1.API.TM1Server"/> to access the
            resources of a TM1 database.
            </summary>
            <remarks> Think of this object like a template that holds information about
            a TM1 database server and allows instantiation of <see cref="T:Applix.TM1.API.TM1Server"/>
            objects to access a server. However, this object does not itself provide
            access to a server.<p/>
            <p/>
            Obtain one of these TM1ServerInfo objects via
            TM1AdminServer.<see cref="P:Applix.TM1.API.TM1AdminServer.Servers"/>.
            See <see cref="T:Applix.TM1.API.TM1AdminServer"/> for example code.<p/>
            <p/>
            Once you have a TM1ServerInfo object, obtain a <see cref="T:Applix.TM1.API.TM1Server"/> by
            providing a user ID and password in order to <see cref="M:Applix.TM1.API.TM1ServerInfo.Login(System.String,System.String)"/> to the
            database server.<p/>
            <p/>
            The <see cref="P:Applix.TM1.API.TM1ServerInfo.Users"/> collection contains all the logged-in servers.
            </remarks>
            <example>
            <summary>
            The following code example shows ...<p/>
            <p/>
            <b>NOTE:</b> For a complete example of logging into a <b>TM1Server</b>,
            see <see cref="T:Applix.TM1.API.TM1AdminServer"/>.<p/>
            </summary>
            <code lang="c#">
            </code>
            </example>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerInfo.#ctor(Applix.TM1.API.Internal._AdmFileInfo,Applix.TM1.API.TM1AdminServer)">
            <summary> Construct a TM1ServerInfo object.
            </summary>
            <param name="admInfo">Server info obtained from _TM1Main</param>
            <param name="AdminServer">TM1AdminServer that owns this server object</param>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerInfo.Login(System.String,System.String)">
            <summary> Logs into the <see cref="T:Applix.TM1.API.TM1Server"/> database server.
            </summary>
            <param name="strUserID"> User ID for logging-in to database server.
            </param>
            <param name="strPassword"> Password for logging-in.
            </param>
            <returns> A <see cref="T:Applix.TM1.API.TM1Server"/> object that provides access to the
            resources of the database. If the login attempt is unsuccessful then
            <b>null</b> is returned.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerInfo.GetCAMLoginEnabled(System.String)">
            <summary> Retrieves CAM Login Enabled Flag <b>TM1Server</b>. Used to determine 
            if CAM should be used.
            </summary>
            <param name="serverName"> Server name.
            </param>
            <returns> true if CAM login is required
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerInfo.LoginUsingCAMNamespace(System.String,System.String,System.String)">
            <summary> Logs into the <see cref="T:Applix.TM1.API.TM1Server"/> database server using a CAM namespace.
            </summary>
            <param name="nameSpace"> CAM namespace.
            </param>
            <param name="strUserID"> User ID for logging-in to CAM server.
            </param>
            <param name="strPassword"> Password for logging-in.
            </param>
            <returns> A <see cref="T:Applix.TM1.API.TM1Server"/> object that provides access to the
            resources of the database. If the login attempt is unsuccessful then
            <b>null</b> is returned.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerInfo.LoginUsingCAMPassport(System.String)">
            <summary> Logs into the <see cref="T:Applix.TM1.API.TM1Server"/> database server using a CAM passport.
            </summary>
            <param name="strPassport"> CAM passport.
            </param>
            <returns> A <see cref="T:Applix.TM1.API.TM1Server"/> object that provides access to the
            resources of the database. If the login attempt is unsuccessful then
            <b>null</b> is returned.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerInfo.LogoutAll">
            <summary> Logs out all users from this <see cref="T:Applix.TM1.API.TM1Server"/> database server. I.e., Logout all
            in the <see cref="P:Applix.TM1.API.TM1ServerInfo.Users"/> collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerInfo.Name">
            <summary> Gets the name of the <b>TM1Server</b> object. This property is not settable.
            </summary>
            <exception cref="T:System.NotSupportedException"> If an attempt is made to set
            the name.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerInfo.HostName">
            <summary> Gets the name of host machine for this <b>TM1Server</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerInfo.HostAddress">
            <summary> Gets the IP address of the host machine for this <b>TM1Server</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerInfo.AdminServer">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1AdminServer"/> that owns this server
            object.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerInfo.IsSystemObject">
            <commentsfrom cref="P:Applix.TM1.API.TM1Server.IsSystemObject"/>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerInfo.Users">
            <summary> Gets a collection of logged-in servers for this database.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ProcessCollection">
             <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1Process"/> objects in the <b>TM1Server</b>.
             </summary>
             <remarks> The exact contents of the returned collection depends on the
             security privleges of the current user for this <b>TM1Server</b>.
             </remarks>
             <example>
             <summary>
             After logging into a <b>TM1Server</b>, use the <see cref="P:Applix.TM1.API.TM1Server.Processes"/>
             property to retrieve a <b>TM1ProcessCollection</b>, as shown in the following code example.<p/>
             <p/>
             <b>NOTE:</b> For a complete example of logging into a <b>TM1Server</b>,
             see <see cref="T:Applix.TM1.API.TM1AdminServer"/>.<p/>
             </summary>
             <code lang="c#">
             // Retrieve a process collection
             TM1ProcessCollection myProcesses = aServer.Processes;
            
             // Print total number of processes in collection
             Console.WriteLine("Number of processes = " + myProcesses.Count);
            
             // Print list of process names
             foreach (TM1Process aProcess in myProcesses)
             {
             	Console.WriteLine(aProcess.Name);
             }
             </code>
             </example>
        </member>
        <member name="M:Applix.TM1.API.TM1ProcessCollection.Add(Applix.TM1.API.TM1Process)">
            <summary> placeholder method definition
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1ProcessCollection.Add(System.String,Applix.TM1.API.TM1Process)">
            <summary> placeholder method definition
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ProcessCollection.Server">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Server"/> that owns this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ProcessCollection.Item(System.Int32)">
            <overloads> Gets a <see cref="T:Applix.TM1.API.TM1Process"/> object from the collection. </overloads>
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1Process"/> object by <i>index</i>.
            See remarks for <see cref="P:Applix.TM1.API.TM1CubeCollection.Item(System.Int32)"/>(int).
            </summary>
            <example>
            <code lang="c#">
            	// Get process by index
            	TM1Process process = server.Processes[42];
            </code>
            </example>
        </member>
        <member name="P:Applix.TM1.API.TM1ProcessCollection.Item(System.String)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1Process"/> object by <i>name</i>.
            See remarks for <see cref="P:Applix.TM1.API.TM1CubeCollection.Item(System.String)"/>(string).
            </summary>
            <example>
            <code lang="c#">
            	// Get process by name
            	TM1Process process = server.Processes["Deep Thought"];
            </code>
            </example>
        </member>
        <member name="T:Applix.TM1.API.TM1HeaderTable">
            <summary> Represents a header, which is the column or row dimensions in a <b>TM1View</b>.
            </summary>
            <remarks> Obtain the <see cref="P:Applix.TM1.API.TM1HeaderTable.Rows"/> collection to get a collection of
            <see cref="T:Applix.TM1.API.TM1HeaderRow"/> objects, from which you can then obtain individual
            <see cref="T:Applix.TM1.API.TM1HeaderCell"/> objects for each dimension in the view.<p/>
            <p/>
            There are as many rows in the Rows collection as in the view. And each row
            has as many cells as there are columns in the view.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderTable.View">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1View"/> that owns this table.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderTable.Rows">
            <summary> Gets the collection of rows in this TM1HeaderTable.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderTable.Item(System.Int32)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1HeaderRow"/> object by index from this <b>TM1HeaderTable</b>.
            </summary>
            <param name="nIndex">Index of the <b>TM1HeaderRow</b>.</param>
            <returns></returns>
        </member>
        <member name="T:Applix.TM1.API.TM1DimensionElement">
            <summary> Represents an element in a dimension. See <see cref="T:Applix.TM1.API.TM1Dimension"/> and
            <see cref="T:Applix.TM1.API.TM1DimensionElementCollection"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionElement.Equals(System.Object)">
            <summary> Returns <b>true</b> if the specified <b>TM1DimensionElement</b> objects are equal.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionElement.Equals(Applix.TM1.API.TM1DimensionElement)">
            <summary> Returns <b>true</b> if the specified <b>TM1DimensionElement</b> objects are equal.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionElement.GetHashCode">
            <summary> summary description
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionElement.GetWeight(System.Int32)">
            <summary> Gets the TM1 weight value for the specified element by index.
            </summary>
            <param name="nParentIndex">Index of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionElement.GetWeight(Applix.TM1.API.TM1DimensionConsolidatedElement)">
            <summary> Gets the TM1 weight value for the specified element object.
            </summary>
            <param name="parent"><b>TM1DimensionConsolidatedElement</b> object.</param>
            <returns></returns>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElement.Name">
            <summary> Gets the name of the <b>DimensionElement</b> object. This property is not settable.
            </summary>
            <exception cref="T:System.NotSupportedException"> If an attempt is made to set
            the name.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElement.Dimension">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Dimension"/> object to which this element belongs.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElement.Type">
            <summary> Gets the type of this element based from the enumeration <see cref="T:Applix.TM1.API.TM1DimensionElement.TypeEnum"/>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElement.Attributes">
            <summary> Gets the collection of attributes for this element
            as a <see cref="T:Applix.TM1.API.TM1AttributeValueCollection"/> object.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElement.Level">
            <summary> Gets the TM1 level of this element.
            </summary>
            <remarks> <b>NOTE:</b> This level property may not be what most users
            expect since it counts from the deepest node as level 0 then increases
            going from child to parent. This makes for some non-intuitive
            scenarios: E.g., a node that has no children and no parents, thus
            implicitly a direct child of the <see cref="T:Applix.TM1.API.TM1Dimension"/>, is (1) at
            the same level (i.e., level 0) as a childless node that is deep in the
            hierarchy; and (2) a peer to nodes that have no parent but are
            themselves parents and grand-parents and thus have different levels
            (i.e., level 1, 2, and higher).
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElement.Weight">
            <summary> Gets the TM1 weight value for this element.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElement.OwnerCollection">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1DimensionElementCollection"/> for this <b>TM1DimensionElement</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElement.IsConsolidated">
            <summary> Returns <b>false</b> if this <b>TM1DimensionElement</b> is a simple element with no children,
            <b>true</b> if this element is a consolidated element that may have children.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElement.Children">
            <summary> Gets the colection of children elements for this element.
            Returns null if this is a simple element with no children.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElement.HasParents">
            <summary> Returns <b>true</b> if this is a child element of 1 or more parent
            elements.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionElement.Parents">
            <summary> Gets a collection of elements representing the parent elements for this element.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1DimensionElement.TypeEnum">
            <summary> Each <see cref="T:Applix.TM1.API.TM1DimensionElement"/> object and each
            <see cref="T:Applix.TM1.API.TM1SubsetElement"/> object is of a type given by this enum.
            These types represent the underlying TM1 data type.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1Cube">
             <summary> Represents a cube object in a <b>TM1Server</b>.
             </summary>
             <remarks>Obtain a <b>TM1Cube</b> object from <see cref="P:Applix.TM1.API.TM1Server.Cubes"/>.
             </remarks>
             <example>
             <summary>
             The following code example shows how to retrieve a <b>TM1Cube</b> object
             by index and by name.<p/>
             <p/>
             <b>NOTE:</b> For a complete example of logging into a <b>TM1Server</b>,
             see <see cref="T:Applix.TM1.API.TM1AdminServer"/>.<p/>
             </summary>
             <code lang="c#">
             // Retrieve a cube collection
             TM1CubeCollection myCubes = aServer.Cubes;
            
             // Retrieve a cube by index
             TM1Cube ReportCube = myCubes[4];
            
             // Retrieve a cube by name
             TM1Cube BudgetCube = myCubes["plan_BudgetPlan"];
             </code>
             </example>
        </member>
        <member name="M:Applix.TM1.API.TM1Cube.#ctor(Applix.TM1.API.Internal._TM1Cube,Applix.TM1.API.TM1Server)">
            <summary> Constructs a TM1Cube object from an internal cube object.
            </summary>
            <param name="cube">internal cube</param>
            <param name="server">TM1 Server Object</param>
        </member>
        <member name="P:Applix.TM1.API.TM1Cube.Name">
            <summary> Gets the name of the <b>TM1Cube</b> object. This property is not settable.
            </summary>
            <exception cref="T:System.NotSupportedException"> If an attempt is made to set
            the name.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1Cube.Server">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Server"/> that owns this object.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Cube.PublicViews">
            <summary> Gets the collection of public <see cref="T:Applix.TM1.API.TM1View"/> objects for
            this <b>TM1Cube</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Cube.PrivateViews">
            <summary> Gets the collection of private <see cref="T:Applix.TM1.API.TM1View"/> objects for
            this <b>TM1Cube</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Cube.Dimensions">
            <summary> Gets the collection of dimensions that make up this <b>TM1Cube</b>.
            See <see cref="T:Applix.TM1.API.TM1Dimension"/>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Cube.Cells">
            <summary> Gets the collection of <see cref="T:Applix.TM1.API.TM1Cell"/> objects that are
            contained in this <b>TM1Cube</b>.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1CubeCellCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1Cell"/> objects owned by a
            <see cref="T:Applix.TM1.API.TM1Cube"/>.
            </summary>
            <remarks> Obtain this collection using <see cref="P:Applix.TM1.API.TM1Cube.Cells"/>.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1CubeCellCollection.Cube">
            <summary> Gets The <see cref="T:Applix.TM1.API.TM1Cube"/> that owns this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CubeCellCollection.Item(System.String[])">
            <overloads>Retrieves a cell by specifying dimension elements.</overloads>
            <summary> Retrieves a cell via list of dimension element names.
            </summary>
            <param name="selections"> Ordered list of dimension element names that
            maps to a single cell in the cube. 
            </param>
            <returns> The cell indicated by the names in the <i>selections</i> list.
            </returns>
            <remarks> The <i>selections</i> parameter is an array of names for
            dimension elements in the order of the dimensions that define the cube.
            There must be one name in the list for each dimension.<p/>
            <p/>
            <p>For example,
            given a cube with 4 dimensions Country, Month, Color, and Model, you
            would retrieve a specific cube as follows:<code>
            	TM1Cell cell = cube.Cells[new string[]{"USA","January","Green","Truck"}];
            </code></p>
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1CubeCellCollection.Item(Applix.TM1.API.TM1DimensionSpec[])">
            <summary> Retrieves a cell via list of dimension element specifications.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Applix.TM1.API.TM1CellCollection">
            <summary> Represents an arbitrary (user-defined) collection of <b>TM1Cell</b> objects. 
            </summary>
            <remarks> Cells and other collections (TM1CellRange, TM1CellCollection) may
            be added to this collection. The cells within this collection need not all
            belong to the same cube. And this collection may hold multiple instances of
            the same cell.
            <para> Cells are ordered in the same order as they were added to the
            collection.
            </para>
            </remarks>
        </member>
        <member name="T:Applix.TM1.API.ICollectableCell">
            <summary> Interface exposed by objects that may be collected into a cell
            collection; these include TM1Cell, TM1Range and TM1CellCollection.
            </summary>
            <remarks> Note that a cell collection may hold both individual cells or
            aggregate objects such as other cell collections.<p/>
            <p/>
            Each cell or aggregate may be refreshed thereby causing the value of the
            object or objects to be set to their current value on the TM1 server.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.ICollectableCell.GetEnumerator">
            <summary> Gets an enumerator over the <see cref="T:Applix.TM1.API.TM1Cell"/>
            objects held in this collection.
            </summary>
            <remarks> For a cell object, merely iterates once. For aggregates,
            iterates over all cells including sub-aggregates.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.ICollectableCell.Refresh">
            <summary> Refreshes the values held in all cell objects. If an aggregate
            then all cells are refreshed. 
            </summary>
        </member>
        <member name="P:Applix.TM1.API.ICollectableCell.CellCount">
            <summary> Gets the number of cells. For a cell object, 1. For an aggregate
            object, the total number including those held in any sub-aggregates.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.ICollectableCell.Item(System.Int32)">
            <summary> Retrieves the cell at offset <paramref name="nIndex"/>.
            </summary>
            <remarks> For a cell, <i>nIndex</i> must == 0.  For aggregates, the
            meaning of <i>nIndex</i> is determined by the particular aggregate's
            ordering scheme.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1CellCollection.#ctor">
            <summary> Creates an empty collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1CellCollection.Refresh">
            <summary> Refreshes all cells in this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1CellCollection.Add(Applix.TM1.API.TM1Cell)">
            <summary> Adds the cell to the end of the collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1CellCollection.Add(Applix.TM1.API.ICollectableCell)">
            <summary> Adds the object with the ICollectableCell interface to the end
            of the collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1CellCollection.AddCells(Applix.TM1.API.ICollectableCell)">
            <summary> Iterates through all the cells in the ICollectableCell object and
            adds them to the current collection.  I.e., the ICollectableCell object
            is not itself added to this collection; all the cells behind the
            interface are added to this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1CellCollection.SpreadData(System.String)">
            <summary>
            Spreads a value among all cells in the colleciton.
            </summary>
            <param name="controlString">Spreading value</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1CellCollection.Applix#TM1#API#ICollectableCell#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1CellCollection.GetEnumerator"/>
        </member>
        <member name="M:Applix.TM1.API.TM1CellCollection.GetEnumerator">
            <summary> Gets an enumerator over <see cref="T:Applix.TM1.API.TM1Cell"/>
            objects held in this collection.
            </summary>
            <remarks> Iterates over <see cref="T:Applix.TM1.API.TM1Cell"/> objects held directly in
            this collection and, when a sub-collection is found (another
            <see cref="T:Applix.TM1.API.TM1CellCollection"/>, or a <see cref="T:Applix.TM1.API.TM1CellRange"/>) then
            recursivly descend into those collections and iterate all cells held
            within them.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1CellCollection.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1CellCollection.GetEnumerator"/>
        </member>
        <member name="P:Applix.TM1.API.TM1CellCollection.CellCount">
            <summary> Gets the total number of cells held in this collection and all
            sub-collections.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellCollection.GUID">
            <summary> Gets this object's Guid. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1CellCollection.Item(System.Int32)">
            <summary> Retrieves the cell at offset <paramref name="nIndex"/>
            </summary>
            <param name="nIndex"> Offset of the cell to retrieve.
            </param>
        </member>
        <member name="T:Applix.TM1.API.TM1CellCollection.CollectableImpl">
            <summary> Provides an enumerator over objects held in a <b>TM1CellCollection</b>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1CellCollection.CollectableImpl.GetEnumerator">
            <summary> Gets an enumerator over <see cref="T:Applix.TM1.API.ICollectableCell"/>
            objects held in the owning <see cref="T:Applix.TM1.API.TM1CellCollection"/>.
            </summary>
            <remarks> The standard TM1CellCollection.<see cref="M:Applix.TM1.API.TM1CellCollection.GetEnumerator"/>
            method returns an iterator over all <see cref="T:Applix.TM1.API.TM1Cell"/> objects held
            in the collection, including all those held in sub-collections. In
            contrast, this enumerator returns <see cref="T:Applix.TM1.API.ICollectableCell"/> objects
            that are directly held in this collection and does not recurse into
            the ICollectableCell if it is a sub-collection.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1CellCollection.CollectableImpl.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1CellCollection.CollectableImpl.GetEnumerator"/>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1SubsetElementsCollection">
            <summary>
            Summary description for _TM1SubsetElementsCollection.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Subset">
            <summary>This class contains methods related to TM1 Subset </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.All">
            <summary>Implements SubsetAll on the current empty subset which fills the subset with
            all the elements in the dimension
            </summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.duplicate">
            <summary>returns a copy of the subset which can be used to create
            a new subset
            </summary>
            <returns> _TM1Subset The handle to the duplicate subset
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.insertSubset(Applix.TM1.API.Internal._TM1Subset,System.Int32)">
            <summary>Inserts the given subset into the current subset at the specified position</summary>
            <param name="subset">The subset object to be inserted
            </param>
            <param name="position">Location of insertion of new subset
            </param>
            <returns> boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.insertElement(Applix.TM1.API.Internal._TM1Element,System.Int32)">
            <summary>Inserts an element into the current subset at the positon specified</summary>
            <param name="element">Handle to the element to be inserted
            </param>
            <param name="position">Insertion point
            </param>
            <returns> Boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.addElement(Applix.TM1.API.Internal._TM1Element)">
            <summary>
            Append an element into the current subset at the end. The call does not resolve to
            tm1 server.
            </summary>
            <param name="element">Handle to the element to be inserted
            </param>
            <returns> _TM1Val of Boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.validateForRegistration">
             <summary>
             Validate the subset prior to registration.
             </summary>
             <returns>A true boolean _TM1Val if validation passed, or an error _TM1Val on failure.</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.register(Applix.TM1.API.Internal._TM1Dimension,System.String)">
            <summary>registers the Subset with the server making it available to other clients</summary>
            <param name="parent">The parent object of this Subset(_TM1Dimension)
            </param>
            <param name="name">The name of this object
            </param>
            <returns> _TM1Subset, The handle to the newly registered object
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.registerPrivate(Applix.TM1.API.Internal._TM1Dimension,System.String,System.Boolean)">
             <summary>registers the private Subset with the server </summary>
             <param name="parent">The parent object of this Subset(_TM1Dimension)
             </param>
             <param name="name">The name of this object
             </param>
             <param name="isTemp">Whether to register the object as temporary.  A temporary
             registration means object isn't saved to disk, and is cleaned up automatically
             at the end of the client session.
             </param>
             <returns> _TM1Subset, The handle to the newly registered object
             </returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.privatePublish(System.String)">
            <summary>publishes a private subset making it available to other clients on the server</summary>
            <param name="name">name for the public subset
            </param>
            <returns> _TM1Subset the newly published subset
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.selectNone">
            <summary>sets the selection flag on the current subset to none</summary>
            <returns> boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.selectByIndex(System.Int32,System.Boolean)">
            <summary>sets the selection of an element by its position</summary>
            <param name="position">Position of the element that is to be marked selected
            </param>
            <param name="selection">boolean flag indicating to select or deselect
            </param>
            <returns> boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.selectByLevel(System.Int32,System.Boolean)">
            <summary>sets the selection of element by its level</summary>
            <param name="level">Level of the subset that contains elements that are to be marked selected
            </param>
            <param name="selection">boolean flag indicating to select or deselect
            </param>
            <returns> boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.selectByPattern(System.String,System.Boolean)">
            <summary>sets the selection of element by a given pattern</summary>
            <param name="pattern">Pattern of elements that are to be marked selected
            </param>
            <param name="selection">boolean flag indicating to select or deselect
            </param>
            <returns> boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.selectByQuery(Applix.TM1.API.Internal._TM1Dimension,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary>sets the selection of elements returned by a given query</summary>
            <param name="dim">Handle of dimension to query
            </param>
            <param name="query">Handle to the query object
            </param>
            <param name="dimIndexInQuery">Index of the dimension being queried in the given query
            </param>
            <param name="selection">Boolean flag to indicate the selection or de-selection of the resulting subset
            </param>
            <returns> boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.selectByAttribute(Applix.TM1.API.Internal._TM1Attribute,Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary>selects elements of a subset that have an attribute matching the value</summary>
            <param name="attr">Handle to the attribute
            </param>
            <param name="valueToMatch">The value of attribute to match
            </param>
            <param name="selection">Boolean flag to indicate the selection or de-selection of the resulting subset
            </param>
            <returns> boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Attribute">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.selectByAttribute(Applix.TM1.API.Internal._TM1Attribute,Applix.TM1.API.Internal._TM1Val,System.Boolean)">
            <summary>selects elements of a subset that have an attribute matching the value</summary>
            <param name="attr">Handle to the attribute
            </param>
            <param name="valueToMatch">The value of attribute to match
            </param>
            <param name="selection">Boolean flag to indicate the selection or de-selection of the resulting subset
            </param>
            <returns> boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Attribute">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.selectBySecurity(System.Int32,System.Boolean)">
            <summary>selects elements of a subset that meets the specified security right.</summary>
            <param name="secRight">The minimum security requirement. Security Rights are listed in _TM1SecurityType.java
            </param>
            <param name="selection">Boolean flag to indicate the selection or de-selection of the resulting subset
            </param>
            <returns> boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1SecurityType">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.filterBySecurity(System.Int32)">
            <summary>Removes elements of a subset that don't meet the minimum security type have the atleast the security right specified
            This method does not alter the selection status of the other elements in
            the subset.
            </summary>
            <param name="secRight">The minimum security requirement. Options are listed in _TM1SecurityType.java
            </param>
            <returns> Number of Elements remaining in the subset
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1SecurityType">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.keepSelection">
            <summary>Removes all elements from the subset that are not selected</summary>
            <returns> The number of elements remaining in the subset
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.deleteSelection">
            <summary>removes all elements that are marked selected from the current subset</summary>
            <returns> The count of remaining elements in the subset.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.insertChildrenOfSelection">
            <summary>Takes each selected element and inserts its children, if any, directly
            under the element in the list. This method is used to drill down on the
            elements in a subset
            </summary>
            <returns> boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.insertParentsOfSelection">
            <summary>Takes each selected element and inserts its parents, if any, directly
            above the element in the list.
            </summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.deleteChildrenOfSelection">
             <summary>Deletes any children of the set of selected elements in the list.
             </summary>
             <returns> _TM1Val boolean indicator of success
             </returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.insertDescendentsOfSelection">
             <summary>Inserts any descendents of the set of selected elements in the list.
             </summary>
             <returns> _TM1Val boolean indicator of success
             </returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.sort(System.Boolean)">
            <summary>Sorts the elements in this subset alphabetically</summary>
            <param name="sortDown">If TRUE sort alphabetically, if FALSE sort in reverse alphabetical order
            </param>
            <returns> boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.sortByHierarchy">
            <summary>Places all the children of a set of subset elements under the parents</summary>
            <returns> boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.sortByIndex(System.Boolean)">
            <summary>Sorts the elements in this subset by their index</summary>
            <param name="sortAsc">If TRUE sort ascending, if FALSE sort in descending order
            </param>
            <returns> boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.subtract(Applix.TM1.API.Internal._TM1Subset)">
            <summary>Removes a set of elements from the subset specified</summary>
            <param name="subset">handle to a subset whose elements you want to delete in the current subset
            </param>
            <returns> boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.FindIndexByPattern(System.String,System.Int32,System.Boolean)">
             <summary>
             Return the next or previous subset index at which the passed pattern matches.
             Indices are one-based
             </summary>
             <param name="pattern">the pattern to match against subset element names</param>
             <param name="startingIndex">the index at which to begin searching</param>
             <param name="bNext">true: search for the next match.  false: prev match</param>
             <returns>the one-based matching index, or zero if no match</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.elementDisplay(System.Int32)">
            <summary>Returns the information necessary to draw levels, lines and plus/minus boxes
            corresponding to a subset element displayed in the tree hierarchy
            </summary>
            <param name="element">Index into the subset corresponding to the element that you want to display
            </param>
            <returns> Encoded display string that contains information about the display characteristics
            of the element in a tree structure.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.subsetElementDisplayLevel(Applix.TM1.API.Internal._TM1Val)">
            <param name="elemDisplayString">returned from calling elementDisplay
            </param>
            <returns> int indicating the indentation of the element in the tree display
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.subsetElementDisplayPlus(Applix.TM1.API.Internal._TM1Val)">
            <param name="elemDisplayString">returned from calling elementDisplay
            </param>
            <returns> boolean, If boolean is false, the element has children that are currently displayed
            beneath it in the subset, if boolean is true, element does not
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.subsetElementDisplayMinus(Applix.TM1.API.Internal._TM1Val)">
            <param name="elemDisplayString">returned from calling elementDisplay
            </param>
            <returns> boolean, If boolean is true, the element has children that are currently displayed
            beneath it in the subset, if boolean is false, element does not
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.subsetElementDisplayTee(Applix.TM1.API.Internal._TM1Val)">
            <param name="elemDisplayString">returned from calling elementDisplay
            </param>
            <returns> boolean, If the boolean is true, the element is preceded by a
            tee connector to the display structure
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.subsetElementDisplayEll(Applix.TM1.API.Internal._TM1Val)">
            <param name="elemDisplayString">returned from calling elementDisplay
            </param>
            <returns> boolean, If the boolean is true, the element is the last displayed
            element in a consolidation, in a tree structure the element would be displayed
            with an ELL
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.subsetElementDisplayWeight(Applix.TM1.API.Internal._TM1Val)">
            <param name="elemDisplayString">returned from calling elementDisplay
            </param>
            <returns> double, the function returns the weight of the element in the display structure
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.subsetElementDisplaySelection(Applix.TM1.API.Internal._TM1Val)">
            <param name="elemDisplayString">returned from calling elementDisplay
            </param>
            <returns> boolean, if the boolean is true, the element is currently selected
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.subsetElementDisplayLine(Applix.TM1.API.Internal._TM1Val,System.Int32)">
            <param name="elemDisplayString">returned from calling elementDisplay
            </param>
            <param name="index">index, indicates position
            </param>
            <returns> boolean, if boolean is true, the element has a line preceding it in the
            position indicated by index
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.getElementParent(System.Int32)">
            <summary>Returns the index of the parent of the element in the subset</summary>
            <param name="elementIdx">index of the element
            </param>
            <returns> _TM1Val index of the parent element in the subset
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.getElementLastSon(System.Int32)">
            <summary>Returns the index of the last child of the given element in the subset</summary>
            <param name="elementIndex">element index
            </param>
            <returns> _TM1Val index of the child element
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.update(Applix.TM1.API.Internal._TM1Subset)">
            <summary>Updates a registered subset with a new one</summary>
            <param name="newSubset">handle to the new subset that replaces this (old) subset
            </param>
            <returns> _TM1Subset The updated subset
            Errors: ObjectIsUnregistered, ObjectSecurityNoAdminRights, ObjectNotFound, SubsetHasPrivatePseudoElements
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.getAlias">
            <summary>Returns the alias name currently selected in the subset
            Note that the alias name is the attribute on the elements in the subset
            </summary>
            <returns> _TM1Val alias string of the subset
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.setAlias(System.String)">
            <summary>Sets the alias name to be used in the current subset
            Note that the alias name is the attribute on the elements in the subset
            </summary>
            <param name="aliasName">The alias name
            </param>
            <returns> Boolean indicator of success
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.getElement(System.Int32)">
            <summary>Retrieves an element handle from the current subset at a given index</summary>
            <param name="index">Index into the subset's element list
            </param>
            <returns> _TM1Element handle to the element
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Element">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Subset.getElement(System.String)">
             <summary>Retrieves an element handle from the current subset with a given element name</summary>
             <param name="elem_display_name">element display name in subset list, can be real name or alias name.
             </param>
             <returns> _TM1Element handle to the element
             </returns>
             <seealso cref="T:Applix.TM1.API.Internal._TM1Element">
             </seealso>
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Applix.TM1.API.Internal._TM1Subset.getElementsList(System.Int32,System.Int32)" -->
        <member name="M:Applix.TM1.API.Internal._TM1Subset.ClearCollections">
             <summary>
             Call ClearAll on any TM1ObjectCollections held by this.
             </summary>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Subset.RootElements">
            <summary> Retrieve an array of the <see cref="T:Applix.TM1.API.Internal._TM1Element"/> objects
            that are at the root level of the subset; i.e., have no parents.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Subset.Parent">
            <summary>returns the object parent of the subset which is a _TM1Dimension</summary>
            <returns> _TM1Dimension The parent _TM1Dimension object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Dimension">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Subset.ElementCount">
            <summary>Returns a count of elements in the current subset</summary>
            <returns> int number of elements
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Subset.ElementCount_Internal">
            <summary>Returns a count of elements in the current subset</summary>
            <returns> int number of elements
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Subset.ExpandAbove">
             <summary>
             Whether consolidations expand visually upward (true),
             or downward (false)
             </summary>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Subset.getExpression">
            <summary>
            Retrieves the MDX expression that was used to create this subset.
            If this is a static subset, then the expression would be empty.
            </summary>
            <returns>The expression string as a _TM1Val object</returns>
            <seealso>_TM1Val</seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Subset.Width_old">
            <summary> Returns the width (in characters) of the widest element in the subset. </summary>
            <returns> _TM1Val character width of widest element.
            </returns>
        </member>
        <member name="F:Applix.TM1.API.Internal._TM1NetClass.MAX_PENDING_REQS">
            <summary>MAX_PENDING_REQS should be set using the buffer size and
            * the smallest request size i.e = outbufSize/minreqSize+1;
            
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.PutByte(System.Int32)">
            <summary>Byte size = 1 </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.PutPendingArg(System.Int32)">
            <summary>Pending Size = 2 </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.PutInt(System.Int32)">
            <summary>Int Size = 4 </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.PutShort(System.Int32)">
            <summary>Short size = 2 </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.PutString(System.String)">
            <summary>String size = byteLen </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.PutReal(System.Double)">
            <summary>Real size = 4+4 = 8 </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.DoubleToLongBits(System.Double)">
            <summary> Convert the double to the IEEE 754 floating-point
            "double format" bit layout. Bit 63 (the most significant) is the
            sign bit, bits 62-52 (masked by 0x7ff0000000000000L) represent the
            exponent, and bits 51-0 (masked by 0x000fffffffffffffL) are the
            mantissa.  This function collapses all versions of NaN to
            0x7ff8000000000000L. The result of this function can be used as
            the argument to <code>LongBitsToDouble(long)</code> to obtain the
            orignial <code>double</code> value.
            </summary>
            <param name="d">the <code>double</code> to convert</param>
            <returns> the bits of the <code>double</code></returns>
            <seealso cref="M:Applix.TM1.API.Internal._TM1NetClass.LongBitsToDouble(System.Int64)"></seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.DoubleToLongRawBits(System.Double)">
            <summary> Convert the double to the IEEE 754 floating-point "double format" bit
            layout. Bit 63 (the most significant) is the sign bit, bits 62-52
            (masked by 0x7ff0000000000000L) represent the exponent, and bits 51-0
            (masked by 0x000fffffffffffffL) are the mantissa. This function
            leaves NaN alone, rather than collapsing to a canonical value. The
            result of this function can be used as the argument to
            <code>LongBitsToDouble(long)</code> to obtain the original
            <code>double</code> value.
            </summary>
            <param name="d">the <code>double</code> to convert</param>
            <returns> the bits of the <code>double</code></returns>
            <seealso cref="M:Applix.TM1.API.Internal._TM1NetClass.LongBitsToDouble(System.Int64)"></seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.LongBitsToDouble(System.Int64)">
            <summary> Convert the argument in IEEE 754 floating-point "double format" bit
            layout to the corresponding float. Bit 63 (the most significant) is the
            sign bit, bits 62-52 (masked by 0x7ff0000000000000L) represent the
            exponent, and bits 51-0 (masked by 0x000fffffffffffffL) are the mantissa.
            This function leaves NaN alone, so that you can recover the bit pattern
            with <code>DoubleToLongRawBits(double)</code>.
            </summary>
            <param name="bits">the bits to convert</param>
            <returns> the <code>double</code> represented by the bits</returns>
            <seealso cref="M:Applix.TM1.API.Internal._TM1NetClass.DoubleToLongBits(System.Double)"></seealso>
            <seealso cref="M:Applix.TM1.API.Internal._TM1NetClass.DoubleToLongRawBits(System.Double)"></seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.PutBool(System.Boolean)">
            <summary>Boolean size = 2 </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.PutObject(Applix.TM1.API.Internal._TM1Object)">
            <summary>Object size = 1+4+4 = 9 </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.net_Write(System.Byte[],System.Int32)">
            <summary>write size bytes from buf *</summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.SendClientMessage(System.String,System.Byte[],System.Int32,System.Int32)">
            Send a client message to the server.
            The current format of this message is:
              [length of client name][client name][secret key][thread id][optional parameters (current job ID)]
            
            This message will uniquely identify a currently running transaction in the server
            and verify the sender in the case of a cancellation.
            
            @param clientName The client name of the connected user.
            @param secretKey The connected user's secret key.
            @param threadID The connected user's thread ID (within the server.)
            @param commandCode The message to send <b>rq_ServerRequestCancel</b>, or <b>rq_ServerRequestKill</b>.
            @return <b>true</b> on success, <b>false</b> otherwise.
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
            Moved from _SupportClass to here.
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1NetClass.ReadInput(System.IO.Stream,System.Byte[]@,System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
            Moved from _SupportClass to here.
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1NetClass.FreeOutBufferSpace">
            <summary>
            Return current spare space in output buffer.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1NetClass.RequestStatus">
            <summary> Get back current client request status</summary>
            <returns> 	 Current client request status: ServerRequestCancel,
            ServerRequestOK, or ServerRequestKill
            </returns>
            <summary> Set client request status, so that during processing
            operation progress, TM1 server could abort or cancel certain 
            time-consuming operation per user request.
            Value is ServerRequestCancel, ServerRequestOK, or ServerRequestKill
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1NetClass.CurrentJobID">
            <summary> Get back current job ID. </summary>
            <returns> The current job ID. </returns>
            <summary> Set the current job ID. </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EntryView">
            <summary>
            Summary description for _TM1EntryView.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EntryProcess">
            <summary>
            Summary description for _TM1EntryProcess.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Element">
            <summary>This class contains the methods that control actions related to a TM1 Element</summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Element.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary>_TM1Element -&gt; returns a Element object</summary>
            <param name="s">a _TM1Server object containing the connection
            </param>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Server">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Element.addComponent(Applix.TM1.API.Internal._TM1Element,Applix.TM1.API.Internal._TM1Val)">
            <summary>Adds a child element to this consolidation element</summary>
            <param name="childElem">Handle to the child element(_TM1Element)
            </param>
            <param name="weight">(Must be TM1Real) The weight of the component element
            </param>
            <returns> _TM1Val Boolean indicator of success or failure
            Errors:	DimensionElementComponentAlreadyExists
            DimensionElementNotConsolidated
            ObjectIsRegistered
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Element.deleteComponent(Applix.TM1.API.Internal._TM1Element)">
            <summary>Deletes a component of this consolidation element</summary>
            <param name="childElem">Handle to the child element(_TM1Element)
            </param>
            <returns> _TM1Val Boolean indicator of success or failure
            Errors:	DimensionElementComponentDoesNotExist
            DimensionElementNotConolidated
            ObjectisRegistered
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Element.getComponentWeight(Applix.TM1.API.Internal._TM1Element)">
            <summary>Retrieves the weight of a child element in this consolidation element </summary>
            <param name="childElem">Handle to the child element(_TM1Element)
            </param>
            <returns> _TM1Val (TM1Real) containing the weight of the child element
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Element.duplicate">
            <summary>returns a duplicate of the element. The returned element is unregistered.</summary>
            <returns> _TM1Element The handle to the duplicate element
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Element.getComponent(System.Int32)">
            <summary>returns the handle to a component in this element</summary>
            <param name="index">Index into the element's component list
            </param>
            <returns> _TM1Element Component Element Handle.
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Element.getComponent(System.String)">
            <summary>returns the handle to a component in this element</summary>
            <param name="name">name of the component in the element's component list
            </param>
            <returns> _TM1Element Component Element Handle.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Element.getElementParent(System.Int32)">
            <summary>returns the handle to the element parent</summary>
            <param name="index">Index into the element's parent list
            </param>
            <returns> _TM1Element handle to the element parent.
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Element.getElementParent(System.String)">
            <summary>returns the handle to the parent element</summary>
            <param name="name">name of the element in the element's parent list
            </param>
            <returns> _TM1Element handle to the element parent.
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Element.Parent">
            <summary>returns the parent of the element which is a _TM1Dimension</summary>
            <returns> _TM1Dimension The parent _TM1Dimension object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Dimension">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Element.Index">
            <summary>gets the index of this element within the parent dimension</summary>
            <returns> Element Index (int)
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Element.Level">
            <summary>gets the level of this element within the parent dimension</summary>
            <returns> Element level (int)
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Element.ElementType">
            <summary>gets the type of this element</summary>
            <returns> int Type of the element which can be any of
            _TM1ObjectType.ElementString
            _TM1ObjectType.ElementSimple
            _TM1ObjectType.ElementConsolidated
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1ObjectType">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Element.ComponentCount">
            <summary>returns the number of components in this element(only if consolidated)</summary>
            <returns> number of components (int)
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Element.ElementParentCount">
            <summary>returns the number of element parents within the dimension</summary>
            <returns> number of element parents in the dimension (int)
            </returns>
        </member>
        <member name="T:Applix.TM1.API.TM1DimensionConsolidatedElement">
            <summary> Represents a dimension element that may have child elements.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionConsolidatedElement.GetChildWeight(System.Int32)">
            <summary> Gets the TM1 weight value for the specified child element by index.
            </summary>
            <param name="nChildIndex">Index of the child element.</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionConsolidatedElement.GetChildWeight(Applix.TM1.API.TM1DimensionElement)">
            <summary> Gets the TM1 weight value for the specified child element object.
            </summary>
            <param name="child"><b>TM1DimensionElement</b> object.</param>
            <returns></returns>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionConsolidatedElement.IsConsolidated">
            <summary> Returns <b>true</b> if this is a consolidated element.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionConsolidatedElement.Children">
            <summary> Gets the collection of children elements for this dimension element.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1DataTable">
            <summary> Represents one table of data from a <b>TM1View</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataTable.Rows">
            <summary> Gets a collection of rows from this <b>TM1DataTable</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataTable.View">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1View"/> associated with this <b>TM1DataTable</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataTable.Item(System.Int32)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1DataRow"/> by index from this <b>TM1DataTable</b>.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1AttributeDefinition">
            <summary> Represents the base class that holds the definition of an attribute.</summary>
            <seealso cref="T:Applix.TM1.API.TM1AttributeDefinition.TypeEnum"/>
            <seealso cref="T:Applix.TM1.API.TM1AttributeValue"/>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinition.#ctor(System.String,Applix.TM1.API.TM1AttributeDefinition.TypeEnum)">
            <summary> Create an attribute definition, which must have a valid name.
            </summary>
            <exception cref="T:System.ArgumentNullException"> Name is not valid.
            </exception>
            <exception cref="T:System.ArgumentException"> Attribute type is not valid.
            </exception>
            <seealso cref="T:Applix.TM1.API.TM1AttributeDefinition.TypeEnum"/>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinition.#ctor">
            <summary> Disallow default construction </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinition.ToString">
            <summary> Returns a string containing the type and name
            of the attribute definition.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinition.createValue(Applix.TM1.API.Internal._TM1Val)">
            <summary> Depending upon the derived class's type of this attribute
            definition, create a <see cref="T:Applix.TM1.API.TM1AttributeValue"/> instance that holds
            the <paramref name="value"/>.
            </summary>
            <param name="value">Data value to be encapsulated in new
            TM1AttributeValue instance.
            </param>
            <returns>New TM1AttributeValue object encapsulating the value.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeDefinition.Dispose">
            <summary></summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Object.Dispose" filter="##SUMMARY"/>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeDefinition.Name">
            <summary> Gets this attribute's name. </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeDefinition.Type">
            <summary> Gets this attribute's type.
            See <see cref="T:Applix.TM1.API.TM1AttributeDefinition.TypeEnum"/>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeDefinition.Disposed">
            <commentsfrom cref="P:Applix.TM1.API.TM1Object.Disposed"/>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeDefinition.GUID">
            <summary> Gets this object's Guid. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="T:Applix.TM1.API.TM1AttributeDefinition.TypeEnum">
            <summary> A TM1 object attribute is one of these types. Both attribute
            definitions and values are typed.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1AttributeDefinition.TypeEnum.Alias">
            <summary> An alias to the object's name; cannot be null.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1AttributeDefinition.TypeEnum.String">
            <summary> An attribute with a string value, which could be null.
            </summary>
        </member>
        <member name="F:Applix.TM1.API.TM1AttributeDefinition.TypeEnum.Numeric">
            <summary> An attribute with a numeric (double) value.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1AliasAttributeDefinition">
            <summary> Represents the definition of an attribute that holds a name alias.
            See <see cref="T:Applix.TM1.API.TM1AttributeDefinition"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AliasAttributeDefinition.#ctor(System.String)">
            <summary> Creates an attribute definition for a name alias.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AliasAttributeDefinition.createValue(Applix.TM1.API.Internal._TM1Val)">
            <summary> Creates a <see cref="T:Applix.TM1.API.TM1AliasAttribute"/> object that holds the
            name string in <paramref name="value"/>.
            See TM1AttributeDefinition.<see cref="M:Applix.TM1.API.TM1AttributeDefinition.createValue(Applix.TM1.API.Internal._TM1Val)"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"> Parameter <paramref name="value"/>
            is null or contains an empty string.
            </exception>
            <exception cref="T:System.ArgumentException"> Parameter <paramref name="value"/>
            is non-null but contains something other than a string.
            </exception>
        </member>
        <member name="T:Applix.TM1.API.TM1StringAttributeDefinition">
            <summary> Represents the definition of an attribute that holds a string value.
            See <see cref="T:Applix.TM1.API.TM1AttributeDefinition"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1StringAttributeDefinition.#ctor(System.String)">
            <summary> Creates a definition for a string attribute.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1StringAttributeDefinition.createValue(Applix.TM1.API.Internal._TM1Val)">
            <summary> Creates a <see cref="T:Applix.TM1.API.TM1StringAttribute"/> object that holds
            the string in <paramref name="value"/>, which can be null.
            See TM1AttributeDefinition.<see cref="M:Applix.TM1.API.TM1AttributeDefinition.createValue(Applix.TM1.API.Internal._TM1Val)"/>.
            </summary>
            <exception cref="T:System.ArgumentException"> Parameter <paramref name="value"/>
            is non-null but contains something other than a string.
            </exception>
        </member>
        <member name="T:Applix.TM1.API.TM1NumericAttributeDefinition">
            <summary> Represents the definition of an attribute that holds a number.
            See <see cref="T:Applix.TM1.API.TM1AttributeDefinition"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1NumericAttributeDefinition.#ctor(System.String)">
            <summary> Creates a definition for a numeric attribute.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1NumericAttributeDefinition.createValue(Applix.TM1.API.Internal._TM1Val)">
            <summary> Creates a <see cref="T:Applix.TM1.API.TM1NumericAttribute"/> object that holds
            the value in <paramref name="value"/>.
            See TM1AttributeDefinition.<see cref="M:Applix.TM1.API.TM1AttributeDefinition.createValue(Applix.TM1.API.Internal._TM1Val)"/>.
            </summary>
            <exception cref="T:System.ArgumentException"> Parameter <paramref name="value"/>
            is non-null but contains something other than a number.
            </exception>
        </member>
        <member name="T:Applix.TM1.API.TM1AttributeValue">
            <summary> Represents the base class that holds the value of an attribute. The attribute is
            defined in a <see cref="T:Applix.TM1.API.TM1AttributeDefinition"/>.
            </summary>
            <seealso cref="T:Applix.TM1.API.TM1AttributeDefinition"/>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValue.#ctor(Applix.TM1.API.TM1AttributeDefinition,System.Object)">
            <summary> Create an attribute value, which must refer to its definition
            (see <see cref="T:Applix.TM1.API.TM1AttributeDefinition"/>).
            This constructor accepts a value object, which is set to the correct
            type by derived classes before calling this constructor.
            </summary>
            <param name="def"> The definition for this attribute; cannot be null.
            </param>
            <param name="val"> Value for this attribute; may be null.
            </param>
            <exception cref="T:System.ArgumentNullException"> Parameter <paramref name="def"/>
            is null.
            </exception>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValue.#ctor(Applix.TM1.API.TM1AttributeDefinition)">
            <summary> Create an attribute value with a default null value.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValue.#ctor">
            <summary> Disallow default construction </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1AttributeValue.Dispose">
            <summary></summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Object.Dispose" filter="##SUMMARY"/>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeValue.Definition">
            <summary> Gets the definition associated with this attribute value.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeValue.Name">
            <summary> Gets the name of this attribute, i.e., the name associated with the
            attribute definition. See
            TM1AttributeDefinition.<see cref="P:Applix.TM1.API.TM1AttributeDefinition.Name"/>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeValue.Type">
            <summary> Gets this attribute's type.
            See TM1AttributeDefinition.<see cref="P:Applix.TM1.API.TM1AttributeDefinition.Type"/>.
            See TM1AttributeDefinition.<see cref="T:Applix.TM1.API.TM1AttributeDefinition.TypeEnum"/>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeValue.Value">
            <summary> Gets the <b>object</b> with the value of this attribute.  The type
            of this <b>object</b> varies depending upon the type of the attribute,
            and the value <b>object</b> may be null.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeValue.Disposed">
            <commentsfrom cref="P:Applix.TM1.API.TM1Object.Disposed"/>
        </member>
        <member name="P:Applix.TM1.API.TM1AttributeValue.GUID">
            <summary> Gets this object's Guid. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="T:Applix.TM1.API.TM1AliasAttribute">
            <summary> Represents a TM1 attribute that holds a name alias.
            See <see cref="T:Applix.TM1.API.TM1AttributeValue"/> and  <see cref="T:Applix.TM1.API.TM1AliasAttributeDefinition"/>.
            </summary>
            <remarks> This attribute cannot have an empty value.  It must hold a valid
            string that is an alias for the attribute's original name.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1AliasAttribute.#ctor(Applix.TM1.API.TM1AliasAttributeDefinition,System.String)">
            <summary> Creates an alias attribute by supplying the alias name string,
            which must not be null or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException"> Parameter <paramref name="val"/>
            is null or the string is empty.
            </exception>
        </member>
        <member name="M:Applix.TM1.API.TM1AliasAttribute.ToString">
            <summary> Returns the string representation of this alias attribute. 
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1AliasAttribute.AliasValue">
            <summary> Gets the alias name string. </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1StringAttribute">
            <summary> Represents a TM1 attribute that holds a string value.
            See <see cref="T:Applix.TM1.API.TM1AttributeValue"/> and  <see cref="T:Applix.TM1.API.TM1StringAttributeDefinition"/>.
            </summary>
            <remarks> This attribute value may be null.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1StringAttribute.#ctor(Applix.TM1.API.TM1StringAttributeDefinition)">
            <summary> Creates an empty string attribute.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1StringAttribute.#ctor(Applix.TM1.API.TM1StringAttributeDefinition,System.String)">
            <summary> Creates a string attribute with the given string.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1StringAttribute.ToString">
            <summary> Gets the string attribute, or "[null]" if null.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1StringAttribute.StringValue">
            <summary> Gets the string attribute, or null if null.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1NumericAttribute">
            <summary> Represents a TM1 attribute that holds a numeric value.
            See <see cref="T:Applix.TM1.API.TM1AttributeValue"/> and  <see cref="T:Applix.TM1.API.TM1NumericAttributeDefinition"/>.
            </summary>
            <remarks> This attribute value may be null. If null then the Numeric value
            returned is Double.NaN.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1NumericAttribute.#ctor(Applix.TM1.API.TM1NumericAttributeDefinition)">
            <summary> Creates an empty numeric attribute.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1NumericAttribute.#ctor(Applix.TM1.API.TM1NumericAttributeDefinition,System.Double)">
            <summary> Creates a numeric attribute with the given value.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1NumericAttribute.ToString">
            <summary> Returns the string representation of the numeric attribute, or
            "[null]" if the numeric value is not valid.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1NumericAttribute.NumericValue">
            <summary> Gets the numeric attribute, or Double.NaN if null.
            Use Double.<see cref="M:System.Double.IsNaN(System.Double)"/> to determine if a valid value or
            not.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ServerInfoCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1ServerInfo"/> objects.
            </summary>
            <remarks> This collection is owned by <see cref="T:Applix.TM1.API.TM1AdminServer"/> and is
            accessed via the <b>TM1AdminServer</b> <see cref="P:Applix.TM1.API.TM1AdminServer.Servers"/>
            property.
            </remarks>
            <example>
            <summary>
            The following code example shows ...<p/>
            <p/>
            <b>NOTE:</b> For a complete example of logging into a <b>TM1Server</b>,
            see <see cref="T:Applix.TM1.API.TM1AdminServer"/>.<p/>
            </summary>
            <code lang="c#">
            </code>
            </example>
        </member>
        <member name="M:Applix.TM1.API.TM1ServerInfoCollection.GetServerInfo(System.String,System.String)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1ServerInfo"/> object by host name and server name.
            See also <see cref="P:Applix.TM1.API.TM1ServerInfoCollection.Item(System.String[])"/>(string[]).
            </summary>
            <param name="strHostName"> Name of host machine where the database
            server resides.
            </param>
            <param name="strServerName"> Name of TM1 database server.
            </param>
            <remarks> It is possible for TM1 database server names to be repeated in
            our collection of server info objects. This happens if more than one
            host machine is hooked to our <see cref="T:Applix.TM1.API.TM1AdminServer"/> and there are
            database servers with the same name on different hosts. This method
            uniquely finds a database server based upon host name and server name.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerInfoCollection.AdminServer">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1AdminServer"/> that owns this
            collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerInfoCollection.Item(System.Int32)">
            <overloads> Gets a <see cref="T:Applix.TM1.API.TM1ServerInfo"/> object. </overloads>
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1ServerInfo"/> object by <i>index</i>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerInfoCollection.Item(System.String)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1ServerInfo"/> object by <i>name</i>.
            </summary>
            <remarks> Returns the first <b>TM1ServerInfo</b> object with the specified <i>name</i>. If
            there are multiple TM1 server machines hooked to the
            <see cref="T:Applix.TM1.API.TM1AdminServer"/> then there could be more than one TM1
            database server with a given name. In this case, either use
            <see cref="P:Applix.TM1.API.TM1ServerInfoCollection.Item(System.String[])"/> or
            <see cref="M:Applix.TM1.API.TM1ServerInfoCollection.GetServerInfo(System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1ServerInfoCollection.Item(System.String[])">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1ServerInfo"/> object by host name and server name.
            See <see cref="M:Applix.TM1.API.TM1ServerInfoCollection.GetServerInfo(System.String,System.String)"/>(string,string).
            </summary>
            <param name="names"> Array of 2 strings where <i>names</i>[0] is the
            host name and <i>names</i>[1] is the server name.
            </param>
        </member>
        <member name="T:Applix.TM1.API.TM1DataCellCollection">
            <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1DataCell"/> objects
            in a <b>TM1DataTable</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCellCollection.View">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1View"/> associated with this <b>TM1DataCellCollection</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCellCollection.Row">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1DataRow"/> associated with this <b>TM1DataCellCollection</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCellCollection.DataTable">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1DataTable"/> associated with this <b>TM1DataCellCollection</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1DataCellCollection.Item(System.Int32)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1DataCell"/> by index.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Query.destroyExtract">
            <summary>ViewExtractDestroy</summary>
            <returns> _TM1Val boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1ProgressCodes">
            <summary>Posssible Call back messages
            MessageOpening 
            MessageRunning 
            MessageClosing 
            TypePercent 
            TypeCounter 
            ActionLoadingCube 
            ActionLoadingDimension 
            ActionRunningQuery 
            ActionCalculatingView 
            ActionLoadingSubset 
            ActionSavingSubset 
            ActionSortingSubset 
            ActionCalculatingSubsetAll 
            ActionInsertingSubset 
            ActionDuplicatingSubset 
            ActionCalculatingSubsetHierarchy 
            ActionSelectingSubsetElements 
            ActionDeletingSelection 
            ActionKeepingSelection 
            ActionSavingHierarchy 
            ActionLoadingHierarchy 
            ActionFilteringSubset 
            ActionCopyingCube 
            ActionCopyingDimension 
            ActionCopyingRule
            ActionProcessExecutingMetadata 
            ActionProcessExecutingData 
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1Process">
            <summary> Represents a process object in a <b>TM1Server</b>.
            </summary>
            <remarks>Obtain a TM1Process object from <see cref="P:Applix.TM1.API.TM1Server.Processes"/>.
            </remarks>
            <example>
            <summary>
            The following code example shows ...<p/>
            <p/>
            <b>NOTE:</b> For a complete example of logging into a <b>TM1Server</b>,
            see <see cref="T:Applix.TM1.API.TM1AdminServer"/>.<p/>
            </summary>
            <code lang="c#">
            // insert code sample here
            </code>
            </example>
        </member>
        <member name="M:Applix.TM1.API.TM1Process.#ctor(Applix.TM1.API.Internal._TM1Process,Applix.TM1.API.TM1Server)">
            <summary> Construct a TM1Process Object based on the process name
            </summary>
            <param name="process">Internal Process object</param>
            <param name="server">TM1 Server Object</param>
        </member>
        <member name="M:Applix.TM1.API.TM1Process.Execute">
            <overloads> Executes the process. </overloads>
            <summary> Executes the process using default parameters.
            </summary>
            <returns>Returns <b>true</b> when successful.</returns>
            <exception> Thrown if execution failed.</exception>
        </member>
        <member name="M:Applix.TM1.API.TM1Process.Execute(Applix.TM1.API.TM1ProcessParameter[])">
            <summary> Executes the process with user-defined parameters.
            </summary>
            <param name="parameters">User-defined TM1ProcessParameter variable</param>
            <returns>Returns <b>true</b> when successful</returns>
            <exception> Thrown if execution failed.</exception>
        </member>
        <member name="P:Applix.TM1.API.TM1Process.Name">
            <summary> Gets the name of this <b>TM1Process</b> object. This property is not settable.
            </summary>
            <exception cref="T:System.NotSupportedException"> If an attempt is made to set
            the name.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1Process.Server">
            <commentsfrom cref="P:Applix.TM1.API.TM1Cube.Server"/>
        </member>
        <member name="P:Applix.TM1.API.TM1Process.Parameters">
            <summary> Gets the process parameters for the process.
            </summary>
            <exception> Thrown if parameters contain errors.</exception>
        </member>
        <member name="T:Applix.TM1.API.TM1CellRange">
            <summary> Represents a collection of TM1Cell objects that corresponds to the range
            defined in a MultiDimensionSpec object.  
            </summary>
            <remarks> A TM1CellRange is immutable; it holds the collection of cells
            specified at construction time; no cells may be added or deleted.
            <para> Cells are ordered in the natural ordering for the range.  To start,
            all dimensions are indexed at 0, then the least significant dimension
            iterates first, followed by the next significant dimension, up to the most
            significant dimension, which iterates last.
            </para>
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1CellRange.#ctor(Applix.TM1.API.TM1ConstMultiDimensionSpec)">
            <summary> See <see cref="M:Applix.TM1.API.TM1CellRange.#ctor(Applix.TM1.API.TM1MultiDimensionSpec)"/>
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1CellRange.#ctor(Applix.TM1.API.TM1MultiDimensionSpec)">
            <summary> Create CellRange object that contains all cells in the
            <paramref name="spec"/> parameter.
            </summary>
            <param name="spec"> Specifies the cells with which this object is
            populated. A Const copy of spec is kept within the new CellRange object.
            </param>
        </member>
        <member name="M:Applix.TM1.API.TM1CellRange.Refresh">
            <summary> Refreshes all cells in this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1CellRange.SpreadData(System.String)">
            <summary>
            Spreads a value among all cells in the colleciton.
            </summary>
            <param name="controlString">Spreading value</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1CellRange.DimensionLength(System.Int32)">
            <summary>
            
            </summary>
            <param name="nDimNum"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1CellRange.GetEnumerator">
            <summary> Gets an enumerator over <see cref="T:Applix.TM1.API.TM1Cell"/>
            objects held in this collection.
            </summary>
            <remarks> A <see cref="T:Applix.TM1.API.TM1CellRange"/> cannot hold sub-collections so
            this enumerator iterates over all cells held directly within this
            collection. The cells are returned in natural order where all the
            dimensions are set to their lowest values, then the least significant
            dimension is iterated through its range, then next most significant
            dimension is incremented and the least significant dimension iterated
            through its range, etc.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1CellRange.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1CellRange.GetEnumerator"/>
        </member>
        <member name="P:Applix.TM1.API.TM1CellRange.DimensionSpec">
            <summary> Specifier for the collection of cells held in this CellRange.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellRange.DimensionCount">
            <summary> Gets the number of dimensions in this range.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellRange.CellCount">
            <summary> Gets the total number of cells in this range.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellRange.GUID">
            <summary> Gets this object's Guid. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1CellRange.Item(System.Int32[])">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Cell"/> at the location specified by the indexes.
            </summary>
            <param name="indexes"> Ordered set of offsets into each dimension of
            the range.
            </param>
        </member>
        <member name="P:Applix.TM1.API.TM1CellRange.Item(System.Int32)">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Cell"/> at the location specified by
            <paramref name="nIndex"/>.  
            </summary>
            <param name="nIndex"> Offset of the cell to retrieve.
            </param>
        </member>
        <member name="T:Applix.TM1.API.TM1CellRange.DimensionVector">
            <summary>
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1CellRange.DimensionVector.IsValidIndex(System.Int32)">
            <summary>
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1CellRange.DimensionVector.Cell(System.Int32)">
            <summary>
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1CellRange.DimensionVector.GetEnumerator">
            <summary> Gets an enumerator over either <see cref="T:Applix.TM1.API.TM1CellRange.DimensionVector"/>
            or <see cref="T:Applix.TM1.API.TM1Cell"/> objects held in this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1CellRange.DimensionVector.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1CellRange.DimensionVector.GetEnumerator"/>
        </member>
        <member name="P:Applix.TM1.API.TM1CellRange.DimensionVector.Depth">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellRange.DimensionVector.Length">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1CellRange.DimensionVector.Item(System.Int32)">
            <summary>
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Applix.TM1.API.TM1Cell">
            <summary> Represents an individual cell in a <see cref="T:Applix.TM1.API.TM1Cube"/>.
            </summary>
            <remarks> A cell is characterized by its location; i.e., the specific value
            of each of the dimensions in the cube that holds the cell. Since a
            MultiDimensionSpec refers to the Cube object to which it applies, it's not
            necessary to also include the Cube as a parameter to any constructor.  Note
            that each <b>TM1Cell</b> object saves a Const copy of the MultiDimensionSpec object
            that gives its location.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1Cell.#ctor(Applix.TM1.API.TM1ConstMultiDimensionSpec)">
            <summary> Create a cell at the location in <paramref name="spec"/>.
            </summary>
            <param name="spec"> The location of the cell within the cube. If spec
            is not a point specification (i.e., covers a range larger than a single
            cell) then the TM1Cell object created is for the lowest ranked cell in
            the range.
            </param>  
        </member>
        <member name="M:Applix.TM1.API.TM1Cell.#ctor(Applix.TM1.API.TM1MultiDimensionSpec)">
            <summary> Create a cell at the location in <paramref name="spec"/>.
            </summary>
            <param name="spec"> See description for TM1Cell(TM1ConstMultiDimensionSpec).
            </param>
        </member>
        <member name="M:Applix.TM1.API.TM1Cell.#ctor(Applix.TM1.API.TM1Server,System.String,System.String[])">
            <summary> Constructs a cell based upon the cube name and the name of each
            of the dimension elements.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1Cell.Refresh">
            <summary>
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1Cell.SpreadData(System.String)">
            <summary>
            Spreads a value through this cell.
            </summary>
            <param name="controlString">Spreading value</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Cell.SpreadData(Applix.TM1.API.TM1Cell,System.String)">
            <summary>
            Spreads a value through this cell.
            </summary>
            <param name="refCell">A reference cell in TM1Cube</param>
            <param name="controlString">Spreading value</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Cell.getCellCoord(Applix.TM1.API.TM1Cell)">
            <summary>
            Returns a cube cell coordinates in the form of _TM1Val that tm1 server can understand.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Cell.GetEnumerator">
            <summary> Gets an enumerator over <see cref="T:Applix.TM1.API.TM1Cell"/>
            objects held in this collection. In this case, only this cell.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1Cell.Applix#TM1#API#ICollectableCell#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1Cell.GetEnumerator"/>
        </member>
        <member name="P:Applix.TM1.API.TM1Cell.Cube">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Cell.Value">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Cell.StringValue">
            <summary>
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Cell.NumericValue">
            <summary>
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1SecurityType">
            <summary>Possible security types
            SecurityRightNone 
            SecurityRightRead
            SecurityRightWrite 
            SecurityRightReserve 
            SecurityRightLock 
            SecurityRightAdmin 
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Sandbox.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Error constructor</summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Sandbox.Clone(System.String)">
            <summary>
            Clone sandbox
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Sandbox.delete">
            <summary>
            Sandbox is a private object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Sandbox.ProcessQueueResultsMergeStatus(Applix.TM1.API.Internal._TM1Val)">
            <summary>
            used to grep the sandbox merge status returned via the queue results
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Sandbox.IsSandboxChanged">
            <summary>
            Returns zero suppression property on row axis
            </summary>
            <returns></returns>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EntryExternal">
            <summary>
            Summary description for _TM1EntryExternal.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1DrillObject">
            <summary>
            Summary description for _TM1DrillObject.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Chore">
             <summary> This class contains the methods execute TM1 Chores. User could use
             chore object to execute an existing chore in server.
            
             </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Chore.#ctor(Applix.TM1.API.Internal._TM1Server)">
             <summary> Creates a chore object and returns a handle to the empty chore.
             Currently, the TM1 Java API does not support the creation of chores
             from scratch. TM1 Java API programmers must work with chores that already exist
             on the server.
             </summary>
             <param name="s">A _TM1Server object that has a valid session with the TM1
             server.
            
            
             </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Chore.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Error constructor</summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Chore.execute">
            <summary>Execute current chore.</summary>
            <returns> _TM1Val Boolean indicator of success or failure
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Chore.duplicate">
            <summary> Returns a duplicate copy of the chore. The copy can be used to
            create a new chore, alter the steps in the chore, change the frequency of execution
            </summary>
            <returns> A handle to the duplicate _TM1Chore.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Chore.register(Applix.TM1.API.Internal._TM1Server,System.String)">
            <summary> Registers the chore with the server making it available to other clients.
            </summary>
            <param name="parent">the parent object of this chore. This is always the server
            on which the chore resides.
            </param>
            <param name="name">The name of this chore
            </param>
            <returns> A _TM1Chore object. This is the handle to the newly registered object.
            </returns>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Blob">
            <summary> The _TM1Blob class contains the methods needed to manipulate the binary objects
            in the TM1 Server. For example, you can store a data file or a set of images
            on your TM1 server.
            <p> Using this class, you can create a BLOB or retrieve an existing BLOB.
            The class also includes methods that allow you to retrieve the size of
            a BLOB or retrieve the size of a BLOB in bytes.
            </p>
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary> Creates a new BLOB object. Programmers should never call this constructor
            directly. Instead, call the _TM1Server.createBlob method. That method
            calls this contructor, and returns a handle to the created BLOB.
            </summary>
            <param name="serv">- A _TM1Server object
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.open">
            <summary> Opens a BLOB object on the TM1 server. Once you have opened a BLOB, you
            can read data from it, or write data to it. When you are finished with the BLOB,
            you should call the method _TM1Blob.close.
            </summary>
            <returns> a _TM1Val containing a boolean. The boolean indicates success or failure.
            @throws BlobOpenFailed
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.close">
            <summary> Closes a BLOB object on the server. This BLOB must have been previously
            opened with the method _TM1Blob.open.
            </summary>
            <returns> A _TM1Val Object containing a boolean. This boolean indicates
            if the method call successfully completed.
            @throws BlobCloseFailed
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.deleteFile">
            <summary> Deletes the file associated with this BLOB. When you create a BLOB by
            calling the method _TM1Server.createBlob, the TM1 server creates a file
            using the name you pass it, and the extension .blb. For example, if you call
            _TM1Server.createBlob and pass the name <b>Myfile</b>, the TM1 server creates
            a file called <b>Myfile.blb</b> in its data directory.
            <p> This method deletes the .blb file from the TM1 server's data directory.</p>
            </summary>
            <returns> a _TM1Val containing a boolean. The boolean indicates if the method
            call successfully completed.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.GetBytes">
            <summary> Reads a block of data from a BLOB on the TM1 server.</summary>
            <returns> The entire bytes actually read from the BLOB.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.GetString">
            <summary> Reads a block of data from a BLOB on the TM1 server.</summary>
            <returns> The String converted from entire bytes actually read from the BLOB using system's default encoding.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.GetBytes(System.Int32,System.Int32)">
            <summary> Reads a block of data from a BLOB on the TM1 server.</summary>
            <param name="startPos">The starting position for the read.
            </param>
            <param name="nBytes">The number of bytes to read.
            </param>
            <returns>The bytes actually read from the BLOB.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.GetString(System.Int32,System.Int32)">
            <summary> Reads a block of data from a BLOB on the TM1 server.</summary>
            <param name="startPos">The starting position for the read.
            </param>
            <param name="nBytes">The number of bytes to read.
            </param>
            <returns>a String value converted from number of bytes using system's default encoding.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.put(System.String)">
             <summary> Writes a String data to the TM1 server.</summary>
             <param name="strBuf">a string buffer containing data to be added to the BLOB.
             @throws BlobPutFailed
             </param>
             <returns> an integer indicating the number of bytes actually written to the BLOB.
             </returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.put(System.Int32,System.Int32,System.String)">
             <summary> Writes a block of data to the TM1 server.</summary>
             <param name="startPos">starting position for the write.
             </param>
             <param name="nLength">number of characters to write to the BLOB starting
             at the position indicated by startPos.
             </param>
             <param name="strBuf">a string buffer containing data to be added to the BLOB.
             @throws BlobPutFailed
             </param>
             <returns> an integer indicating the number of bytes actually written to the BLOB.
             </returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.put(System.Byte[])">
             <summary> Writes a block of data to the TM1 server.</summary>
             <returns> an integer indicating the number of bytes actually written to the BLOB.
             </returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.put(System.Int32,System.Int32,System.Byte[])">
             <summary> Writes a block of data to the TM1 server.</summary>
             <param name="startPos">starting position for the write.
             </param>
             <param name="nBytes">number of bytes to write to the BLOB starting
             at the position indicated by startPos.
             </param>
             <param name="byteArray">a byte array containing data to be added to the BLOB.
             @throws BlobPutFailed
             </param>
             <returns> an integer indicating the number of bytes actually written to the BLOB.
             </returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Blob.getSize">
            <summary> Returns the size of the BLOB in bytes. </summary>
            <returns> _TM1Val object containing the size of the BLOB.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Blob.LastUpdateTime">
            <summary>returns a datetime string of last object modification</summary>
            <returns> last modified datetime string
            </returns>
        </member>
        <member name="T:Applix.TM1.API.TM1Server">
            <summary> Represents a TM1 database server for purposes of accessing and
            controlling the resources of TM1.
            </summary>
            <example>
            <summary>
            The following code example shows ...<p/>
            <p/>
            <b>NOTE:</b> For a complete example of logging into a <b>TM1Server</b>,
            see <see cref="T:Applix.TM1.API.TM1AdminServer"/>.<p/>
            </summary>
            <code lang="c#">
            </code>
            </example>
        </member>
        <member name="M:Applix.TM1.API.TM1Server.#ctor(Applix.TM1.API.TM1ServerInfo)">
            <summary> Construct a TM1Server object. When first created, this object
            is not logged-in.
            </summary>
            <param name="serverInfo"> Information about the database server to which
            this object may login.
            </param>
        </member>
        <member name="M:Applix.TM1.API.TM1Server.Logout">
            <summary> Logs out from this <b>TM1Server</b>. After logging-out this
            object is no longer usable.
            </summary>
            <remarks> Once logged-out, this object is removed from the
            TM1ServerInfo.<see cref="P:Applix.TM1.API.TM1ServerInfo.Users"/> collection and then
            the object is Disposed.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1Server.Name">
            <summary> Gets the name of the current <b>TM1Server</b> object. This property is not settable.
            </summary>
            <exception cref="T:System.NotSupportedException"> If an attempt is made to set
            the name.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1Server.ServerInfo">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1ServerInfo"/> object for this <b>TM1Server</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Server.IsSystemObject">
            <summary> This property always returns <b>false</b> for a <b>TM1Server</b> object
            because a <b>TM1Server</b> is the owner of system objects and
            therefore cannot be a system object.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Server.UserID">
            <summary> Gets the user ID that is logged into this <b>TM1Server</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Server.UserDisplayName">
            <summary> Gets the user ID that is logged into this <b>TM1Server</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Server.Cubes">
            <summary> Gets a collection of <see cref="T:Applix.TM1.API.TM1Cube"/>
            objects from this <b>TM1Server</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Server.Dimensions">
            <summary> Gets a collection of <see cref="T:Applix.TM1.API.TM1Dimension"/>
            objects from this <b>TM1Server</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Server.Processes">
            <summary> Gets a collection of <see cref="T:Applix.TM1.API.TM1Process"/>
            objects from this <b>TM1Server</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Server.Chores">
            <summary> Gets a collection of <see cref="T:Applix.TM1.API.TM1Chore"/>
            objects from this <b>TM1Server</b>.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1HeaderRow">
            <summary> Represents a row in a <see cref="T:Applix.TM1.API.TM1HeaderTable"/>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderRow.HeaderTable">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1HeaderTable"/> that owns this <b>TM1HeaderRow</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderRow.View">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1View"/> that owns this <b>TM1HeaderRow</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderRow.Index">
            <summary> Gets the index for this <b>TM1HeaderRow</b> in the collection of header rows.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderRow.Item(System.Int32)">
            <summary> Gets a <see cref="T:Applix.TM1.API.TM1HeaderCell"/> at the specified index location.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1HeaderRow.Cells">
            <summary> Gets the collection of header cells contained in this <b>TM1HeaderRow</b>.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1Exception">
            <summary> Represents the base class for exceptions specific to TM1.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Exception.ErrorCode">
            <summary> Gets the error code for this <b>TM1Exception</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Exception.ErrorString">
            <summary> Gets the error string for this <b>TM1Exception</b>.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1CellValueErrorException">
            <summary> Represents the exception that is thrown if code tries to access
            the value of a TM1Cell object but
            there was a previous error retrieving the value from the server.
            </summary> 
            <remarks> See TM1CellBase.<see cref="P:Applix.TM1.API.TM1CellBase.Value"/>,
            TM1CellBase.<see cref="P:Applix.TM1.API.TM1CellBase.StringValue"/>,
            and TM1CellBase.<see cref="P:Applix.TM1.API.TM1CellBase.NumericValue"/>.
            </remarks>
        </member>
        <member name="T:Applix.TM1.API.TM1ModifyConstAttemptException">
            <summary> Represents a TM1 exception that is thrown.
            
            
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1NameNotFoundException">
            <summary> Represents the exception that is thrown when
            an attempt was made to access a member by name, but the
            named member does not exist.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1DisposedObjectException">
            <summary> Represents the exception that is thrown when
            an attempt was made to utilize an object that has been
            disposed. For more details, see <see cref="M:Applix.TM1.API.TM1Object.Dispose"/> and
            <see cref="M:Applix.TM1.API.TM1ObjectCollection.Dispose"/>.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ObjectErrorException">
            <summary> Represents the exception that is thrown when
            an object retrieved from TM1 was an error object.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1LoginFailureException">
            <summary> Represents the exception that is thrown when
            a failed login attempt has occured.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Main">
            <summary> _TM1Main is the entry class into the TM1 .NET API. 
            This class contains methods to list available TM1 servers and
            communicate with those servers. Typically, one of the first things
            you must do in a TM1 .NET API program is to create a TM1Main object.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Main.#ctor">
            <summary> Creates a new TM1Main object. A TM1Main is similar to the user 
            handle in the TM1 APIs for C and Visual Basic. This object is used throughout
            your TM1 Java API program, and is a top-level object for the application.
            Your application will only require one TM1Main object. Once you
            have created it, you can log in to multiple TM1 servers using the 
            openConnection and openConnection1001 methods.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Main.openConnection(System.String,System.String,System.String)">
            <summary> Logs in to a TM1 Server using a TM1 client name and password. </summary>
            <param name="serverName">The name of the TM1 Server
            </param>
            <param name="client">The name of the user to login to the server
            </param>
            <param name="password">The password for the specified client
            </param>
            <returns> A _TM1Server object
            </returns>
            Obsolete!
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Main.OpenConnection(System.String,Applix.TM1.API.Internal._TM1Server)">
            <summary>
            Connect to a new tm1 server using information from the current connected server.
            </summary>
            <param name="serverName">name of new tm1 server</param>
            <param name="currentServer">currently connected _TM1Server object</param>
            <returns>_TM1Server object for the new tm1 server</returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Main.OpenConnection1001(System.String,System.String,System.String)">
            <summary> Logs in to a TM1 Server using a TM1 client name and password. 
            Use this function when you are connecting more than once from 
            the same computer using the same client ID. Only one port is used 
            for all the connections.
            <p> The first connection must be made using the function 
            TM1Main.openConnection. For all ensuing connections, use this method.
            </p>
            </summary>
            <param name="serverName">The name of the TM1 Server
            </param>
            <param name="client">The name of the user to login to the server
            </param>
            <param name="password">The password for the specified client
            </param>
            <returns> A _TM1Server object
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Main.closeConnection(Applix.TM1.API.Internal._TM1Server)">
            <summary> Logs out a user and closes the connection to the TM1 server.</summary>
            <param name="serv">- A _TM1Server object 
            </param>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Main.RefreshServers">
            <summary> Queries the TM1 Admin Server for an updated list of available TM1
            servers. You should call this method before calling TM1Main.getNumberOfServers.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Main.GetServer(System.String)">
            <summary> Takes a string name and returns a _TM1Server object. </summary>
            <param name="name">- name of the TM1 server
            </param>
            <returns> A _TM1Server object 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Main.GetServer(System.Int32)">
            <summary> Takes a list index and returns a _TM1Server object.</summary>
            <param name="index">- an index into the TM1Main's server list
            </param>
            <returns> A _TM1Server Object 
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Main.GetServerName(System.Int32)">
            <summary> Returns the name of the Server from the available server list.</summary>
            <returns> A string containing the TM1 server name
            </returns>
            <param name="index">- The position of the server in the list
            </param>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Main.NumberOfServers">
            <summary> Returns the number of available servers. This is the total number of
            TM1 servers accessible on your network and registered with the admin server
            you specify with the method setAdminHost.
            <p> You should call the method TM1Main.refreshServers before calling
            this method.
            </p>
            </summary>
            <returns> An integer indicating the number of available TM1 servers.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Main.AdminHost">
            <summary> Sets the admin host to a specific machine. The admin host is automatically
            set to your local machine if you do not call this method before calling 
            TM1Main.openConnection. Value can be one or several in the form "adminhost1;adminhost2"
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Main.AdminDirectory">
            <summary> This function does nothing. It is required by some customers
            for backward compatibility.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Main.ProgressHook">
            <summary> Sets the callback function for processing the progress of API calls.
            Value is callback object of type _TM1ProgressCallback.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Main.Version">
            <summary> Returns the version of the TM1 Java API.</summary>
            <returns> An integer indicating which version of the TM1 Java Api
            You are currently using. 
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Main.AdminHostSSLCertID">
            <summary> Gets / sets the admin host SSL Certificate ID.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Main.AdminSSLPort">
            <summary> Sets the SSL port number of the TM1 admin server.
            Set this property in order to use a port other than the default.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Main.IntegratedLoginMode">
            <summary>
            Currently logged in a TM1 server using SSPI
            </summary>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1Main.CAMLoginMode">
            <summary>
            Currently logged in a TM1 server using CAM passport.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1HierarchyLevel">
            <summary>This class contains methods that are related to a dimension hierarchy </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1HierarchyLevel.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary>_TM1HierarchyLevel -&gt; returns a level object</summary>
            <param name="s">a _TM1Server object containing the connection
            </param>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Server">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1HierarchyLevel.duplicate">
            <summary>returns a duplicate copy of the hierarchy</summary>
            <returns> _TM1HierarchyLevel The handle to the duplicate hierarchy
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1HierarchyLevel.register(Applix.TM1.API.Internal._TM1Dimension,System.String)">
            <summary>registers the hierarchy with the server making it available to other clients</summary>
            <param name="parent">the parent object of this hierarchy(_TM1Dimension)
            </param>
            <param name="name">The name of this object
            </param>
            <returns> _TM1HierarchyLevel The handle to the newly registered object
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1HierarchyLevel.getMember(System.Int32)">
            <summary>returns the level member object given its index in the level</summary>
            <param name="index">index, get member at position index
            </param>
            <returns> _TM1HierarchyMember hierarchy member object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1HierarchyLevel.getMember(System.String)">
            <summary>returns the level member object given its name</summary>
            <param name="name">name, get member with name
            </param>
            <returns> _TM1HierarchyMember hierarchy member object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1HierarchyMember">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyLevel.ObjectParent">
            <summary>return the object parent of the level which is a _TM1Hierarchy</summary>
            <returns> _TM1Hierarchy is a _TM1Hierarchy object
            </returns>
            <deprecated>
            </deprecated>
            <seealso cref="P:Applix.TM1.API.Internal._TM1HierarchyLevel.Parent">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyLevel.Parent">
            <summary>return the hierarchy containing the level</summary>
            <returns> _TM1Hierarchy that is parent
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Hierarchy">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1HierarchyLevel.MemberCount">
            <summary>returns the number of members in the level</summary>
            <returns> _TM1Val value is number of members
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="T:Applix.TM1.API.Internal._MDXAxis">
            <summary>
            MDXAxisInfo represents the results of the
            TM1OLEDBMDDatasetGetAxisInfo api call,
            for a particular axis of an MDXView instance.
            
            This class is not intended for standalone
            construction; rather, it is constructed as
            part of constructing an MDXView
            </summary>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXAxis.GetDimensionName(System.Int32)">
            <summary>
            Return the name of the axis dimension at the passed 0-based index.
            The axis dimensions are indexed starting with the outermost dimension.
            </summary>
            <param name="dimensionIndex">The index of the dimension</param>
            <returns>The name of the dimension</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXAxis.GetPropertyCount(System.Int32)">
            <summary>
            Return the number of member properties at the passed 0-based dimension index
            </summary>
            <param name="dimensionIndex">The index of the dimension</param>
            <returns>The number of member properties for this dimension</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXAxis.GetPropertyNames(System.Int32)">
            <summary>
            Return the names of the member properties at the passed 0-based dimension index.
            The names are returned as an array of strings.
            </summary>
            <param name="dimensionIndex">The index of the dimension</param>
            <returns>The member properties for this dimension</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXAxis.GetAxisValue(System.Int32,System.Int32,System.String)">
            <summary>
            Return an axis cell value at the passed axis coordinate.
            </summary>
            <param name="tupleIndex">The 0-based tuple index</param>
            <param name="dimensionIndex">The 0-based dimension index</param>
            <param name="propertyName">The name of the member property</param>
            <returns>The axis cell value</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXAxis.GetAxisValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return an axis cell value at the passed axis coordinate.
            </summary>
            <param name="tupleIndex">The 0-based tuple index</param>
            <param name="dimensionIndex">The 0-based dimension index</param>
            <param name="propertyIndex">The 0-based index of the member property</param>
            <returns>The axis cell value</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._MDXAxis.#ctor(Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1View,System.Int32)">
            <summary>
            Create a new MDXAxis, describing one axis of an MDXView
            </summary>
            <param name="axisinfo">An array describing all the axes</param>
            <param name="view">The underlying view that this is an axis of</param>
            <param name="axisDex">The index of the particular axis</param>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._MDXAxis.TupleCount">
            <summary>
            The number of tuples on this axis.
            For a rows axis, this gives the number of rows in the view.
            For a columns axis, this gives the number of columns in the view.
            </summary>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._MDXAxis.DimensionCount">
            <summary>
            The number of dimensions stacked on this axis.
            </summary>
            
        </member>
        <member name="T:Applix.TM1.API.TM1DimensionSpec">
            <summary> Immutable specifications for element(s) in a dimension.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionSpec.GetEnumerator">
            <summary> Get an enumerator over <see cref="T:Applix.TM1.API.TM1DimensionElement"/>
            objects held in this collection.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1DimensionSpec.System#Collections#IEnumerable#GetEnumerator">
            <commentsfrom cref="M:Applix.TM1.API.TM1DimensionSpec.GetEnumerator"/>
        </member>
        <member name="P:Applix.TM1.API.TM1DimensionSpec.GUID">
            <summary> Obtain this object's Guid. </summary>
            <remarks> This property may be accessed on a Disposed object. </remarks>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Properties">
            <summary>
            This class contains the defines for the TM1 Properties
            Defined in APU_PRL.H
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1Subset">
            <summary> Represents a subset object in a <b>TM1Server</b>.
            </summary>
            <remarks> A subset object may be owned by a <see cref="T:Applix.TM1.API.TM1Dimension"/> object
            in either its <see cref="P:Applix.TM1.API.TM1Dimension.PublicSubsets"/> or
            <see cref="P:Applix.TM1.API.TM1Dimension.PrivateSubsets"/> collections, in which case either
            <see cref="P:Applix.TM1.API.TM1Subset.IsPublic"/> or <see cref="P:Applix.TM1.API.TM1Subset.IsPrivate"/> is
            <b>true</b>. In this case, the subset must not be Disposed by client code.<p/>
            <p/>
            Or the subset may be a "transient" object that is not managed by a
            collection, in which case <see cref="P:Applix.TM1.API.TM1Subset.IsTransient"/> is <b>true</b>
            and client code must Dispose the object when finished with it.<p/>
            <p/>
            It is always the case that one of the <b>IsPublic</b>, <b>IsPrivate</b> or <b>IsTransient</b>
            properties is <b>true</b> and the other 2 properties are <b>false</b>.<p/>
            <p/>
            For details about disposing objects, see <see cref="M:Applix.TM1.API.TM1Object.Dispose"/>.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.Create(Applix.TM1.API.TM1Dimension)">
            <overloads> Factory methods to create a new subset for the dimension.
            </overloads>
            <summary> Creates a full subset. Initially the new subset contains all
            elements of the dimension.
            </summary>
            <remarks> The new subset is orphaned - i.e., it is not public or private
            and does not belong to any collection, also the name is empty.  Once
            <see cref="M:Applix.TM1.API.TM1Subset.SaveAs(System.String,System.Boolean,System.Boolean)"/> is called on this subset then
            its public/private and name properties will be set. If <b>SaveAs</b>
            is never called on this subset then <see cref="M:Applix.TM1.API.TM1Object.Dispose"/> must
            be called when finished with the object.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.Create(System.String,Applix.TM1.API.TM1Dimension)">
            <summary> Creates a subset from an MDX string.
            Also see remarks for <see cref="M:Applix.TM1.API.TM1Subset.Create(Applix.TM1.API.TM1Dimension)"/>(TM1Dimension).
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.#ctor(Applix.TM1.API.TM1Dimension)">
            <overloads> Creates a new subset object. </overloads>
            <summary> Creates a new orphaned subset.
            See <see cref="M:Applix.TM1.API.TM1Subset.Create(Applix.TM1.API.TM1Dimension)"/>.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.#ctor(Applix.TM1.API.Internal._TM1Subset,Applix.TM1.API.TM1Dimension,Applix.TM1.API.TM1SubsetCollection,System.String)">
            <summary> Creates a non-orphaned subset. Notes:
            <list>
            <item> This constructor creates an object that has a reference to its
            	collection and a valid name.
            </item>
            <item> The new object is intended to be held in the collection and this
            	constructor is intended to be utilized by code in
            	TM1SubsetCollection.
            </item>
            <item> If the subset object is obtained from TM1SubsetCollection by name
            	then it's possible that the object may not be held in the
            	collection. Instead the _TM1Subset internal object may have been
            	retrieved by name and a TM1Subset object created that, although it
            	references the collection, is not actually a member of the
            	collection.
            </item>
            </list>
            The <i>intSubset</i> parameter must be a duplicate.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.#ctor(Applix.TM1.API.Internal._TM1Subset,Applix.TM1.API.TM1Dimension,Applix.TM1.API.INotify,System.Int32,System.Boolean@)">
            <summary> This orphaned subset needs to be SaveAs()'ed before it will
            get a name and become associated with a collection (i.e., obtain a
            public or private name scope).
            The <i>intSubset</i> parameter must be a duplicate.
            This constructor is intended for TM1View, but may be used by any.
            </summary>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.Duplicate">
            <summary> Makes a duplicate copy of the current object. The returned
            object is orphaned - i.e., the <see cref="P:Applix.TM1.API.TM1Object.Name"/> is empty and
            <see cref="P:Applix.TM1.API.TM1Subset.IsTransient"/> is true (it is not associated with any
            <see cref="T:Applix.TM1.API.TM1SubsetCollection"/>).
            </summary>
            <remarks> The code that created this duplicate object must call
            <see cref="M:Applix.TM1.API.TM1Object.Dispose"/> when finished with the object. However,
            if <see cref="M:Applix.TM1.API.TM1Subset.SaveAs(System.String,System.Boolean,System.Boolean)"/> is called on this object, then
            it becomes non-orphaned, (i.e., it becomes owned by a
            <see cref="T:Applix.TM1.API.TM1SubsetCollection"/>) so Dispose must not be called
            thereafter.<p/>
            <p/>
            You can check if an object needs to Disposed by calling
            <see cref="P:Applix.TM1.API.TM1Subset.IsTransient"/>, which if <b>true</b> indicates the object
            should be Disposed.<p/>
            <p/>
            In the new subset all elements are de-selected.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.Save">
            <summary> Saves the pre-existing subset with the same name and
            public/private scope.
            See also <see cref="M:Applix.TM1.API.TM1Subset.SaveAs(System.String,System.Boolean,System.Boolean)"/>(string,bool,bool).
            </summary>
            <remarks> If <see cref="P:Applix.TM1.API.TM1Subset.IsTransient"/> is <b>true</b> then this method
            will fail.<p/>
            <p/>
            The <see cref="P:Applix.TM1.API.TM1Subset.Elements"/> collection is Cleared (see
            <see cref="M:Applix.TM1.API.TM1ObjectCollection.Clear"/>) and re-created by this method.
            Any pre-existing <see cref="T:Applix.TM1.API.TM1SubsetElement"/> references are
            invalidated.<p/>
            <p/>
            Note: exception types chosen by referring to "AssemblyBuilder.Save
            Method" topic in MSDN.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SaveAs(System.String,System.Boolean,System.Boolean)">
            <overloads> Saves the subset to a specified name, optionally specifying
            public/private scope and whether to overwrite.
            </overloads>
            <summary> Saves the subset by specifying name, public/private scope, and whether to
            overwrite.
            </summary>
            <remarks> The <see cref="P:Applix.TM1.API.TM1Subset.Elements"/> collection is Cleared (see
            <see cref="M:Applix.TM1.API.TM1ObjectCollection.Clear"/>) and re-created by this
            method. Any pre-existing <see cref="T:Applix.TM1.API.TM1SubsetElement"/> references are
            invalidated.<p/>
            <p/>
            If the subset object is previously a named object (i.e., is either a
            public or private subset that is owned by a <see cref="T:Applix.TM1.API.TM1Dimension"/>)
            and is saved to a different name, then the pre-existing subset continues
            to exist on the TM1 server and in the TM1Dimension's subset collection.
            </remarks>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SaveAs(System.String,System.Boolean)">
            <summary> Saves the subset to the specified name, no overwrite.
            See <see cref="M:Applix.TM1.API.TM1Subset.SaveAs(System.String,System.Boolean,System.Boolean)"/>(string,bool,bool).
            </summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Subset.KeepSelectedElements" filter="##REMARKS"/>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SaveAs(System.String)">
            <summary> Saves the subset to the specified name with the same public/private scope (default
            public) and no overwrite.
            See <see cref="M:Applix.TM1.API.TM1Subset.SaveAs(System.String,System.Boolean,System.Boolean)"/>(string,bool,bool).
            </summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Subset.KeepSelectedElements" filter="##REMARKS"/>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.Remove">
            <summary> Destroys this subset and removes it from the dimension's
            collection of subsets, both on the client side and server side.
            </summary>
            <remarks> If you only want to get rid of a transient client side object,
            then call <see cref="M:Applix.TM1.API.TM1Object.Dispose"/>. After calling this method,
            this <b>TM1Subset</b> object is no longer usable. This method is not
            re-entrant.<p/>
            <p/>
            If this subset belongs to a collection (i.e., either <see cref="P:Applix.TM1.API.TM1Subset.IsPublic"/>
            or <see cref="P:Applix.TM1.API.TM1Subset.IsPrivate"/> is <b>true</b>) then the owning
            <see cref="T:Applix.TM1.API.TM1SubsetCollection"/> is
            <see cref="M:Applix.TM1.API.TM1ObjectCollection.Refresh"/>'ed and all previous TM1Subset
            objects owned by the collection, including this one, are
            <see cref="M:Applix.TM1.API.TM1Object.Dispose"/>'d.
            Otherwise (<see cref="P:Applix.TM1.API.TM1Subset.IsTransient"/> is <b>true</b>) and only this
            object is Dispose'd.
            </remarks>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SelectElementsByLevel(System.Int32,System.Boolean)">
            <overloads> Selects elements by their hierarchical level.</overloads>
            <summary> Selects/deselects elements in this subset by their
            hierarchical level.
            </summary>
            <param name="nLevel"> Elements at the <i>nLevel</i> level are
            selected / deselected.
            </param>
            <param name="bSelect"> If <b>true</b> then select elements; if
            <b>false</b> then deselect.
            </param>
            <remarks> The loweset level is at the deepest level of hierarchy, and
            the level numbers increase going from child to parent. Thus, the 0th
            level is for all 'leaf' elements, i.e., for all elements that have no
            children. This includes those elements at the top-most level of the
            <see cref="P:Applix.TM1.API.TM1Subset.Elements"/> collection that have no children. 
            </remarks>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SelectElementsByLevel(System.Int32)">
            <summary> Selects elements in this subset by their hierarchical level.
            See <see cref="M:Applix.TM1.API.TM1Subset.SelectElementsByLevel(System.Int32,System.Boolean)"/>(int,bool).
            </summary>
            <param name="nLevel"> Elements at this level are selected.
            </param>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SelectElementsByPattern(System.String,System.Boolean)">
            <overloads> Selects elements by pattern string.</overloads>
            <summary> Selects/deselects elements in this subset by a pattern string.
            </summary>
            <param name="strPattern"> Elements that correspond to <i>strPattern</i>
            pattern are selected / deselected.
            </param>
            <param name="bSelect"> If <b>true</b> then select elements; if
            <b>false</b> then deselect.
            </param>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SelectElementsByPattern(System.String)">
            <summary> Selects elements in this subset by a pattern string.
            See <see cref="M:Applix.TM1.API.TM1Subset.SelectElementsByPattern(System.String,System.Boolean)"/>(string,bool).
            </summary>
            <param name="strPattern"> Elements that correspond to <i>strPattern</i>
            pattern are selected.
            </param>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.KeepSelectedElements">
            <summary> Deletes all those elements that have previously not been
            selected, leaving only those elements that were in the subset and selected.
            </summary>
            <remarks> The <see cref="P:Applix.TM1.API.TM1Subset.Elements"/> collection is Cleared
            (see <see cref="M:Applix.TM1.API.TM1ObjectCollection.Clear"/>) and re-created by using
            this method. Any pre-existing <see cref="T:Applix.TM1.API.TM1SubsetElement"/> references
            are invalidated.
            </remarks>
            <returns> The number of elements remaining in the subset.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.DeleteSelectedElements">
            <summary> Deletes all those elements that have previously been selected
            leaving only those elements that were in the subset and not selected.
            </summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Subset.KeepSelectedElements" filter="##REMARKS"/>
            <returns> The number of elements remaining in the subset.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SortElements(System.Boolean)">
            <summary> Sorts elements alphabetically by name.
            </summary>
            <param name="bAlphabetical"> Sort alphabetically if <b>true</b>, reverse
            alphabetically if <b>false</b>.
            </param>
            <commentsfrom cref="M:Applix.TM1.API.TM1Subset.KeepSelectedElements" filter="##REMARKS"/>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SortElements">
            <summary> Sorts elements ascending alphabetically by name.
            See <see cref="M:Applix.TM1.API.TM1Subset.SortElements(System.Boolean)"/>(bool).
            </summary>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SortElementsByHierarchy">
            <summary> Sorts elements by hierarchy.
            </summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Subset.KeepSelectedElements" filter="##REMARKS"/>
            <returns> Boolean indicator of success.
            </returns>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SortElementsByIndex(System.Boolean)">
            <summary> Sorts elements by index in the <see cref="T:Applix.TM1.API.TM1Dimension"/>.
            </summary>
            <param name="bAscending"> Sort ascending if <b>true</b>, descending
            if <b>false</b>.
            </param>
            <commentsfrom cref="M:Applix.TM1.API.TM1Subset.KeepSelectedElements" filter="##REMARKS"/>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.SortElementsByIndex">
            <summary> Sorts elements ascending by index.
            See <see cref="M:Applix.TM1.API.TM1Subset.SortElementsByIndex(System.Boolean)"/>(bool).
            </summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Subset.KeepSelectedElements" filter="##REMARKS"/>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.ExpandAllElements">
            <summary> Makes the <see cref="P:Applix.TM1.API.TM1Subset.Elements"/> collection include all
            elements. All descendants of all top-level elements are also included.
            </summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Subset.KeepSelectedElements" filter="##REMARKS"/>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.ExpandElements">
            <summary> Makes the <see cref="P:Applix.TM1.API.TM1Subset.AllElements"/> collection include all
            top-level elements. No children of any of the top-level elements are
            included in the collection.
            </summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Subset.KeepSelectedElements" filter="##REMARKS"/>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.CollapseElements">
            <summary> Removes all elements from the <see cref="P:Applix.TM1.API.TM1Subset.Elements"/>
            collection.
            </summary>
            <commentsfrom cref="M:Applix.TM1.API.TM1Subset.KeepSelectedElements" filter="##REMARKS"/>
        </member>
        <member name="M:Applix.TM1.API.TM1Subset.FilterSubsetBySecurity(Applix.TM1.API.Internal._TM1Subset)">
            <summary> This method filters the subset based on security access.
            </summary>
            <remarks> There is an unresolved question about which security level
            makes sense for exposing objects to clients. The approach that has been
            used so far is that None access means it's hidden, other than None
            (i.e., Read access or greater) means it's exposed.
            </remarks>
            <param name="sub"></param>
            <returns>Returns <b>true</b> if the subset filtering altered the subset.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.Name">
            <summary> Gets the name of the Subset object. This property is not
            directly settable by client code.
            </summary>
            <remarks> The value of the <b>Name</b> proprty for the subset is determined as follows:
            <list>
            <item> When the subset is owned by a <see cref="T:Applix.TM1.API.TM1Dimension"/>, the <b>Name</b> property is the
            	name of the subset on the TM1 server.
            </item>
            <item> When the subset is an orphaned object (<see cref="P:Applix.TM1.API.TM1Subset.IsTransient"/> is
            	<b>true</b>), the <b>Name</b> property is an empty string.
            </item>
            </list>
            The subset's name may be set by client code by executing the
            <see cref="M:Applix.TM1.API.TM1Subset.SaveAs(System.String,System.Boolean,System.Boolean)"/> method.
            </remarks>
            <exception cref="T:System.NotSupportedException"> If an attempt is made to set
            the name.
            </exception>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.Dimension">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Dimension"/> that owns this <b>TM1Subset</b> object.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.IsPublic">
            <summary> Returns <b>true</b> if this is a public subset owned by a
            <see cref="T:Applix.TM1.API.TM1Dimension"/> object and managed by a
            <see cref="T:Applix.TM1.API.TM1SubsetCollection"/>. If so, then this object must not be
            Disposed by client code.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.IsPrivate">
            <summary> Returns <b>true</b> if this is a private subset owned by a
            <see cref="T:Applix.TM1.API.TM1Dimension"/> object and managed by a
            <see cref="T:Applix.TM1.API.TM1SubsetCollection"/>. If so then this object must not be
            Disposed by client code.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.IsTransient">
            <summary> Returns <b>true</b> if this is neither a public nor private subset
            and therefore is not managed by a <see cref="T:Applix.TM1.API.TM1SubsetCollection"/>.
            If so, then this object must be Disposed by client code.
            For more details, see <see cref="M:Applix.TM1.API.TM1Object.Dispose"/>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.AllElements">
            <summary> Gets a collection of all elements (including root, parent and children elements)
            as a flat-list from this <b>TM1Subset</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.RootElements">
            <summary> Gets a collection of only root elements (elements that have no parents)
            from this <b>TM1Subset</b>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.Elements">
            <summary> Gets a collection of root elements from this <b>TM1Subset</b>.
            See also <see cref="P:Applix.TM1.API.TM1Subset.RootElements"/>.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.LevelsCount">
            <summary> Gets the count of the maximum number of hierarchy levels in this subset.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.ExpandAbove">
            <summary> Returns <b>true</b> if child elements are displayed in the user
            interface above their parent elements, <b>false</b> if below (default).
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.Alias">
            <summary> Gets the alias name of this subset.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.Expression">
            <summary> Gets/sets the MDX expression that defines the elements
            included in the subset.
            </summary>
            <remarks> The <see cref="P:Applix.TM1.API.TM1Subset.Elements"/> collection is Cleared (see
            <see cref="M:Applix.TM1.API.TM1ObjectCollection.Clear"/>) and re-created by setting
            this property. Any pre-existing <see cref="T:Applix.TM1.API.TM1SubsetElement"/> references
            are invalidated.
            </remarks>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.Modified">
            <summary> Returns <b>true</b> if any editting operations have changed this
            subset since the last <see cref="M:Applix.TM1.API.TM1Subset.Save"/> or
            <see cref="M:Applix.TM1.API.TM1Subset.SaveAs(System.String,System.Boolean,System.Boolean)"/> method was called.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.SelectedElementIndex">
            <summary> Single selected element index.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1Subset.SelectedElement">
            <summary> Gets the last selected element as a <see cref="T:Applix.TM1.API.TM1SubsetElement"/> object.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.TM1ChoreCollection">
             <summary> Represents a collection of <see cref="T:Applix.TM1.API.TM1Chore"/> objects in the <b>TM1Server</b>.
             </summary>
             <remarks> The exact contents of the returned collection depends on the
             security privleges of the current user for this <b>TM1Server</b>.
             </remarks>
             <example>
             <summary>
             After logging into a <b>TM1Server</b>, use the <see cref="P:Applix.TM1.API.TM1Server.Chores"/>
             property to retrieve a <b>TM1ChoreCollection</b>, as shown in the following code example.<p/>
             <p/>
             <b>NOTE:</b> For a complete example of logging into a <b>TM1Server</b>,
             see <see cref="T:Applix.TM1.API.TM1AdminServer"/>.<p/>
             </summary>
             <code lang="c#">
             // Retrieve a chore collection
             TM1ChoreCollection myChores = aServer.Chores;
            
             // Print total number of chores in collection
             Console.WriteLine("Number of chores = " + myChores.Count);
            
             // Print list of chore names
             foreach (TM1Chore aChore in myChores)
             {
             		Console.WriteLine(aChore.Name);
             }
             </code>
             </example>
        </member>
        <member name="P:Applix.TM1.API.TM1ChoreCollection.Server">
            <summary> Gets the <see cref="T:Applix.TM1.API.TM1Server"/> that owns this collection.
            </summary>
        </member>
        <member name="P:Applix.TM1.API.TM1ChoreCollection.Item(System.Int32)">
            <overloads> Obtain a <see cref="T:Applix.TM1.API.TM1Chore"/> object. </overloads>
            <summary> Obtain a <see cref="T:Applix.TM1.API.TM1Chore"/> object by <i>index</i>.
            See remarks for TM1CubeCollection.<see cref="P:Applix.TM1.API.TM1CubeCollection.Item(System.Int32)"/>(int).
            </summary>
            <example>
            <code lang="c#">
            	TM1Chore chore = server.Chores[42];
            </code>
            </example>
        </member>
        <member name="P:Applix.TM1.API.TM1ChoreCollection.Item(System.String)">
            <summary> Obtain a <see cref="T:Applix.TM1.API.TM1Chore"/> object by <i>name</i>.
            See remarks for TM1CubeCollection.<see cref="P:Applix.TM1.API.TM1CubeCollection.Item(System.String)"/>(string).
            </summary>
            <example>
            <code lang="c#">
            	TM1Chore chore = server.Chores["Deep Thought"];
            </code>
            </example>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1View">
            <summary>This class contains the methods that operate on a _TM1View </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.constructArray">
            <summary>Constructs a 2-dimensional array of data that can be used to display the data of a view</summary>
            <returns> _TM1Val boolean indicator of success  
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.destroyArray">
            <summary>destroys a previously constructed array of data from a view</summary>
            <returns> _TM1Val boolean indicator of success  
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getCellValue(Applix.TM1.API.Internal._TM1Val)">
            <summary> Returns the value of a view cell.</summary>
            <param name="elemTitles">A _TM1Val containing an array of element handles. You must
            supply one element from each of the dimensions of the view in the same
            order as the dimensions exist in the cube.
            </param>
            <returns> _TM1Val view cell value
            @throws CubeKeyInvalid
            @throws CubeNumberOfKeysInvalid
            @throws ObjectSecurityNoReadRights
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getCellsValue(Applix.TM1.API.Internal._TM1Val)">
            <summary> Returns the value of cells.</summary>
            <param name="cellsArray">A array of _TM1Val containing an array of element handles. You must
            supply one element from each of the dimensions of the view in the same
            order as the dimensions exist in the cube.
            </param>
            <returns> _TM1Val view cells value
            @throws CubeKeyInvalid
            @throws CubeNumberOfKeysInvalid
            @throws ObjectSecurityNoReadRights
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getArrayValue(System.Int32,System.Int32)">
            <summary>Retrieves a single value from a view in the Column, Row order</summary>
            <param name="column">1-based number corresponding to the column in the view array of the value you want to retrieve
            </param>
            <param name="row">1-based number corresponding to the row in the view array of the value you want to retrieve
            </param>
            <returns> _TM1Val single cell value (can be either a number or string)
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getArrayValue(Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary>Retrieves a single value from a view in the Column, Row order</summary>
            <param name="column">1-based number corresponding to the column in the view array of the value you want to retrieve
            </param>
            <param name="row">1-based number corresponding to the row in the view array of the value you want to retrieve
            </param>
            <returns> _TM1Val single cell value (can be either a number or string)
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getArrayFormattedValue(System.Int32,System.Int32)">
            <summary>Retrieves a single formatted value from a view in the Column, Row order</summary>
            <param name="column">1-based number corresponding to the column in the view array of the value you want to retrieve
            </param>
            <param name="row">1-based number corresponding to the row in the view array of the value you want to retrieve
            </param>
            <returns> _TM1Val single cell value (can be either a number or string)
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getArrayFormattedValue(Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val)">
            <summary>Retrieves a single formatted value from a view in the Column, Row order</summary>
            <param name="column">1-based number corresponding to the column in the view array of the value you want to retrieve
            </param>
            <param name="row">1-based number corresponding to the row in the view array of the value you want to retrieve
            </param>
            <returns> _TM1Val single cell value (can be either a number or string)
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.createExtract">
            <summary>ViewExtractCreate</summary>
            <returns> _TM1Val boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Query">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.register(Applix.TM1.API.Internal._TM1Cube,System.String)">
            <summary>registers the view with the server making it available to other clients</summary>
            <param name="parent">the parent object of this view(_TM1Cube)
            </param>
            <param name="name">The name of this object
            </param>
            <returns> _TM1View The handle to the newly registered view object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1View">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.registerPrivate(Applix.TM1.API.Internal._TM1Cube,System.String)">
            <summary>registers the private view with the server </summary>
            <param name="parent">the parent object of this view(_TM1Cube)
            </param>
            <param name="name">The name of this object
            </param>
            <returns> _TM1View The handle to the newly registered object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1View">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.privatePublish(System.String)">
            <summary>publishes a private view making it available to other clients on the server
            Note that the old private view is no longer in existance and the old view
            handle should not be used
            </summary>
            <param name="name">name for the public view
            </param>
            <returns> _TM1View the newly published view
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setSkipCalculatedValues(Applix.TM1.API.Internal._TM1Val)">
            <summary>sets the SkipCalculatedValues property on the view</summary>
            <param name="val">boolean value for skipping calculated values during view manipulation
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setSkipCalculatedValues(System.Boolean)">
            <summary>sets the SkipCalculatedValues property on the view</summary>
            <param name="val">boolean value for skipping calculated values during view manipulation
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getSkipCalculatedValues">
            <summary>gets the SkipCalculatedValues property on the view</summary>
            <returns> _TM1Val boolean value of the property
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setSkipZeroes(Applix.TM1.API.Internal._TM1Val)">
            <summary>sets the SkipZeros property on the view</summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setSkipZeroes(System.Boolean)">
            <summary>sets the SkipZeros property on the view</summary>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getSkipZeroes">
            <summary>gets the SkipZeros property value which supresses zeros in a view</summary>
            <returns> _TM1Val boolean value of the property
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setRealLimitA(Applix.TM1.API.Internal._TM1Val)">
            <summary>Set Property ViewExtractRealLimitA</summary>
            <param name="val">_TM1Val indicating limit
            </param>
            <returns> _TM1Val Boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setRealLimitA(System.Double)">
            <summary>Set Property ViewExtractRealLimitA</summary>
            <param name="val">double indicating limit
            </param>
            <returns> _TM1Val Boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getRealLimitA">
            <summary>Get Property ViewExtractRealLimitA</summary>
            <returns> _TM1Val
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setRealLimitB(Applix.TM1.API.Internal._TM1Val)">
            <summary>Set Property ViewExtractRealLimitB</summary>
            <param name="val">_TM1Val indicating limit
            </param>
            <returns> _TM1Val Boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setRealLimitB(System.Double)">
            <summary>Set Property ViewExtractRealLimitB</summary>
            <param name="val">double indicating limit
            </param>
            <returns> _TM1Val Boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getRealLimitB">
            <summary>get property ViewExtractRealLimitB</summary>
            <returns> _TM1Val with limit
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setStringLimitA(Applix.TM1.API.Internal._TM1Val)">
            <summary>Set Property ViewExtractStringLimitA</summary>
            <param name="val">_TM1Val
            </param>
            <returns> _TM1Val Boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setStringLimitA(System.String)">
            <summary>Set Property ViewExtractStringLimitA</summary>
            <param name="val">String
            </param>
            <returns> _TM1Val Boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getStringLimitA">
            <summary>get property ViewExtractRealLimitB</summary>
            <returns> _TM1Val with limit
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setStringLimitB(Applix.TM1.API.Internal._TM1Val)">
            <summary>Set Property ViewExtractStringLimitB</summary>
            <param name="val">_TM1Val
            </param>
            <returns> _TM1Val Boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setStringLimitB(System.String)">
            <summary>Set Property ViewExtractStringLimitB</summary>
            <param name="val">String
            </param>
            <returns> _TM1Val Boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getStringLimitB">
            <summary>get property ViewExtractStringLimitB</summary>
            <returns> _TM1Val with limit
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setExtractComparison(Applix.TM1.API.Internal._TM1Val)">
            <summary>sets property ViewExtractComparison</summary>
            <param name="val">comparison operator listed in _TM1ViewExtractComparison Object
            </param>
            <returns> _TM1Val boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1ViewExtractComparison">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setExtractComparison(System.Int32)">
            <summary>sets property ViewExtractComparison</summary>
            <param name="val">comparison operator listed in _TM1ViewExtractComparison Object
            </param>
            <returns> _TM1Val boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
            <seealso cref="T:Applix.TM1.API.Internal._TM1ViewExtractComparison">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getExtractComparison">
            <summary>ViewExtractComparison</summary>
            <returns> _TM1Val property ViewExtractComparison
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setPreConstruct(Applix.TM1.API.Internal._TM1Val)">
            <summary>Informs the server to construct the 2-dimensional array apriori</summary>
            <param name="val">Boolean to turn on or off the view pre-construction
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setPreConstruct(System.Boolean)">
            <summary>Informs the server to construct the 2-dimensional array apriori</summary>
            <param name="val">Boolean to turn on or off the view pre-construction
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getPreConstruct">
            <summary>retrieves the current setting of the ViewPreConstruct Property </summary>
            <returns> _TM1Val boolean value of the property 
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setSuppressZeroes(Applix.TM1.API.Internal._TM1Val)">
            <summary>Setting the flag to TRUE will cause the construction of the 2-dimension view array
            to be modified in the following manner:
            All columns/rows composed completely of zeros will be deleted from the view array
            </summary>
            <param name="val">boolean value for the property
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setSuppressZeroes(System.Boolean)">
            <summary>Setting the flag to TRUE will cause the construction of the 2-dimension view array
            to be modified in the following manner:
            All columns/rows composed completely of zeros will be deleted from the view array
            </summary>
            <param name="val">boolean value for the property
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setSuppressZerosOnRows(Applix.TM1.API.Internal._TM1Val)">
            <summary>
            sets the zero suppression state on row axis
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setSuppressZerosOnRows(System.Boolean)">
            <summary>
            sets the zero suppression state on row axis
            </summary>
            <param name="bval"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setSuppressZerosOnColumns(Applix.TM1.API.Internal._TM1Val)">
            <summary>
            sets the zero suppression state on column axis
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setSuppressZerosOnColumns(System.Boolean)">
            <summary>
            sets the zero suppression state on column axis
            </summary>
            <param name="bval"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getSuppressZeroes">
            <summary>returns the supress zero property</summary>
            <returns> _TM1Val Boolean indicating Suppress Zeroes On/Off 
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getRowSuppressZeroes">
            <summary>
            Returns zero suppression property on row axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getColumnSuppressZeroes">
            <summary>
            Returns zero suppression property on column axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setFormat(Applix.TM1.API.Internal._TM1Val)">
            <summary>Sets the view format </summary>
            <param name="val">_TM1Val representing the format to set on the view 
            _TM1Val probably converts to a string
            String = null, no format
            String in the format of n:fp
            f is the format for the cell, p is the precision
            C = Currency
            G = General
            P = Percentage
            SC= Scientific
            </param>
            <returns> _TM1Val as Boolean indicating success
            The currency symbol is determined by the windows regional settings
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setFormat(System.String)">
            <summary>Sets the view format </summary>
            <param name="val">String representing the format to set on the view 
            _TM1Val probably converts to a string
            String = null, no format
            String in the format of n:fp
            f is the format for the cell, p is the precision
            C = Currency
            G = General
            P = Percentage
            SC= Scientific
            </param>
            <returns> _TM1Val as Boolean indicating success
            The currency symbol is determined by the windows regional settings
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getFormat">
            <summary>gets the view format (comma, currency, etc.)</summary>
            <returns> _TM1Val representing the currently set format on the view 
            _TM1Val probably converts to a string
            String = null, no format
            String in the format of n:fp
            f is the format for the cell, p is the precision
            C = Currency
            G = General
            P = Percentage
            SC= Scientific
            The currency symbol is determined by the windows regional settings
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setShowAutomatically(Applix.TM1.API.Internal._TM1Val)">
            <summary>set show automatically for a view</summary>
            <param name="val">_TM1Val representing a boolean to turn on/off
            </param>
            <returns> _TM1Val Boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setShowAutomatically(System.Boolean)">
            <summary>set show automatically for a view</summary>
            <param name="val">_TM1Val representing a boolean to turn on/off
            </param>
            <returns> _TM1Val Boolean indicating success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getShowAutomatically">
            <summary>gets property ViewShowAutomatically</summary>
            <returns> _TM1Val boolean indicating on/off
            </returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.setTitleElements(Applix.TM1.API.Internal._TM1Val)">
            <summary>sets the title elements for the view. The elements correspond to the titleSubsets 
            that were set on the view
            </summary>
            <param name="val">_TM1Val array capsule that contains element indices into the corresponding titleSubsets
            </param>
            <returns> _TM1Val boolean indicator of success
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getTitleElements">
            <summary>retrieves the currently set title Elements on the view</summary>
            <returns> _TM1Val array capsule that contains the element indices
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getTitleElement(System.Int32)">
            <summary>Returns the handle for the selected element in the dimension at index in the title area.</summary>
            <param name="index">1 based index of the dimension in the title area.
            </param>
            <returns> _TM1Element representing title element
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Element">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getTitleSubset(System.Int32)">
            <summary>get title subset by index</summary>
            <param name="index">Index is 1-based
            </param>
            <returns> _TM1Subset representing title subset
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Subset">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getTitleSubset(System.String)">
            <summary>get title subset by string</summary>
            <param name="name">name of title subset looking for
            </param>
            <returns> _TM1Subset representing title subset
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Subset">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getColumnSubset(System.Int32)">
            <summary>getColumnSubset (int index) 
            Index is 1-based
            </summary>
            <param name="index">index 
            </param>
            <returns> _TM1Subset with array handle 
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Subset">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getColumnSubset(System.String)">
            <summary>getColumnSubset (String) </summary>
            <param name="name">name of column subset to obtain
            </param>
            <returns> _TM1Subset with array handle
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Subset">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getRowSubset(System.Int32)">
            <summary>gets row subset based on position</summary>
            <param name="index">index indicating position, Index is 1-based
            </param>
            <returns> _TM1Subset with row subset handle
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Subset">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.getRowSubset(System.String)">
            <summary>gets row subset based on name</summary>
            <param name="name">name of subset
            </param>
            <returns> _TM1Subset with row subset handle
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Subset">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.duplicate">
            <summary>returns a duplicate copy of the view which can be used to create
            a new view 
            </summary>
            <returns> _TM1View The handle to the duplicate subset
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.SetViewCellData(System.Int32,System.Int32,System.Double)">
            <summary>
            Updates the cell identified by iRow and iCol with the new value
            </summary>
            <param name="iRow"></param>
            <param name="iCol"></param>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.SetViewCellData(System.Int32,System.Int32,System.String)">
            <summary>
            Updates the view cell identified by iRow and iCol with the new value
            </summary>
            <param name="iRow"></param>
            <param name="iCol"></param>
            <param name="sVal"></param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.SpreadData(System.Int32,System.Int32,System.String)">
            <summary>
            SpreadData - This function spreads data into the view cells according to the
            control string specified.
            </summary>
            <param name="iRow"></param>
            <param name="iCol"></param>
            <param name="controlstring">This string describes the spread information</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.SpreadData(System.Int32,System.Int32,System.Collections.ArrayList,System.String)">
            <summary>
            SpreadData - This function spreads data into the view cells according to the
            control string specified.
            </summary>
            <param name="iRow"></param>
            <param name="iCol"></param>
            <param name="refCellArr">Reference Array for Relative spreading operation</param>
            <param name="controlstring">This string describes the spread information</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.SpreadData(System.Int32,System.Int32,Applix.TM1.API.Internal._TM1Val,System.String)">
            <summary>
            SpreadData - This function spreads data into the view cells according to the
            control string specified.
            </summary>
            <param name="iRow"></param>
            <param name="iCol"></param>
            <param name="cellRef">Reference _TM1Val Array for Relative spreading operation</param>
            <param name="controlstring">This string describes the spread information</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.SpreadData(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            SpreadData - This function spreads data into the view cells according to the
            control string specified.
            </summary>
            <param name="iRow"></param>
            <param name="iCol"></param>
            <param name="iRowEnd"></param>
            <param name="iColEnd"></param>
            <param name="controlstring">This string describes the spread information</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.SpreadData(Applix.TM1.API.Internal._TM1Val,Applix.TM1.API.Internal._TM1Val,System.String)">
            <summary>
            SpreadData - This function spreads data into the view cells according to the
            control string specified.
            </summary>
            <param name="cellRange"></param>
            <param name="cellRef">Reference _TM1Val Array for Relative spreading operation</param>
            <param name="controlstring">This string describes the spread information</param>
            <returns></returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.GetViewCellsHoldStatus(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This function returns the hold status of all the cells in the view beginning at iStartRow/iStartCol
            until iEndRow/iEndCol
            </summary>
            <param name="iStartRow">starting row for retrieving hold status (1-based)</param>
            <param name="iStartColumn">starting column for retreiving hold status</param>
            <param name="iEndRow">ending row for retreiving hold status</param>
            <param name="iEndColumn">ending column for retreiving hold status</param>
            <returns> _TM1Val array of cell statuses. The data returned in an array of columns by rows.</returns>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.GetOLEDBDataset(Applix.TM1.API.Internal._TM1View)">
            <summary>
            Get a handle to an ODBO MDDataset
            </summary>
            <param name="view">The handle to a view created using an MDX SELECT</param>
            <returns>The MDDataset handle</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.GetOLEDBAxisInfo(Applix.TM1.API.Internal._TM1Object)">
            <summary>
            Get information describing the axes of an MDDataset
            </summary>
            <param name="dataset">The MDDataset handle</param>
            <returns>A _TM1Val array describing the dataset's axes</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.GetOLEDBAxisRowset(Applix.TM1.API.Internal._TM1View,System.Int32)">
            <summary>
            Get a handle to an ODBO MDDataset axis rowset.
            </summary>
            <param name="view">The handle to a view created using an MDX SELECT</param>
            <param name="axis">The index to the axis: 0 - slicer, 1 - column axis, 2 - row axis, ..</param>
            <returns>The axis rowset handle</returns>
            
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1View.GetOLEDBRowsetData(Applix.TM1.API.Internal._TM1Object,System.UInt64,System.UInt64,Applix.TM1.API.Internal._TM1Val)">
            <summary>
            Return rows of data from an ODBO rowset
            </summary>
            <param name="rowset">The rowset handle</param>
            <param name="startRow">The 1-based starting row index</param>
            <param name="endRow">The 1-based ending row index</param>
            <param name="columnArray">An array of 0-based indices for the rowset columns to return</param>
            <returns>A _TM1Val array containing the rows data</returns>
            
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1View.NumberOfArrayColumns">
            <summary>Returns the number of columns in the view array </summary>
            <returns> int the number of columns
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1View.NumberOfArrayRows">
            <summary>returns the number of rows in the view array</summary>
            <returns> int number of rows 
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1View.Parent">
            <summary>return the object parent of the view which is a _TM1Cube</summary>
            <returns> _TM1Cube is a _TM1Cube object
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Cube">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1View.TitleElementCount">
            <summary>Returns the number of title elements</summary>
            <returns> int number of title elements
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1View.TitleSubsetCount">
            <summary>Returns the number of dimensions in the titles area</summary>
            <returns> int The number of title dimensions
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1View.TitleSubsets">
            <summary>returns the titleSubsets set on the current view
            get property ViewTitleSubsets
            </summary>
            <returns> _TM1Val array capsule containing the titleSubsets
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1View.ColumnSubsetCount">
            <summary>Returns the number of dimensions in the columns area</summary>
            <returns> int count of dimensions in columns area.
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1View.ColumnSubsets">
            <summary>returns the columnSubsets set on the current view
            gets property ViewColumnSubsets
            </summary>
            <returns> _TM1Val array capsule containing the columnSubsets
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1View.RowSubsetCount">
            <summary>Returns the number of dimensions in the row area.</summary>
            <returns> int indicating number of row subsets
            </returns>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1View.RowSubsets">
            <summary>returns the rowSubsets set on the current view
            gets property ViewRowSubsets
            </summary>
            <returns> _TM1Val array capsule containing the rowSubsets
            </returns>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Val">
            </seealso>
        </member>
        <member name="P:Applix.TM1.API.Internal._TM1View.Filter">
            <summary>
            This property gets/sets the filter string on the view.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1EntryCube">
            <summary>
            Summary description for _TM1EntryCube.
            </summary>
        </member>
        <member name="T:Applix.TM1.API.Internal._TM1Connection">
            <summary>_TM1Connection - This class is used for replication related functions
            Replicating a server requires ADMIN privileges on the planet server
            </summary>
        </member>
        <member name="M:Applix.TM1.API.Internal._TM1Connection.#ctor(Applix.TM1.API.Internal._TM1Server)">
            <summary>_TM1Connection : Creates a new _TM1Connection Object </summary>
            <param name="s">_TM1Server Object
            </param>
            <seealso cref="T:Applix.TM1.API.Internal._TM1Server">
            </seealso>
        </member>
    </members>
</doc>
